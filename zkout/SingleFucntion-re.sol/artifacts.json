{
  "contracts": {
    "src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol": {
      "DepositFunds": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "balances",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol\":\"DepositFunds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol\":{\"keccak256\":\"0xab0729ae858eeadb2ff8dd138bad6b8b372647913ad47fa3e0de05afb85bdf3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://872f627411a885971af19244a74c7e49eb565f64cd4ed8d8e126009ca229341c\",\"dweb:/ipfs/QmX5TWTe6teHFcpjresD3swTfjfe1R7jw21cCzot4NQ5y7\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"SingleFucntion-re.sol:DepositFunds\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_32\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_15[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub!\tr3, r0, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r2\n\tcontext.gas_left\tr1\n\tadd\tstack-[1], r0, r4\n\tsub.s!\t4, r4, r5\n\tjump.ne\t@.BB0_17\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tjump\t@.BB0_18\n.BB0_32:\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t1, r0, r3\n\tcontext.get_context_u128\tr2\n\txor\tr2, r3, r4\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub!\tr3, r4, r4\n\tjump.le\t@.BB0_35\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_35:\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_17:\n\tadd\t@CPI0_0[0], r0, r6\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr6, r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr6, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r4\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_18:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_23\n.BB0_19:\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_21\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t20, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_13[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_14[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_23:\n\tsub.s!\t@CPI0_9[0], r1, r3\n\tjump.ge\t@.BB0_24\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r5\n\tand\tr3, r5, r3\n\tadd\t63, r3, r3\n\tand\tr3, r5, r3\n\tld.1\t64, r7\n\tadd\tr7, r3, r3\n\tsub!\tr3, r7, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_10[0], r3, r6\n\tjump.gt\t@.BB0_24\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_24\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr7, r1, r9\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_36\n\tadd\tr0, r0, r6\n.BB0_30:\n\tshl.s\t5, r6, r7\n\tadd\tr9, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_30\n.BB0_36:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_19\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr9, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_19\n.BB0_24:\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tand\t@CPI0_11[0], r4, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsstore\tr1, r0\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI1_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t64, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3504541104\nCPI0_3:\n\t.cell 1020253707\nCPI0_4:\n\t.cell 669136355\nCPI0_5:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_6:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_7:\n\t.cell 2852213850513516153367582212096\nCPI0_8:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_9:\n\t.cell 18446744073709551616\nCPI0_10:\n\t.cell 18446744073709551615\nCPI0_11:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_12:\n\t.cell 31834011171830534752912393390885353011711661642506317732200963893479440646144\nCPI0_13:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_14:\n\t.cell 7922816251426433759354395033600\nCPI0_15:\n\t.cell 2535301202817642044428229017600\n",
          "bytecode": {
            "object": "0002000000000002000100000000000200000000030100190000006003300270000000400330019700010000003103550000008004000039000000400040043f0000000102200190000000250000c13d000000040230008c000000dd0000413d000000000201043b000000e002200270000000420420009c0000004a0000613d000000430420009c0000002d0000613d000000440220009c000000dd0000c13d0000000002000416000000240330008c000000dd0000413d000000000202004b000000dd0000c13d0000000401100370000000000101043b0000004b0210009c000000dd0000213d0000000000100435000000200000043f000000000100001900fb00df0000040f000000000101041a000000800010043f0000004f01000041000000fc0001042e0000000001000416000000000101004b000000dd0000c13d0000002001000039000001000010044300000120000004430000004101000041000000fc0001042e0000000001000416000000000101004b000000dd0000c13d0000000001000411000100000001001d0000000000100435000000200000043f00000040010000410000000002000414000000400320009c0000000002018019000000c00120021000000045011001c7000080100200003900fb00f60000040f0000000102200190000000dd0000613d000000000101043b000000000301041a000000000103004b000000dd0000613d000000400200043d00000000010004140000000104000029000000040540008c0000006c0000c13d000000010200003900000000010000310000007e0000013d00000000010004110000000000100435000000200000043f00000040010000410000000002000414000000400320009c0000000002018019000000c00120021000000045011001c7000080100200003900fb00f60000040f0000000102200190000000dd0000613d000000010300008a0000000002000416000000000432013f000000000101043b000000000301041a000000000443004b000000640000a13d000000460100004100000000001004350000001101000039000000040010043f0000004701000041000000fd000104300000000002320019000000000021041b0000004001000041000000400200043d000000400320009c00000000020180190000004001200210000000fc0001042e0000004006000041000000400510009c0000000001068019000000400520009c00000000020680190000004002200210000000c001100210000000000121019f00000048011001c70000800902000039000000000500001900fb00f10000040f0000000104000029000000010220018f00010000000103550000006001100270000000400010019d0000004001100197000000000301004b000000940000c13d000000000102004b000000c90000c13d000000400100043d00000044021000390000004c0300004100000000003204350000002402100039000000140300003900000000003204350000004d0200004100000000002104350000000402100039000000200300003900000000003204350000004002000041000000400310009c000000000102801900000040011002100000004e011001c7000000fd00010430000000490310009c000000c30000813d0000001f03100039000000200500008a000000000353016f0000003f03300039000000000353016f000000400700043d0000000003370019000000000573004b000000000500001900000001050040390000004a0630009c000000c30000213d0000000105500190000000c30000c13d000000400030043f0000001f0310018f000000000917043600000001050003670000000501100272000000b30000613d000000000600001900000005076002100000000008790019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b000000ab0000413d000000000603004b000000800000613d0000000501100210000000000515034f00000000011900190000000303300210000000000601043300000000063601cf000000000636022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000363019f0000000000310435000000800000013d000000460100004100000000001004350000004101000039000000040010043f0000004701000041000000fd000104300000004b014001970000000000100435000000200000043f00000040030000410000000001000414000000400210009c0000000001038019000000c00110021000000045011001c7000080100200003900fb00f60000040f0000000102200190000000dd0000613d000000000101043b000000000001041b000000400100043d000000400210009c00000040010080410000004001100210000000fc0001042e0000000001000019000000fd000104300000004002000041000000400310009c00000000010280190000000003000414000000400430009c0000000003028019000000c0023002100000004001100210000000000121019f00000045011001c7000080100200003900fb00f60000040f0000000102200190000000ef0000613d000000000101043b000000000001042d0000000001000019000000fd00010430000000f4002104210000000102000039000000000001042d0000000002000019000000000001042d000000f9002104230000000102000039000000000001042d0000000002000019000000000001042d000000fb00000432000000fc0001042e000000fd000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000d0e30db0000000000000000000000000000000000000000000000000000000003ccfd60b0000000000000000000000000000000000000000000000000000000027e235e302000000000000000000000000000000000000400000000000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000ffffffffffffffffffffffffffffffffffffffff4661696c656420746f2073656e6420457468657200000000000000000000000008c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000020000000800000000000000000afd67917e5abe2e3394cdd37796ed735781323addb7942cbb1b69aa3ea793d59"
          },
          "methodIdentifiers": {
            "balances(address)": "27e235e3",
            "deposit()": "d0e30db0",
            "withdraw()": "3ccfd60b"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol\"\nobject \"DepositFunds_57\" {\n    code {\n        {\n            /// @src 0:56:469  \"contract DepositFunds {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"DepositFunds_57_deployed\")\n            codecopy(_1, dataoffset(\"DepositFunds_57_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol\"\n    object \"DepositFunds_57_deployed\" {\n        code {\n            {\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x27e235e3 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value := calldataload(4)\n                        let _3 := and(value, sub(shl(160, 1), 1))\n                        if iszero(eq(value, _3)) { revert(_2, _2) }\n                        mstore(_2, _3)\n                        mstore(32, _2)\n                        mstore(_1, sload(keccak256(_2, 64)))\n                        return(_1, 32)\n                    }\n                    case 0x3ccfd60b { external_fun_withdraw() }\n                    case 0xd0e30db0 { external_fun_deposit() }\n                }\n                revert(0, 0)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address(key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, 0)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function external_fun_withdraw()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                mstore(_1, /** @src 0:284:294  \"msg.sender\" */ caller())\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                mstore(0x20, _1)\n                let _2 := sload(keccak256(_1, 0x40))\n                if /** @src 0:313:320  \"bal > 0\" */ iszero(_2)\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                { revert(_1, _1) }\n                /// @src 0:347:378  \"msg.sender.call{value: bal}(\\\"\\\")\"\n                let expr_component := call(gas(), /** @src 0:284:294  \"msg.sender\" */ caller(), /** @src 0:347:378  \"msg.sender.call{value: bal}(\\\"\\\")\" */ _2, /** @src 0:56:469  \"contract DepositFunds {...\" */ mload(0x40), _1, _1, _1)\n                switch returndatasize()\n                case 0 { }\n                default {\n                    let _3 := returndatasize()\n                    let _4 := 0xffffffffffffffff\n                    if gt(_3, _4) { panic_error_0x41() }\n                    let _5 := not(31)\n                    let memPtr := mload(0x40)\n                    let newFreePtr := add(memPtr, and(add(and(add(_3, 31), _5), 63), _5))\n                    if or(gt(newFreePtr, _4), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                    mstore(0x40, newFreePtr)\n                    mstore(memPtr, _3)\n                    returndatacopy(add(memPtr, 0x20), _1, returndatasize())\n                }\n                /// @src 0:388:425  \"require(sent, \\\"Failed to send Ether\\\")\"\n                require_helper_stringliteral(expr_component)\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                sstore(/** @src 0:436:456  \"balances[msg.sender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 0:284:294  \"msg.sender\" */ caller()), /** @src 0:56:469  \"contract DepositFunds {...\" */ _1)\n                return(mload(0x40), _1)\n            }\n            function external_fun_deposit()\n            {\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                mstore(_1, /** @src 0:187:197  \"msg.sender\" */ caller())\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                mstore(0x20, _1)\n                let dataSlot := keccak256(_1, 0x40)\n                let _2 := sload(/** @src 0:178:211  \"balances[msg.sender] += msg.value\" */ dataSlot)\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                if gt(_2, not(/** @src 0:202:211  \"msg.value\" */ callvalue()))\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(_1, 0x24)\n                }\n                sstore(dataSlot, add(_2, /** @src 0:202:211  \"msg.value\" */ callvalue()))\n                /// @src 0:56:469  \"contract DepositFunds {...\"\n                return(mload(0x40), _1)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 20)\n                    mstore(add(memPtr, 68), \"Failed to send Ether\")\n                    revert(memPtr, 100)\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205f1848973f9354e6f55898911319443a6900c7b5b4724310dd191699ec63ad1a64736f6c634300080d0033\"\n    }\n}\n",
        "hash": "0100005178c1c993c4dcd5e200055605f64f507220b316e65dcb606cc33b6590",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/Reentrancy/SingleFunctionReentrancy/SingleFucntion-re.sol",
        "exportedSymbols": {
          "DepositFunds": [
            57
          ]
        },
        "id": 58,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "0.8",
              ".13"
            ],
            "nodeType": "PragmaDirective",
            "src": "31:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "DepositFunds",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 57,
            "linearizedBaseContracts": [
              57
            ],
            "name": "DepositFunds",
            "nameLocation": "65:12:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "27e235e3",
                "id": 5,
                "mutability": "mutable",
                "name": "balances",
                "nameLocation": "119:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 57,
                "src": "84:43:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 4,
                  "keyType": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "92:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "84:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 3,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "103:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 16,
                  "nodeType": "Block",
                  "src": "168:50:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 8,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "178:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 11,
                          "indexExpression": {
                            "expression": {
                              "id": 9,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "187:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 10,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "187:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "178:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 12,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "202:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 13,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "202:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "178:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 15,
                      "nodeType": "ExpressionStatement",
                      "src": "178:33:0"
                    }
                  ]
                },
                "functionSelector": "d0e30db0",
                "id": 17,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "deposit",
                "nameLocation": "143:7:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 6,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "150:2:0"
                },
                "returnParameters": {
                  "id": 7,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "168:0:0"
                },
                "scope": 57,
                "src": "134:84:0",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 55,
                  "nodeType": "Block",
                  "src": "251:216:0",
                  "statements": [
                    {
                      "assignments": [
                        21
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 21,
                          "mutability": "mutable",
                          "name": "bal",
                          "nameLocation": "269:3:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 55,
                          "src": "261:11:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 20,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "261:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 26,
                      "initialValue": {
                        "baseExpression": {
                          "id": 22,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "275:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 25,
                        "indexExpression": {
                          "expression": {
                            "id": 23,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "284:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 24,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "284:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "275:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "261:34:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 30,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 28,
                              "name": "bal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "313:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 29,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "319:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "313:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 27,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "305:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "305:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 32,
                      "nodeType": "ExpressionStatement",
                      "src": "305:16:0"
                    },
                    {
                      "assignments": [
                        34,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 34,
                          "mutability": "mutable",
                          "name": "sent",
                          "nameLocation": "338:4:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 55,
                          "src": "333:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 33,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "333:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 42,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 40,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "375:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 35,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "347:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 36,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "347:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 37,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "347:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 38,
                              "name": "bal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "370:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "347:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 41,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "347:31:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "332:46:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 44,
                            "name": "sent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34,
                            "src": "396:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "4661696c656420746f2073656e64204574686572",
                            "id": 45,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "402:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                              "typeString": "literal_string \"Failed to send Ether\""
                            },
                            "value": "Failed to send Ether"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                              "typeString": "literal_string \"Failed to send Ether\""
                            }
                          ],
                          "id": 43,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "388:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "388:37:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 47,
                      "nodeType": "ExpressionStatement",
                      "src": "388:37:0"
                    },
                    {
                      "expression": {
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 48,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "436:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 51,
                          "indexExpression": {
                            "expression": {
                              "id": 49,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "445:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 50,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "445:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "436:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 52,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "459:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "436:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 54,
                      "nodeType": "ExpressionStatement",
                      "src": "436:24:0"
                    }
                  ]
                },
                "functionSelector": "3ccfd60b",
                "id": 56,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "withdraw",
                "nameLocation": "233:8:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "241:2:0"
                },
                "returnParameters": {
                  "id": 19,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "251:0:0"
                },
                "scope": 57,
                "src": "224:243:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 58,
            "src": "56:413:0",
            "usedErrors": []
          }
        ],
        "src": "31:439:0"
      }
    }
  },
  "errors": [],
  "version": "0.8.13",
  "long_version": "0.8.13+commit.abaa5c0e.Darwin.appleclang",
  "zk_version": "1.4.1"
}