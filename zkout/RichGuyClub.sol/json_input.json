{
  "language": "Solidity",
  "sources": {
    "src/Reentrancy/ReadonlyReentrancy/RichGuyClub.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.13;\n\nimport \"./PrivateBank.sol\";\n\ncontract RichGuyClub {\n    PrivateBank bank;\n    mapping(address => bool) public richguy;\n\n    constructor(address _bankAddress) {\n        bank = PrivateBank(_bankAddress);\n    }\n\n    function joinClub() public {\n        require(getUserBalance() > 1000 ether);\n        richguy[msg.sender] = true;\n    }\n\n    function getUserBalance() public view returns (uint256) {\n        uint256 userBalance = bank.userBalance(msg.sender);\n        return userBalance;\n    }\n}\n"
    },
    "src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.13;\n\ncontract PrivateBank {\n    bool private lock;\n    mapping(address => uint256) public userBalance;\n\n    uint256 totalBalance;\n\n    modifier NonReentrant() {\n        require(!lock);\n        lock = true;\n        _;\n        lock = false;\n    }\n\n    function deposit() public payable NonReentrant {\n        userBalance[msg.sender] += msg.value;\n        totalBalance += msg.value;\n    }\n\n    function withdrawAll() public NonReentrant {\n        uint256 balance = userBalance[msg.sender];\n        require(balance > 0);\n        totalBalance -= balance;\n        (bool done,) = msg.sender.call{value: balance}(\"\");\n        require(done);\n        userBalance[msg.sender] = 0;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "details": null,
      "fallbackToOptimizingForSize": false,
      "disableSystemRequestMemoization": true
    },
    "outputSelection": {
      "*": {
        "": [
          "metadata"
        ],
        "*": [
          "abi",
          "evm.methodIdentifiers"
        ]
      }
    },
    "libraries": {},
    "isSystem": false,
    "forceEvmla": false,
    "areLibrariesMissing": true
  }
}