{
  "contracts": {
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "ReentrancyGuard": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "ERC20": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "string",
                "name": "name_",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "symbol_",
                "type": "string"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"ERC20.sol:ERC20\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_11\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_18\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.le\t@.BB0_23\n\tsub.s!\t@CPI0_11[0], r2, r4\n\tjump.gt\t@.BB0_29\n\tsub.s!\t@CPI0_15[0], r2, r4\n\tjump.eq\t@.BB0_72\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.eq\t@.BB0_79\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t4, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_110\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_113\n\tjump\t@.BB0_112\n.BB0_11:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tadd\t31, r3, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_15\n\tadd\tr0, r0, r5\n.BB0_14:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_14\n.BB0_15:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_17\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_17:\n\tsub.s!\t64, r3, r1\n\tjump.ge\t@.BB0_19\n.BB0_18:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_19:\n\tld.1\t128, r4\n\tsub.s!\t@CPI0_2[0], r4, r1\n\tjump.gt\t@.BB0_18\n\tadd\t31, r4, r1\n\tadd\t@CPI0_3[0], r0, r2\n\tsub!\tr1, r3, r5\n\tadd\tr0, r0, r5\n\tadd.ge\tr2, r0, r5\n\tand\t@CPI0_3[0], r1, r1\n\tsub!\tr1, r0, r6\n\tadd.ge\tr0, r0, r2\n\tsub.s!\t@CPI0_3[0], r1, r1\n\tadd.ne\tr5, r0, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t128, r4, r1\n\tld.1\tr1, r2\n\tsub.s!\t@CPI0_2[0], r2, r1\n\tjump.le\t@.BB0_43\n.BB0_22:\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_23:\n\tsub.s!\t@CPI0_18[0], r2, r4\n\tjump.le\t@.BB0_37\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_83\n\tsub.s!\t@CPI0_20[0], r2, r4\n\tjump.eq\t@.BB0_86\n\tsub.s!\t@CPI0_21[0], r2, r1\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t18, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_31[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_29:\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.eq\t@.BB0_94\n\tsub.s!\t@CPI0_13[0], r2, r4\n\tjump.eq\t@.BB0_102\n\tsub.s!\t@CPI0_14[0], r2, r2\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_24[0], r2, r3\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_24[0], r3, r1\n\tjump.gt\t@.BB0_18\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[8]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @mapping_index_access_mapping_address_uint256_of_address, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tjump\t@.BB0_107\n.BB0_37:\n\tsub.s!\t@CPI0_22[0], r2, r4\n\tjump.eq\t@.BB0_108\n\tsub.s!\t@CPI0_23[0], r2, r2\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_24[0], r2, r3\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tnear_call\tr0, @fun_approve, @DEFAULT_UNWIND\n\tjump\t@.BB0_106\n.BB0_43:\n\tadd\t31, r2, r1\n\tsub.s\t32, r0, r8\n\tand\tr1, r8, r1\n\tadd\t63, r1, r1\n\tand\tr1, r8, r1\n\tld.1\t64, r9\n\tadd\tr9, r1, r5\n\tsub!\tr5, r9, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tsub.s!\t@CPI0_2[0], r5, r6\n\tjump.gt\t@.BB0_22\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_22\n\tadd\t128, r3, r1\n\tst.1\t64, r5\n\tst.1.inc\tr9, r2, r10\n\tadd\t160, r4, r4\n\tadd\tr2, r4, r5\n\tsub!\tr5, r1, r5\n\tjump.gt\t@.BB0_18\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_51\n\tadd\tr0, r0, r5\n.BB0_48:\n\tadd\tr10, r5, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_48\n\tsub!\tr5, r2, r4\n\tjump.le\t@.BB0_51\n\tadd\tr10, r2, r2\n\tst.1\tr2, r0\n.BB0_51:\n\tld.1\t160, r4\n\tsub.s!\t@CPI0_2[0], r4, r2\n\tjump.gt\t@.BB0_18\n\tadd\t31, r4, r2\n\tadd\t@CPI0_3[0], r0, r5\n\tsub!\tr2, r3, r3\n\tadd\tr0, r0, r3\n\tadd.ge\tr5, r0, r3\n\tand\t@CPI0_3[0], r2, r2\n\tsub!\tr2, r0, r6\n\tadd.ge\tr0, r0, r5\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tadd.ne\tr3, r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_18\n\tadd\t128, r4, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_22\n\tadd\t31, r2, r3\n\tand\tr3, r8, r3\n\tadd\t63, r3, r3\n\tand\tr3, r8, r3\n\tld.1\t64, r7\n\tadd\tr7, r3, r3\n\tsub!\tr3, r7, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_2[0], r3, r6\n\tjump.gt\t@.BB0_22\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_22\n\tst.1\t64, r3\n\tst.1.inc\tr7, r2, r6\n\tadd\t160, r4, r3\n\tadd\tr2, r3, r4\n\tsub!\tr4, r1, r1\n\tjump.gt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB0_62\n\tadd\tr0, r0, r1\n.BB0_59:\n\tadd\tr6, r1, r4\n\tadd\tr1, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r1, r1\n\tsub!\tr1, r2, r4\n\tjump.lt\t@.BB0_59\n\tsub!\tr1, r2, r1\n\tjump.le\t@.BB0_62\n\tadd\tr6, r2, r1\n\tst.1\tr1, r0\n.BB0_62:\n\tld.1\tr9, r5\n\tsub.s!\t@CPI0_2[0], r5, r1\n\tjump.gt\t@.BB0_22\n\tadd\t3, r0, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_110\n\tadd\tr10, r0, stack-[4]\n\tadd\tr9, r0, stack-[6]\n\tadd\tr6, r0, stack-[3]\n\tadd\tr7, r0, stack-[8]\n\tadd\tr8, r0, stack-[7]\n\tadd\tr3, r0, stack-[5]\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_69\n\tadd\tr5, r0, stack-[1]\n\tadd\tr4, r0, stack-[2]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tadd\tstack-[1], r0, r5\n\tadd\t31, r5, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r5, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[5], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[2], r0, r4\n\tjump.ge\t@.BB0_69\n.BB0_68:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_68\n.BB0_69:\n\tsub.s!\t31, r5, r1\n\tjump.le\t@.BB0_134\n\tadd\tr4, r0, r7\n\tst.1\t0, r4\n\tadd\tr5, r0, r8\n\tand!\tstack-[7], r5, r3\n\tjump.ne\t@.BB0_140\n\tadd\t32, r0, r2\n\tadd\t@CPI0_5[0], r0, r1\n\tjump\t@.BB0_142\n.BB0_72:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[8]\n\tsub.s!\t@CPI0_24[0], r2, r2\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tsub.s\t1, r0, r2\n\tadd\tstack-[7], r0, r3\n\txor\tr3, r2, r2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r2\n\tjump.le\t@.BB0_124\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_79:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.gt\t@.BB0_18\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_85\n.BB0_83:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t2, r0, r1\n.BB0_85:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_31[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_86:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_24[0], r3, r2\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[8]\n\tsub.s!\t@CPI0_24[0], r2, r2\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t0, r3\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[7]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tand\t@CPI0_24[0], r2, r2\n\tadd\tr2, r0, stack-[4]\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_128\n.BB0_93:\n\tadd\tr3, r0, r1\n\tadd\tstack-[8], r0, r2\n\tadd\tstack-[6], r0, r3\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tstack-[5], r0, r2\n\tjump\t@.BB0_127\n.BB0_94:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[8]\n\tsub.s!\t@CPI0_24[0], r2, r2\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[7]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tsload\tr1, r1\n\tadd\tstack-[7], r0, r3\n\tsub!\tr1, r3, r2\n\tjump.ge\t@.BB0_125\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_27[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_28[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t37, r0, r3\n.BB0_101:\n\tst.1\tr2, r3\n\tadd\t@CPI0_29[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_30[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_102:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_24[0], r2, r3\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n.BB0_106:\n\tadd\t1, r0, r1\n.BB0_107:\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_25[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_108:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t3, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_111\n.BB0_110:\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_111:\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_115\n.BB0_112:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tadd\t64, r0, r2\n\tjump\t@.BB0_123\n.BB0_113:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_117\n\tjump\t@.BB0_116\n.BB0_115:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_120\n.BB0_116:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_123\n.BB0_117:\n\tadd\t@CPI0_6[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_118:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_118\n\tjump\t@.BB0_122\n.BB0_120:\n\tadd\t@CPI0_5[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_121:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_121\n.BB0_122:\n\tadd\t64, r3, r2\n.BB0_123:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[8]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_124:\n\tadd\tr1, r3, r3\n\tjump\t@.BB0_126\n.BB0_125:\n\tsub\tr1, r3, r3\n.BB0_126:\n\tadd\tstack-[5], r0, r1\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @fun_approve, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tstack-[6], r0, r2\n.BB0_127:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_25[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_128:\n\tsub.s!\tstack-[6], r2, r1\n\tjump.ge\t@.BB0_130\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_37[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_29[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_38[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_130:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_132\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_35[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_36[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t36, r0, r3\n\tjump\t@.BB0_101\n.BB0_132:\n\tadd\tr2, r0, stack-[3]\n\tsub!\tstack-[4], r0, r1\n\tjump.ne\t@.BB0_137\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_33[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_34[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t34, r0, r3\n\tjump\t@.BB0_101\n.BB0_134:\n\tadd\tr4, r0, r7\n\tadd\tr5, r0, r2\n\tsub!\tr5, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_136\n\tadd\tstack-[4], r0, r1\n\tld.1\tr1, r1\n.BB0_136:\n\tadd\tr2, r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_145\n.BB0_137:\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[5], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tsub.s\tstack-[6], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_32[0], r0, r4\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[4], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_18\n\tjump\t@.BB0_93\n.BB0_140:\n\tadd\t@CPI0_5[0], r0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[6], r0, r6\n.BB0_141:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_141\n.BB0_142:\n\tsub!\tr3, r8, r3\n\tjump.ge\t@.BB0_144\n\tshl.s\t3, r8, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[6], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_144:\n\tshl.s\t1, r8, r1\n\tor\t1, r1, r1\n.BB0_145:\n\tsstore\tr7, r1\n\tadd\tstack-[8], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tjump.gt\t@.BB0_22\n\tadd\t4, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tsload\tr1, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tadd\tr3, r0, stack-[4]\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_110\n\tadd\tstack-[4], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_152\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_18\n\tadd\tstack-[6], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_152\n.BB0_151:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_151\n.BB0_152:\n\tadd\tstack-[6], r0, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_155\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[6], r0, r2\n\tand!\tstack-[7], r2, r3\n\tjump.ne\t@.BB0_157\n\tadd\t32, r0, r2\n\tadd\t@CPI0_6[0], r0, r1\n\tjump\t@.BB0_159\n.BB0_155:\n\tsub!\tstack-[6], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_163\n\tadd\tstack-[6], r0, r3\n\tshl.s\t3, r3, r1\n\tsub.s\t1, r0, r2\n\tshr\tr2, r1, r1\n\txor\tr1, r2, r1\n\tadd\tstack-[3], r0, r2\n\tld.1\tr2, r2\n\tand\tr2, r1, r2\n\tshl.s\t1, r3, r1\n\tjump\t@.BB0_162\n.BB0_157:\n\tadd\t@CPI0_6[0], r0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[8], r0, r6\n.BB0_158:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_158\n.BB0_159:\n\tsub.s!\tstack-[6], r3, r3\n\tjump.ge\t@.BB0_161\n\tadd\tstack-[6], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[8], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_161:\n\tadd\t1, r0, r1\n\tadd\tstack-[6], r0, r2\n\tshl.s\t1, r2, r2\n.BB0_162:\n\tor\tr2, r1, r1\n.BB0_163:\n\tadd\tstack-[5], r0, r2\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_7[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tsub!\tr2, r0, r4\n\tadd\t64, r1, r1\n\tjump.eq\t@.BB1_5\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n\tsub!\tr4, r2, r3\n\tjump.le\t@.BB1_5\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n.BB1_5:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nfinalize_allocation:\n.func_begin2:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r3\n\tjump.gt\t@.BB2_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_2\n\tst.1\t64, r1\n\tret\n.BB2_2:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nmapping_index_access_mapping_address_uint256_of_address:\n.func_begin3:\n\tand\t@CPI3_0[0], r2, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_1\n\tld\tr1, r1\n\tret\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_transfer:\n.func_begin4:\n\tnop\tstack+=[4]\n\tadd\tr3, r0, stack-[4]\n\tand!\t@CPI4_0[0], r1, r1\n\tjump.eq\t@.BB4_1\n\tand!\t@CPI4_0[0], r2, stack-[2]\n\tjump.eq\t@.BB4_4\n\tadd\tr1, r0, stack-[3]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI4_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\tstack-[4], r2, r1\n\tjump.lt\t@.BB4_8\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI4_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tadd\tstack-[1], r0, r3\n\tsub.s\tstack-[4], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[4], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI4_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI4_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI4_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI4_4[0], r0, r4\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[2], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB4_6\n\tret\n.BB4_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_11[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t37, r0, r3\n\tjump\t@.BB4_2\n.BB4_4:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t35, r0, r3\n\tjump\t@.BB4_2\n.BB4_8:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t38, r0, r3\n.BB4_2:\n\tst.1\tr2, r3\n\tadd\t@CPI4_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_1[0], r0, r2\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_approve:\n.func_begin5:\n\tnop\tstack+=[3]\n\tand!\t@CPI5_0[0], r1, r1\n\tjump.eq\t@.BB5_1\n\tadd\tr3, r0, stack-[2]\n\tand!\t@CPI5_0[0], r2, stack-[3]\n\tjump.eq\t@.BB5_4\n\tadd\tr1, r0, stack-[1]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI5_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[3], r0, r3\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tst.1\t0, r3\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\t@CPI5_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI5_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI5_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI5_4[0], r0, r4\n\tadd\tstack-[1], r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB5_6\n\tret\n.BB5_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI5_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI5_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t36, r0, r3\n\tjump\t@.BB5_2\n.BB5_4:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI5_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI5_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t34, r0, r3\n.BB5_2:\n\tst.1\tr2, r3\n\tadd\t@CPI5_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\n__sha3:\n.func_begin6:\n\tadd\t@CPI6_0[0], r0, r3\n\tsub.s!\t@CPI6_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI6_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_2\n\tld\tr1, r1\n\tret\n.BB6_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__farcall:\n.func_begin7:\n.tmp0:\n\tfar_call\tr1, r2, @.BB7_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB7_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end7:\n\n__staticcall:\n.func_begin8:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB8_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB8_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end8:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI3_1:\nCPI4_1:\nCPI5_1:\nCPI6_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\nCPI2_0:\n\t.cell 18446744073709551615\nCPI0_3:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_4:\nCPI4_3:\nCPI5_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_5:\n\t.cell -27889059366240281169193357100633332908378892778709981755071813198463099602853\nCPI0_6:\n\t.cell -53278079350709166316280423202849322519190186591071851114874353210178472783461\nCPI0_7:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_8:\nCPI2_1:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_9:\nCPI2_2:\n\t.cell 2852213850513516153367582212096\nCPI0_10:\n\t.cell 961581904\nCPI0_11:\n\t.cell 2757214934\nCPI0_12:\n\t.cell 2757214935\nCPI0_13:\n\t.cell 2835717307\nCPI0_14:\n\t.cell 3714247998\nCPI0_15:\n\t.cell 961581905\nCPI0_16:\n\t.cell 1889567281\nCPI0_17:\n\t.cell 2514000705\nCPI0_18:\n\t.cell 404098524\nCPI0_19:\n\t.cell 404098525\nCPI0_20:\n\t.cell 599290589\nCPI0_21:\n\t.cell 826074471\nCPI0_22:\n\t.cell 117300739\nCPI0_23:\n\t.cell 157198259\nCPI0_24:\nCPI3_0:\nCPI4_0:\nCPI5_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_25:\n\t.cell 2535301200456458802993406410752\nCPI0_26:\nCPI3_2:\nCPI4_2:\nCPI5_2:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_27:\n\t.cell 14690266658072097593480850647027335513285713462661904985951319567533531463680\nCPI0_28:\n\t.cell 31354931781638678506476475496475743842680577777870365728514456330491174612855\nCPI0_29:\nCPI4_7:\nCPI5_7:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_30:\nCPI4_8:\nCPI5_8:\n\t.cell 10458117451882892562347801444352\nCPI0_31:\n\t.cell 2535301202817642044428229017600\nCPI0_32:\nCPI5_4:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_33:\nCPI5_5:\n\t.cell 52219164999525148860834357634456956735281286572158918307284071279203377479680\nCPI0_34:\nCPI5_6:\n\t.cell 31354931781638678487916134672869638488806705378895508030211234510262059168357\nCPI0_35:\nCPI5_9:\n\t.cell 51742913093258732729005998692887265601192425265805909375210916622055285719040\nCPI0_36:\nCPI5_10:\n\t.cell 31354931781638678487916134672869638484047149969764982831501014746446650500196\nCPI0_37:\n\t.cell 31354931781638678538084197150757782427756587561754988975511141185730285404160\nCPI0_38:\n\t.cell 7922816251426433759354395033600\nCPI4_4:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI4_5:\n\t.cell 44065838241030143116324720188876985940908656145555552347773292252211112312832\nCPI4_6:\n\t.cell 31354931781638678607228669297131712859100820671745083778533502622993977909346\nCPI4_9:\n\t.cell 45887578820189300338443374388718498632482616163288499555830078344056365121536\nCPI4_10:\n\t.cell 31354931781638678607228669297131712859126084785867252355217498662940140921970\nCPI4_11:\n\t.cell 45433405612597180762055095701412804886438245671210399661410036396145969725440\nCPI4_12:\n\t.cell 31354931781638678607228669297131712859107492772550336241160036866987736981860\nCPI6_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "decreaseAllowance(address,uint256)": "a457c2d7",
            "increaseAllowance(address,uint256)": "39509351",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": "/// @use-src 1:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 2:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 3:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 7:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\nobject \"ERC20_640\" {\n    code {\n        {\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"ERC20_640\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            let offset := mload(memoryDataOffset)\n            let _2 := sub(shl(64, 1), 1)\n            if gt(offset, _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let _3 := 32\n            let offset_1 := mload(add(memoryDataOffset, _3))\n            if gt(offset_1, _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            let _4 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            let newLen := mload(value0)\n            if gt(newLen, _2) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(/** @src 1:2042:2055  \"_name = name_\" */ 0x03)), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ newLen)\n            let srcOffset := 0\n            srcOffset := _3\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage_998()\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, _3) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, _3)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n            copy_byte_array_to_storage_from_string_to_string(_4)\n            let _5 := mload(64)\n            let _6 := datasize(\"ERC20_640_deployed\")\n            codecopy(_5, dataoffset(\"ERC20_640_deployed\"), _6)\n            return(_5, _6)\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let _1 := mload(offset)\n            if gt(_1, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            let _2 := 0x20\n            let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), _2))\n            mstore(array_1, _1)\n            if gt(add(add(offset, _1), _2), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            for { } lt(i, _1) { i := add(i, _2) }\n            {\n                mstore(add(add(array_1, i), _2), mload(add(add(offset, i), _2)))\n            }\n            if gt(i, _1)\n            {\n                mstore(add(add(array_1, _1), _2), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            array := array_1\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function array_dataslot_string_storage_998() -> data\n        {\n            mstore(0, /** @src 1:2042:2055  \"_name = name_\" */ 0x03)\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            data := keccak256(0, 0x20)\n        }\n        function array_dataslot_string_storage() -> data\n        {\n            mstore(0, /** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            data := keccak256(0, 0x20)\n        }\n        function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 1:2042:2055  \"_name = name_\" */ 0x03)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _1, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _2 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _1)\n                }\n            }\n        }\n        /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n        function clean_up_bytearray_end_slots_string_storage_1902(len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _1, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _2 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _1)\n                }\n            }\n        }\n        /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(src)\n        {\n            let newLen := mload(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage_1902(extract_byte_array_length(sload(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ newLen)\n            let srcOffset := 0\n            let srcOffset_1 := 0x20\n            srcOffset := srcOffset_1\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage()\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, srcOffset_1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n    }\n    /// @use-src 1:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 7:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n    object \"ERC20_640_deployed\" {\n        code {\n            {\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 { external_fun_name() }\n                    case 0x095ea7b3 { external_fun_approve() }\n                    case 0x18160ddd { external_fun_totalSupply() }\n                    case 0x23b872dd { external_fun_transferFrom() }\n                    case 0x313ce567 { external_fun_decimals() }\n                    case 0x39509351 {\n                        external_fun_increaseAllowance()\n                    }\n                    case 0x70a08231 { external_fun_balanceOf() }\n                    case 0x95d89b41 { external_fun_symbol() }\n                    case 0xa457c2d7 {\n                        external_fun_decreaseAllowance()\n                    }\n                    case 0xa9059cbb { external_fun_transfer() }\n                    case 0xdd62ed3e { external_fun_allowance() }\n                }\n                revert(0, 0)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(headStart, length), 64), 0)\n                }\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function external_fun_name()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let memPtr := mload(64)\n                let ret := _1\n                let slotValue := sload(/** @src 1:2240:2245  \"_name\" */ 0x03)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let length := _1\n                let _2 := 1\n                length := shr(_2, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _2)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _3 := 32\n                if eq(outOfPlaceEncoding, lt(length, _3))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(_1, 0x24)\n                }\n                let pos := array_storeLengthForEncoding_string(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, _3)\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage_3222()\n                    let i := _1\n                    for { } lt(i, length) { i := add(i, _3) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_3226() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_encode_bool(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n            }\n            /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n            function external_fun_approve()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                /// @src 1:4593:4599  \"amount\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:4593:4599  \"amount\" */ value0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ calldataload(36))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:4617:4621  \"true\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                return(memPos, 32)\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function external_fun_totalSupply()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let _1 := sload(/** @src 1:3329:3341  \"_totalSupply\" */ 0x02)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_transferFrom()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 96)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                let value1 := abi_decode_address_3226()\n                let value2 := calldataload(68)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 64), /** @src 7:719:729  \"msg.sender\" */ caller()))\n                /// @src 1:11347:11590  \"if (currentAllowance != type(uint256).max) {...\"\n                if /** @src 1:11351:11388  \"currentAllowance != type(uint256).max\" */ iszero(eq(_1, /** @src 1:11371:11388  \"type(uint256).max\" */ not(0)))\n                /// @src 1:11347:11590  \"if (currentAllowance != type(uint256).max) {...\"\n                {\n                    /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                    if /** @src 1:11412:11438  \"currentAllowance >= amount\" */ lt(_1, value2)\n                    /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                    {\n                        let memPtr := mload(64)\n                        mstore(memPtr, shl(229, 4594637))\n                        mstore(add(memPtr, 4), 32)\n                        mstore(add(memPtr, 36), 29)\n                        mstore(add(memPtr, 68), \"ERC20: insufficient allowance\")\n                        revert(memPtr, 100)\n                    }\n                    /// @src 1:11539:11564  \"currentAllowance - amount\"\n                    fun_approve(value0, /** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ sub(/** @src 1:11539:11564  \"currentAllowance - amount\" */ _1, value2))\n                }\n                /// @src 1:5441:5447  \"amount\"\n                fun_transfer(value0, value1, value2)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos), memPos))\n            }\n            function external_fun_decimals()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:3173:3175  \"18\" */ 0x12)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                return(memPos, 32)\n            }\n            function external_fun_increaseAllowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                let value1 := calldataload(36)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:719:729  \"msg.sender\" */ caller())\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 64), /** @src 1:6038:6063  \"allowance(owner, spender)\" */ value0))\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                if gt(_1, not(value1))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 36)\n                }\n                /// @src 1:6038:6076  \"allowance(owner, spender) + addedValue\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:6038:6076  \"allowance(owner, spender) + addedValue\" */ value0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ add(_1, value1))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                return(memPos, 32)\n            }\n            function external_fun_balanceOf()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ and(abi_decode_address(), sub(shl(160, 1), 1)))\n                mstore(32, /** @src -1:-1:-1 */ 0)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 0x40))\n                let memPos := mload(0x40)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_symbol()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let memPtr := mload(64)\n                let ret := _1\n                let slotValue := sload(4)\n                let length := _1\n                let _2 := 1\n                length := shr(_2, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _2)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _3 := 32\n                if eq(outOfPlaceEncoding, lt(length, _3))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(_1, 0x24)\n                }\n                let pos := array_storeLengthForEncoding_string(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, _3)\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage()\n                    let i := _1\n                    for { } lt(i, length) { i := add(i, _3) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function external_fun_decreaseAllowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                let value1 := calldataload(36)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:719:729  \"msg.sender\" */ caller())\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 64), /** @src 1:6766:6791  \"allowance(owner, spender)\" */ value0))\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                if /** @src 1:6809:6844  \"currentAllowance >= subtractedValue\" */ lt(_1, value1)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 37)\n                    mstore(add(memPtr, 68), \"ERC20: decreased allowance below\")\n                    mstore(add(memPtr, 100), \" zero\")\n                    revert(memPtr, 132)\n                }\n                /// @src 1:6945:6979  \"currentAllowance - subtractedValue\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:6945:6979  \"currentAllowance - subtractedValue\" */ value0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ sub(/** @src 1:6945:6979  \"currentAllowance - subtractedValue\" */ _1, value1))\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos), memPos))\n            }\n            function external_fun_transfer()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                /// @src 1:3881:3887  \"amount\"\n                fun_transfer(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:3881:3887  \"amount\" */ value0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ calldataload(36))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:3905:3909  \"true\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                return(memPos, 32)\n            }\n            function external_fun_allowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let value0 := abi_decode_address()\n                let value1 := abi_decode_address_3226()\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ and(value0, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 64), value1))\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function array_dataslot_string_storage_3222() -> data\n            {\n                mstore(0, /** @src 1:2240:2245  \"_name\" */ 0x03)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                data := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n            }\n            function array_dataslot_string_storage() -> data\n            {\n                mstore(0, 4)\n                data := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address_3241(key) -> dataSlot\n            {\n                mstore(/** @src 1:7615:7616  \"0\" */ 0x00, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:7615:7616  \"0\" */ 0x00)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                dataSlot := keccak256(/** @src 1:7615:7616  \"0\" */ 0x00, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ 0x40)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address_3244(key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:10784:10795  \"_allowances\" */ 0x01)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                dataSlot := keccak256(0, 0x40)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 35)\n                    mstore(add(memPtr, 68), \"ERC20: transfer to the zero addr\")\n                    mstore(add(memPtr, 100), \"ess\")\n                    revert(memPtr, 132)\n                }\n            }\n            function require_helper_stringliteral_4107(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 38)\n                    mstore(add(memPtr, 68), \"ERC20: transfer amount exceeds b\")\n                    mstore(add(memPtr, 100), \"alance\")\n                    revert(memPtr, 132)\n                }\n            }\n            /// @ast-id 400 @src 1:7473:8291  \"function _transfer(...\"\n            function fun_transfer(var_from, var_to, var_amount)\n            {\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 1:7599:7617  \"from != address(0)\" */ var_from, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _1)\n                if /** @src 1:7599:7617  \"from != address(0)\" */ iszero(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _2)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 37)\n                    mstore(add(memPtr, 68), \"ERC20: transfer from the zero ad\")\n                    mstore(add(memPtr, 100), \"dress\")\n                    revert(memPtr, 132)\n                }\n                let _3 := and(/** @src 1:7677:7693  \"to != address(0)\" */ var_to, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _1)\n                /// @src 1:7669:7733  \"require(to != address(0), \\\"ERC20: transfer to the zero address\\\")\"\n                require_helper_stringliteral(/** @src 1:7677:7693  \"to != address(0)\" */ iszero(iszero(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _3)))\n                let _4 := sload(/** @src 1:7815:7830  \"_balances[from]\" */ mapping_index_access_mapping_address_uint256_of_address_3241(var_from))\n                /// @src 1:7840:7912  \"require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\")\"\n                require_helper_stringliteral_4107(/** @src 1:7848:7869  \"fromBalance >= amount\" */ iszero(lt(_4, var_amount)))\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                sstore(/** @src 1:7946:7961  \"_balances[from]\" */ mapping_index_access_mapping_address_uint256_of_address_3241(var_from), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ sub(/** @src 1:7964:7984  \"fromBalance - amount\" */ _4, var_amount))\n                /// @src 1:8161:8174  \"_balances[to]\"\n                let _5 := mapping_index_access_mapping_address_uint256_of_address_3241(var_to)\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                sstore(_5, add(sload(/** @src 1:8161:8184  \"_balances[to] += amount\" */ _5), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ var_amount))\n                /// @src 1:8210:8236  \"Transfer(from, to, amount)\"\n                let _6 := /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ mload(64)\n                /// @src 1:8210:8236  \"Transfer(from, to, amount)\"\n                log3(_6, sub(abi_encode_uint256(_6, var_amount), _6), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _3)\n            }\n            /// @ast-id 574 @src 1:10504:10874  \"function _approve(...\"\n            function fun_approve(var_owner, var_spender, var_amount)\n            {\n                /// @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 1:10635:10654  \"owner != address(0)\" */ var_owner, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _1)\n                if /** @src 1:10635:10654  \"owner != address(0)\" */ iszero(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _2)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 36)\n                    mstore(add(memPtr, 68), \"ERC20: approve from the zero add\")\n                    mstore(add(memPtr, 100), \"ress\")\n                    revert(memPtr, 132)\n                }\n                let _3 := and(/** @src 1:10713:10734  \"spender != address(0)\" */ var_spender, /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _1)\n                if /** @src 1:10713:10734  \"spender != address(0)\" */ iszero(/** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ _3)\n                {\n                    let memPtr_1 := mload(64)\n                    mstore(memPtr_1, shl(229, 4594637))\n                    mstore(add(memPtr_1, 4), 32)\n                    mstore(add(memPtr_1, 36), 34)\n                    mstore(add(memPtr_1, 68), \"ERC20: approve to the zero addre\")\n                    mstore(add(memPtr_1, 100), \"ss\")\n                    revert(memPtr_1, 132)\n                }\n                sstore(/** @src 1:10784:10811  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:10784:10802  \"_allowances[owner]\" */ mapping_index_access_mapping_address_uint256_of_address_3244(var_owner), /** @src 1:10784:10811  \"_allowances[owner][spender]\" */ var_spender), /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ var_amount)\n                /// @src 1:10835:10867  \"Approval(owner, spender, amount)\"\n                let _4 := /** @src 1:1401:13011  \"contract ERC20 is Context, IERC20, IERC20Metadata {...\" */ mload(64)\n                /// @src 1:10835:10867  \"Approval(owner, spender, amount)\"\n                log3(_4, sub(abi_encode_uint256(_4, var_amount), _4), 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, _2, _3)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201e7b544e12c20dbb59fbcbbd08fab506e20444b2ee5de679d40c94edd208d86164736f6c634300080d0033\"\n    }\n}\n",
        "hash": "0100015b5a42d33d0c1d03e4bf05d2cbf0dcf7a49a98ffbefd173a3be9907ac3",
        "factoryDependencies": {}
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "IERC20": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "IERC20Metadata": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "IERC20Permit": {
        "abi": [
          {
            "inputs": [],
            "name": "DOMAIN_SEPARATOR",
            "outputs": [
              {
                "internalType": "bytes32",
                "name": "",
                "type": "bytes32"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "nonces",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "v",
                "type": "uint8"
              },
              {
                "internalType": "bytes32",
                "name": "r",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "s",
                "type": "bytes32"
              }
            ],
            "name": "permit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "DOMAIN_SEPARATOR()": "3644e515",
            "nonces(address)": "7ecebe00",
            "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "SafeERC20": {
        "abi": [],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"SafeERC20.sol:SafeERC20\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n",
          "bytecode": {
            "object": "00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e00000010000104300000000000000000000000000000000000000000000000000000000200000000000000000000000000000040000001000000000000000000a50cba405bd6a8fe0c93d8f0726849c69e6a1e4db0a41b3f8096fa56b970a6aa"
          },
          "methodIdentifiers": {}
        },
        "irOptimized": "/// @use-src 5:\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\"\nobject \"SafeERC20_1060\" {\n    code {\n        {\n            /// @src 5:707:4455  \"library SafeERC20 {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SafeERC20_1060_deployed\")\n            codecopy(_1, dataoffset(\"SafeERC20_1060_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 5:\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\"\n    object \"SafeERC20_1060_deployed\" {\n        code {\n            {\n                /// @src 5:707:4455  \"library SafeERC20 {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220fea6f58b59ac83fc4de7db8fd96c326d1ae0a02b9fc77141d0c68dc374608a5864736f6c634300080d0033\"\n    }\n}\n",
        "hash": "01000007d67fab7fbd1d1d641b8c3872a3e2ef42b238ea40437028a83304c009",
        "factoryDependencies": {}
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "Address": {
        "abi": [],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"Address.sol:Address\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\n",
          "bytecode": {
            "object": "00000001012001900000000c0000613d0000008001000039000000400010043f0000000001000416000000000101004b0000000c0000c13d00000020010000390000010000100443000001200000044300000005010000410000000f0001042e000000000100001900000010000104300000000e000004320000000f0001042e000000100001043000000000000000000000000000000000000000000000000000000002000000000000000000000000000000400000010000000000000000008af760ab95e9134819c9800045d53677e15a36326a56496854e80c3d1cbb5207"
          },
          "methodIdentifiers": {}
        },
        "irOptimized": "/// @use-src 6:\"lib/openzeppelin-contracts/contracts/utils/Address.sol\"\nobject \"Address_1390\" {\n    code {\n        {\n            /// @src 6:194:9158  \"library Address {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Address_1390_deployed\")\n            codecopy(_1, dataoffset(\"Address_1390_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 6:\"lib/openzeppelin-contracts/contracts/utils/Address.sol\"\n    object \"Address_1390_deployed\" {\n        code {\n            {\n                /// @src 6:194:9158  \"library Address {...\"\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212204f4f27dfb0643f617b3077aa5fc55a5653821b8d08d52dc2a914c30ee8ec8ce564736f6c634300080d0033\"\n    }\n}\n",
        "hash": "0100000704ac58d10397ab3df87241b52c0ca760c1c3131570a9bf3e69cdd2e6",
        "factoryDependencies": {}
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "Context": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "src/Reentrancy/CrossContractReentrancy/Vault.sol": {
      "IRouter": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "amountIn",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "amountOutMin",
                "type": "uint256"
              },
              {
                "internalType": "address[]",
                "name": "path",
                "type": "address[]"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "deadline",
                "type": "uint256"
              }
            ],
            "name": "swapExactTokensForTokens",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Reentrancy/CrossContractReentrancy/Vault.sol\":\"IRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/Reentrancy/CrossContractReentrancy/Vault.sol\":{\"keccak256\":\"0xb4054ecf90f0215bdd113d14eaf2a041255841c50116754e051a9622e78ddea7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399759e6d2934e437207e0f10ace805449b45f4ed33de4155fcccbd3cd4a55af\",\"dweb:/ipfs/QmVdy5T9VPP2qhhcFiBifa3PqLmxf616eBMPFFzZiH9e6t\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739"
          }
        },
        "irOptimized": ""
      },
      "Vault": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "contract ERC20",
                "name": "_baseToken",
                "type": "address"
              },
              {
                "internalType": "contract IRouter",
                "name": "_router",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "amountToShare",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "baseToken",
            "outputs": [
              {
                "internalType": "contract ERC20",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "subtractedValue",
                "type": "uint256"
              }
            ],
            "name": "decreaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "harvest",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "addedValue",
                "type": "uint256"
              }
            ],
            "name": "increaseAllowance",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "router",
            "outputs": [
              {
                "internalType": "contract IRouter",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_share",
                "type": "uint256"
              }
            ],
            "name": "shareToAmount",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amount",
                "type": "uint256"
              },
              {
                "internalType": "contract ERC20",
                "name": "_srcToken",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amountOutMin",
                "type": "uint256"
              }
            ],
            "name": "swapAndDeposit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_share",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_share",
                "type": "uint256"
              },
              {
                "internalType": "contract ERC20",
                "name": "_destToken",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amountOutMin",
                "type": "uint256"
              }
            ],
            "name": "withdrawAndSwap",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "work",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"shareToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"withdrawAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Reentrancy/CrossContractReentrancy/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/Reentrancy/CrossContractReentrancy/Vault.sol\":{\"keccak256\":\"0xb4054ecf90f0215bdd113d14eaf2a041255841c50116754e051a9622e78ddea7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399759e6d2934e437207e0f10ace805449b45f4ed33de4155fcccbd3cd4a55af\",\"dweb:/ipfs/QmVdy5T9VPP2qhhcFiBifa3PqLmxf616eBMPFFzZiH9e6t\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"Vault.sol:Vault\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@calldatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r9\n\tst.1\t64, r9\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_13\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_195\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.le\t@.BB0_26\n\tsub.s!\t@CPI0_13[0], r2, r4\n\tjump.le\t@.BB0_39\n\tsub.s!\t@CPI0_14[0], r2, r4\n\tjump.gt\t@.BB0_51\n\tsub.s!\t@CPI0_18[0], r2, r4\n\tjump.eq\t@.BB0_75\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_102\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r3\n\tadd\t5, r0, r2\n\tsload\tr2, r1\n\tsub.s!\t2, r1, r1\n\tjump.eq\t@.BB0_128\n\tadd\tr3, r0, stack-[14]\n\tadd\t2, r0, r1\n\tadd\tr2, r0, stack-[11]\n\tadd\tr1, r0, stack-[10]\n\tsstore\tr2, r1\n\tadd\t6, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r2\n\tadd\t@CPI0_42[0], r0, r1\n\tst.1\t128, r1\n\tcontext.this\tr1\n\tadd\tr1, r0, stack-[13]\n\tand\t@CPI0_2[0], r1, r1\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_143\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_149\n.BB0_13:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tadd\t31, r3, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_17\n\tadd\tr0, r0, r5\n.BB0_16:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_16\n.BB0_17:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_19\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_19:\n\tsub.s!\t64, r3, r1\n\tjump.lt\t@.BB0_195\n\tld.1\t128, r7\n\tsub.s!\t@CPI0_2[0], r7, r1\n\tjump.gt\t@.BB0_195\n\tld.1\t160, r4\n\tsub.s!\t@CPI0_2[0], r4, r1\n\tjump.gt\t@.BB0_195\n\tld.1\t64, r11\n\tsub.s!\t@CPI0_3[0], r11, r1\n\tjump.gt\t@.BB0_25\n\tadd\t64, r11, r1\n\tst.1\t64, r1\n\tadd\t10, r0, r1\n\tst.1.inc\tr11, r1, r5\n\tadd\t@CPI0_4[0], r0, r1\n\tst.1\tr5, r1\n\tld.1\t64, r8\n\tsub.s!\t@CPI0_3[0], r8, r1\n\tjump.gt\t@.BB0_25\n\tadd\t64, r8, r1\n\tst.1\t64, r1\n\tadd\t2, r0, r1\n\tst.1.inc\tr8, r1, r9\n\tadd\t@CPI0_5[0], r0, r1\n\tst.1\tr9, r1\n\tld.1\tr11, r12\n\tsub.s!\t@CPI0_6[0], r12, r1\n\tjump.le\t@.BB0_133\n.BB0_25:\n\tadd\t@CPI0_65[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_26:\n\tsub.s!\t@CPI0_27[0], r2, r4\n\tjump.gt\t@.BB0_47\n\tsub.s!\t@CPI0_34[0], r2, r4\n\tjump.le\t@.BB0_60\n\tsub.s!\t@CPI0_35[0], r2, r4\n\tjump.eq\t@.BB0_84\n\tsub.s!\t@CPI0_36[0], r2, r4\n\tjump.eq\t@.BB0_107\n\tsub.s!\t@CPI0_37[0], r2, r2\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[13]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tadd\tstack-[14], r0, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tand\t@CPI0_2[0], r2, r2\n\tadd\tr2, r0, stack-[10]\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r1\n\tadd\tr2, r0, stack-[9]\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_241\n.BB0_38:\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[13], r0, r2\n\tadd\tstack-[12], r0, r3\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tstack-[11], r0, r2\n\tjump\t@.BB0_222\n.BB0_39:\n\tsub.s!\t@CPI0_21[0], r2, r4\n\tjump.le\t@.BB0_56\n\tsub.s!\t@CPI0_22[0], r2, r4\n\tjump.eq\t@.BB0_71\n\tsub.s!\t@CPI0_23[0], r2, r4\n\tjump.eq\t@.BB0_88\n\tsub.s!\t@CPI0_24[0], r2, r1\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t4, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_134\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_152\n\tjump\t@.BB0_65\n.BB0_47:\n\tsub.s!\t@CPI0_28[0], r2, r4\n\tjump.le\t@.BB0_66\n\tsub.s!\t@CPI0_29[0], r2, r4\n\tjump.eq\t@.BB0_94\n\tsub.s!\t@CPI0_30[0], r2, r1\n\tjump.eq\t@.BB0_110\n\tsub.s!\t@CPI0_31[0], r2, r1\n\tjump.eq\t@.BB0_58\n\tjump\t@.BB0_195\n.BB0_51:\n\tsub.s!\t@CPI0_15[0], r2, r4\n\tjump.eq\t@.BB0_99\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.eq\t@.BB0_112\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t7, r0, r1\n\tjump\t@.BB0_101\n.BB0_56:\n\tsub.s!\t@CPI0_25[0], r2, r4\n\tjump.eq\t@.BB0_117\n\tsub.s!\t@CPI0_26[0], r2, r1\n\tjump.ne\t@.BB0_195\n.BB0_58:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tnear_call\tr0, @fun_nonReentrantBefore, @DEFAULT_UNWIND\n\tjump\t@.BB0_97\n.BB0_60:\n\tsub.s!\t@CPI0_38[0], r2, r4\n\tjump.eq\t@.BB0_124\n\tsub.s!\t@CPI0_39[0], r2, r1\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t3, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_134\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_154\n.BB0_65:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tadd\t64, r0, r2\n\tjump\t@.BB0_187\n.BB0_66:\n\tsub.s!\t@CPI0_32[0], r2, r4\n\tjump.eq\t@.BB0_129\n\tsub.s!\t@CPI0_33[0], r2, r2\n\tjump.ne\t@.BB0_195\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tnear_call\tr0, @fun_shareToAmount, @DEFAULT_UNWIND\n\tjump\t@.BB0_132\n.BB0_71:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.gt\t@.BB0_195\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_109\n.BB0_75:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[11]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tsload\tr1, r1\n\tadd\tstack-[13], r0, r3\n\tsub!\tr1, r3, r2\n\tjump.ge\t@.BB0_220\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_46[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_47[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t37, r0, r3\n.BB0_82:\n\tst.1\tr2, r3\n\tadd\t@CPI0_48[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n.BB0_83:\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_49[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_84:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tnear_call\tr0, @fun_approve, @DEFAULT_UNWIND\n\tjump\t@.BB0_106\n.BB0_88:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r6\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r5\n\tadd\t5, r0, r4\n\tsload\tr4, r1\n\tsub.s!\t2, r1, r1\n\tjump.eq\t@.BB0_128\n\tadd\t2, r0, r7\n\tsstore\tr4, r7\n\tadd\t6, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tsload\tr1, r2\n\tadd\t@CPI0_42[0], r0, r1\n\tst.1\t128, r1\n\tcontext.this\tr1\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr4, r0, stack-[9]\n\tadd\tr5, r0, stack-[13]\n\tadd\tr6, r0, stack-[10]\n\tadd\tr7, r0, stack-[12]\n\tjump.ne\t@.BB0_161\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_167\n.BB0_94:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @fun_nonReentrantBefore, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r1\n\tnear_call\tr0, @fun_shareToAmount, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[13]\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[12]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @fun_burn, @DEFAULT_UNWIND\n\tadd\t6, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_57[0], r0, r3\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t32, r1, r2\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\tstack-[13], r0, r3\n\tst.1\tr2, r3\n\tadd\tstack-[12], r0, r2\n\tand\t@CPI0_2[0], r2, r3\n\tadd\t36, r1, r2\n\tst.1\tr2, r3\n\tadd\t68, r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r0, r2\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tstack-[11], r0, r2\n\tnear_call\tr0, @fun_callOptionalReturn, @DEFAULT_UNWIND\n.BB0_97:\n\tadd\t1, r0, r1\n\tadd\t5, r0, r2\n.BB0_98:\n\tsstore\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_99:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t6, r0, r1\n.BB0_101:\n\tsload\tr1, r1\n\tand\t@CPI0_2[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_102:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n.BB0_106:\n\tadd\t1, r0, r1\n\tjump\t@.BB0_132\n.BB0_107:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t2, r0, r1\n.BB0_109:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_110:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_195\n\tadd\t18, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_112:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tjump.gt\t@.BB0_195\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @mapping_index_access_mapping_address_uint256_of_address, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tjump\t@.BB0_132\n.BB0_117:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tcontext.caller\tr2\n\tadd\tr2, r0, stack-[11]\n\tst.1\t0, r2\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[12]\n\tst.1\t32, r2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tsub.s\t1, r0, r2\n\tadd\tstack-[13], r0, r3\n\txor\tr3, r2, r2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r2\n\tjump.gt\t@.BB0_198\n\tadd\tr1, r3, r3\n\tjump\t@.BB0_221\n.BB0_124:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r4\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_195\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r8\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r7\n\tadd\t5, r0, r6\n\tsload\tr6, r2\n\tsub.s!\t2, r2, r2\n\tjump.ne\t@.BB0_156\n.BB0_128:\n\tadd\t@CPI0_48[0], r0, r1\n\tst.1\t128, r1\n\tadd\t32, r0, r1\n\tst.1\t132, r1\n\tadd\t31, r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_73[0], r0, r1\n\tst.1\t196, r1\n\tadd\t@CPI0_74[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_129:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_195\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_195\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tnear_call\tr0, @fun_amountToShare, @DEFAULT_UNWIND\n.BB0_132:\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_41[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_133:\n\tadd\t3, r0, r10\n\tsload\tr10, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_135\n.BB0_134:\n\tadd\t@CPI0_65[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_135:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_140\n\tadd\tr3, r0, stack-[6]\n\tadd\tr5, r0, stack-[7]\n\tadd\tr12, r0, stack-[8]\n\tadd\tr11, r0, stack-[9]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr10, r0, stack-[10]\n\tst.1\t0, r10\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_7[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[14], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tadd\tstack-[8], r0, r12\n\tadd\t31, r12, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r12, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[6], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[12], r0, r8\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[10], r0, r10\n\tadd\tstack-[9], r0, r11\n\tadd\tstack-[7], r0, r5\n\tjump.ge\t@.BB0_140\n.BB0_139:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_139\n.BB0_140:\n\tsub.s!\t31, r12, r1\n\tjump.le\t@.BB0_158\n\tadd\tr4, r0, r6\n\tst.1\t0, r10\n\tsub.s\t32, r0, r1\n\tand!\tr12, r1, r3\n\tjump.ne\t@.BB0_205\n\tadd\t32, r0, r2\n\tadd\t@CPI0_8[0], r0, r1\n\tjump\t@.BB0_207\n.BB0_143:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_43[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_146\n\tadd\tr0, r0, r7\n.BB0_145:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_145\n.BB0_146:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_148\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_148:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n.BB0_149:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t64, r2\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_195\n\tld.1\t128, r2\n\tsub!\tr2, r0, r2\n\tadd\tstack-[14], r0, r4\n\tadd\tr4, r0, r2\n\tjump.ne\t@.BB0_196\n.BB0_151:\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[10]\n\tnear_call\tr0, @fun_mint, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tstack-[10], r0, r2\n\tadd\tstack-[13], r0, r3\n\tadd\tstack-[14], r0, r4\n\tnear_call\tr0, @fun_safeTransferFrom, @DEFAULT_UNWIND\n\tadd\t1, r0, r1\n\tadd\tstack-[11], r0, r2\n\tjump\t@.BB0_98\n.BB0_152:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_181\n\tjump\t@.BB0_155\n.BB0_154:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_184\n.BB0_155:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_187\n.BB0_156:\n\tadd\t2, r0, r2\n\tadd\tr2, r0, stack-[10]\n\tsstore\tr6, r2\n\tadd\t6, r0, r2\n\tadd\tr2, r0, stack-[9]\n\tsload\tr2, r2\n\tadd\t@CPI0_42[0], r0, r4\n\tst.1\t128, r4\n\tcontext.this\tr4\n\tand\t@CPI0_2[0], r4, r4\n\tadd\tr4, r0, stack-[12]\n\tst.1\t132, r4\n\tcontext.gas_left\tr4\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r5\n\tadd\tr6, r0, stack-[7]\n\tadd\tr7, r0, stack-[13]\n\tadd\tr8, r0, stack-[8]\n\tjump.ne\t@.BB0_188\n\tptr.add\tr1, r3, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_194\n.BB0_158:\n\tsub!\tr12, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_160\n\tld.1\tr5, r1\n.BB0_160:\n\tshl.s\t3, r12, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r12, r2\n\tor\tr1, r2, r1\n\tjump\t@.BB0_210\n.BB0_161:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_43[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_164\n\tadd\tr0, r0, r7\n.BB0_163:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_163\n.BB0_164:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_166\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_166:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_223\n.BB0_167:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t64, r2\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_195\n\tld.1\t128, r2\n\tadd\tstack-[13], r0, r8\n\tsub!\tr8, r0, r4\n\tjump.eq\t@.BB0_170\n\tsub.s\t1, r0, r4\n\tdiv\tr4, r8, r4, r5\n\tsub!\tr4, r2, r4\n\tjump.lt\t@.BB0_198\n.BB0_170:\n\tadd\tstack-[12], r0, r6\n\tsload\tr6, r4\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_204\n\tadd\t224, r1, r5\n\tst.1\t64, r5\n\tadd\tstack-[8], r0, r9\n\tst.1\tr9, r6\n\tmul\tr2, r8, r2, r5\n\tdiv\tr2, r4, r10, r2\n\tadd\t160, r1, r4\n\tadd\tstack[@calldatasize], r0, r2\n\tptr.add\tstack[@ptr_calldata], r2, r2\n\tadd\tr0, r0, r5\n\tadd\tr4, r0, r6\n.BB0_172:\n\tshl.s\t5, r5, r7\n\tptr.add\tr2, r7, r7\n\tld\tr7, r7\n\tst.1.inc\tr6, r7, r6\n\tadd\t1, r5, r5\n\tsub.s!\t2, r5, r7\n\tjump.lt\t@.BB0_172\n\tadd\tstack-[11], r0, r2\n\tsload\tr2, r2\n\tand\t@CPI0_2[0], r2, r2\n\tld.1\tr9, r5\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_175\n\tst.1\tr4, r2\n\tld.1\tr9, r4\n\tsub.s!\t2, r4, r4\n\tjump.ge\t@.BB0_279\n.BB0_175:\n\tadd\t@CPI0_65[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_176:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_179\n\tadd\tr0, r0, r6\n.BB0_178:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_178\n.BB0_179:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_181:\n\tadd\t@CPI0_9[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_182:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_182\n\tjump\t@.BB0_186\n.BB0_184:\n\tadd\t@CPI0_8[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_185:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_185\n.BB0_186:\n\tadd\t64, r3, r2\n.BB0_187:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_188:\n\tadd\tr9, r0, stack-[11]\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr1, r0, r4\n\tshl.s\t192, r4, r1\n\tor\t@CPI0_43[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_191\n\tadd\tr0, r0, r7\n.BB0_190:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_190\n.BB0_191:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_193\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_193:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tadd\tstack-[11], r0, r9\n\tjump.eq\t@.BB0_228\n.BB0_194:\n\tadd\t31, r4, r2\n\tand\t96, r2, r5\n\tor\t128, r5, r2\n\tst.1\t64, r2\n\tsub.s!\t32, r3, r4\n\tjump.ge\t@.BB0_199\n.BB0_195:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_196:\n\tadd\tstack-[10], r0, r2\n\tsload\tr2, r5\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB0_201\n\tsub.s\t1, r0, r2\n\tdiv\tr2, r4, r2, r3\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_201\n.BB0_198:\n\tadd\t@CPI0_65[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_199:\n\tadd\t228, r5, r4\n\tld.1\t128, r6\n\tadd\tr6, r0, stack-[5]\n\tadd\tstack-[13], r0, r6\n\tst.1\tr4, r6\n\tadd\t196, r5, r4\n\tadd\tstack-[12], r0, r6\n\tst.1\tr4, r6\n\tadd\t160, r5, r4\n\tadd\t@CPI0_66[0], r0, r6\n\tst.1\tr4, r6\n\tcontext.caller\tr6\n\tadd\tr6, r0, stack-[4]\n\tand\t@CPI0_2[0], r6, r6\n\tadd\t164, r5, r7\n\tst.1\tr7, r6\n\tadd\t100, r0, r6\n\tst.1\tr2, r6\n\tadd\t352, r5, r6\n\tst.1\t64, r6\n\tadd\t320, r5, r6\n\tadd\t@CPI0_67[0], r0, r7\n\tst.1\tr6, r7\n\tadd\t288, r5, r10\n\tadd\t32, r0, r5\n\tadd\tr5, r0, stack-[6]\n\tst.1\tr10, r5\n\tld.1\tr2, r5\n\tcontext.gas_left\tr7\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r6\n\tjump.ne\t@.BB0_232\n\tadd\t1, r0, r8\n\tjump\t@.BB0_247\n.BB0_201:\n\tadd\tr5, r0, stack-[10]\n\tadd\tstack-[12], r0, r2\n\tsload\tr2, r2\n\tadd\t@CPI0_42[0], r0, r3\n\tadd\tstack-[9], r0, r5\n\tst.1\tr5, r3\n\tor\t132, r1, r3\n\tadd\tstack-[13], r0, r4\n\tst.1\tr3, r4\n\tcontext.gas_left\tr3\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_234\n\tadd\tr5, r1, r1\n\tst.1\t64, r1\n.BB0_203:\n\tadd\tstack-[9], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_261\n.BB0_204:\n\tadd\t@CPI0_65[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_205:\n\tadd\t@CPI0_8[0], r0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_206:\n\tadd\tr2, r11, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_206\n.BB0_207:\n\tsub!\tr3, r12, r3\n\tjump.ge\t@.BB0_209\n\tshl.s\t3, r12, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r11, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_209:\n\tshl.s\t1, r12, r1\n\tor\t1, r1, r1\n\tadd\tr6, r0, r4\n.BB0_210:\n\tsstore\tr10, r1\n\tld.1\tr8, r11\n\tsub.s!\t@CPI0_6[0], r11, r1\n\tjump.gt\t@.BB0_25\n\tadd\t4, r0, r10\n\tsload\tr10, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_134\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_217\n\tadd\tr3, r0, stack-[8]\n\tadd\tr11, r0, stack-[9]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr10, r0, stack-[10]\n\tst.1\t0, r10\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_7[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[14], r0, r4\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tadd\tstack-[9], r0, r11\n\tadd\t31, r11, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r11, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[8], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[12], r0, r8\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[10], r0, r10\n\tjump.ge\t@.BB0_217\n.BB0_216:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_216\n.BB0_217:\n\tsub.s!\t32, r11, r1\n\tjump.lt\t@.BB0_244\n\tadd\tr4, r0, r6\n\tst.1\t0, r10\n\tsub.s\t32, r0, r1\n\tand!\tr11, r1, r3\n\tjump.ne\t@.BB0_272\n\tadd\t32, r0, r2\n\tadd\t@CPI0_9[0], r0, r1\n\tjump\t@.BB0_274\n.BB0_220:\n\tsub\tr1, r3, r3\n.BB0_221:\n\tadd\tstack-[11], r0, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @fun_approve, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tstack-[12], r0, r2\n.BB0_222:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_41[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_223:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_226\n\tadd\tr0, r0, r6\n.BB0_225:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_225\n.BB0_226:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_228:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_231\n\tadd\tr0, r0, r6\n.BB0_230:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_230\n.BB0_231:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_267\n\tjump\t@.BB0_268\n.BB0_232:\n\tadd\tr10, r0, stack-[3]\n\tadd\tr9, r0, stack-[11]\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr1, r0, r5\n\tshl.s\t96, r5, r3\n\tshl.s\t64, r4, r4\n\tor\tr3, r4, r3\n\tsub.s!\t@CPI0_0[0], r7, r4\n\tadd.ge\tr1, r0, r7\n\tshl.s\t192, r7, r1\n\tor\tr3, r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand\t1, r2, r8\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand!\t@CPI0_0[0], r3, r3\n\tjump.ne\t@.BB0_246\n\tadd\t96, r0, r11\n\tadd\tstack-[14], r0, r2\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[3], r0, r10\n\tjump\t@.BB0_254\n.BB0_234:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tshl.s\t64, r5, r3\n\tor\tr1, r3, r1\n\tor\t@CPI0_44[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_237\n\tadd\tr0, r0, r7\n.BB0_236:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_236\n.BB0_237:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_239\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_239:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_262\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tr1, r10, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_195\n\tjump\t@.BB0_203\n.BB0_241:\n\tadd\tstack-[9], r0, r2\n\tsub.s!\tstack-[12], r2, r1\n\tjump.ge\t@.BB0_269\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_63[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_48[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n.BB0_243:\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_64[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_244:\n\tsub!\tr11, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_278\n\tshl.s\t3, r11, r1\n\tsub.s\t1, r0, r2\n\tshr\tr2, r1, r1\n\txor\tr1, r2, r1\n\tld.1\tr9, r2\n\tand\tr2, r1, r2\n\tshl.s\t1, r11, r1\n\tjump\t@.BB0_277\n.BB0_246:\n\tadd\tstack-[14], r0, r2\n\tadd\tstack-[3], r0, r10\n.BB0_247:\n\tadd\t31, r3, r4\n\tsub.s\t32, r0, r5\n\tand\tr4, r5, r4\n\tadd\t63, r4, r4\n\tand\tr4, r5, r5\n\tld.1\t64, r11\n\tadd\tr5, r11, r4\n\tsub!\tr4, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_6[0], r4, r6\n\tjump.gt\t@.BB0_25\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_25\n\tst.1\t64, r4\n\tand\t31, r3, r4\n\tst.1.inc\tr11, r3, r9\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_252\n\tadd\tr0, r0, r5\n.BB0_251:\n\tshl.s\t5, r5, r6\n\tadd\tr9, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_251\n.BB0_252:\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_254\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr9, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_254:\n\tld.1\tr11, r1\n\tsub!\tr8, r0, r3\n\tjump.ne\t@.BB0_257\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_271\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[14]\n\tadd\t@CPI0_48[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tr10, r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_257:\n\tadd\tr11, r0, stack-[3]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_308\n\tadd\tr9, r0, stack-[11]\n\tadd\t@CPI0_52[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_53[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_345\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_307\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_72[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_48[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[6], r0, r3\n\tjump\t@.BB0_243\n.BB0_261:\n\tadd\tstack-[10], r0, r2\n\tmul\tstack-[14], r2, r2, r3\n\tdiv\tr2, r1, r2, r1\n\tjump\t@.BB0_151\n.BB0_262:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_265\n\tadd\tr0, r0, r6\n.BB0_264:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_264\n.BB0_265:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n.BB0_267:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_268:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_269:\n\tsub!\tstack-[14], r0, r1\n\tjump.ne\t@.BB0_281\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_61[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_62[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t36, r0, r3\n\tjump\t@.BB0_82\n.BB0_271:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r9, r3\n\tadd.ge\tr2, r0, r9\n\tshl.s\t64, r9, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_272:\n\tadd\t@CPI0_9[0], r0, r1\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_273:\n\tadd\tr2, r8, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_273\n.BB0_274:\n\tsub!\tr3, r11, r3\n\tjump.ge\t@.BB0_276\n\tshl.s\t3, r11, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r8, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_276:\n\tadd\t1, r0, r1\n\tshl.s\t1, r11, r2\n\tadd\tr6, r0, r4\n.BB0_277:\n\tor\tr2, r1, r1\n.BB0_278:\n\tsstore\tr10, r1\n\tadd\t1, r0, r1\n\tadd\t5, r0, r2\n\tsstore\tr2, r1\n\tand\t@CPI0_2[0], r7, r1\n\tadd\t6, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_10[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tand\t@CPI0_2[0], r4, r1\n\tadd\t7, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_10[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_11[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_279:\n\tadd\t192, r1, r1\n\tadd\tstack-[14], r0, r4\n\tst.1\tr1, r4\n\tadd\t7, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tld.1\t64, r5\n\tadd\t36, r5, r4\n\tadd\tr10, r0, stack-[7]\n\tst.1\tr4, r10\n\tadd\t@CPI0_50[0], r0, r4\n\tst.1\tr5, r4\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr5, r0, stack-[14]\n\tadd\t4, r5, r4\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_283\n\tadd\t32, r0, r4\n\tjump\t@.BB0_289\n.BB0_281:\n\tsub!\tstack-[10], r0, r1\n\tjump.ne\t@.BB0_304\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_59[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_60[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t34, r0, r3\n\tjump\t@.BB0_82\n.BB0_283:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_51[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_286\n\tadd\tr0, r0, r7\n.BB0_285:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_285\n.BB0_286:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_288\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_288:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_319\n.BB0_289:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_6[0], r1, r4\n\tjump.gt\t@.BB0_25\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_25\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_195\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_195\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_52[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_53[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_345\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_195\n\tld.1\t64, r2\n\tadd\t@CPI0_54[0], r0, r1\n\tadd\tr2, r0, stack-[6]\n\tst.1\tr2, r1\n\tadd\t@CPI0_55[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_56[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_345\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r4\n\tadd\t68, r4, r2\n\tadd\t160, r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r4, r3\n\tadd\tstack-[10], r0, r2\n\tadd\tr3, r0, stack-[5]\n\tst.1\tr3, r2\n\tadd\t4, r4, r3\n\tadd\tstack-[7], r0, r2\n\tadd\tr3, r0, stack-[4]\n\tst.1\tr3, r2\n\tadd\tstack-[8], r0, r2\n\tld.1\tr2, r3\n\tadd\t164, r4, r2\n\tst.1\tr2, r3\n\tcontext.caller\tr2\n\tadd\tr2, r0, stack-[10]\n\tadd\t196, r4, r2\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB0_299\n\tadd\tr0, r0, r4\n\tadd\tstack-[8], r0, r6\n.BB0_298:\n\tadd\t32, r6, r6\n\tld.1\tr6, r5\n\tand\t@CPI0_2[0], r5, r5\n\tst.1.inc\tr2, r5, r2\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_298\n.BB0_299:\n\tadd\tstack-[6], r0, r4\n\tadd\t132, r4, r3\n\tst.1\tr3, r1\n\tadd\tstack-[10], r0, r1\n\tand\t@CPI0_2[0], r1, r1\n\tadd\t100, r4, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_301\n\tadd\tstack-[6], r0, r5\n\tsub\tr2, r5, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r4, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_351\n.BB0_301:\n\tadd\tstack-[6], r0, r1\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[6], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[11], r0, r1\n\tsload\tr1, r2\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_50[0], r0, r3\n\tst.1\tr4, r3\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tstack-[4], r0, r3\n\tst.1\tr3, r1\n\tadd\tstack-[5], r0, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_356\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_362\n.BB0_304:\n\tadd\tstack-[14], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[11], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tld\tr1, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_195\n\tadd\tstack-[9], r0, r3\n\tsub.s\tstack-[12], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_7[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_58[0], r0, r4\n\tadd\tstack-[14], r0, r5\n\tadd\tstack-[10], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_38\n\tjump\t@.BB0_195\n.BB0_307:\n\tadd\tstack-[3], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\tstack-[11], r0, r9\n\tjump.eq\t@.BB0_312\n.BB0_308:\n\tadd\t@CPI0_68[0], r0, r2\n\tsub.s!\t32, r1, r3\n\tadd\tr0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_68[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_68[0], r1, r1\n\tadd.ne\tr3, r0, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_195\n\tld.1\tr9, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB0_195\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_312\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI0_69[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI0_70[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t42, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_48[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[6], r0, r3\n\tjump\t@.BB0_83\n.BB0_312:\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[11]\n\tsub.s!\t@CPI0_71[0], r1, r1\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[11], r0, r2\n\tadd\t96, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[10], r0, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tstack[@calldatasize], r0, r2\n\tptr.add\tstack[@ptr_calldata], r2, r2\n\tadd\tr0, r0, r3\n\tadd\tr1, r0, r4\n.BB0_314:\n\tshl.s\t5, r3, r5\n\tptr.add\tr2, r5, r5\n\tld\tr5, r5\n\tst.1.inc\tr4, r5, r4\n\tadd\t1, r3, r3\n\tsub.s!\t2, r3, r5\n\tjump.lt\t@.BB0_314\n\tadd\tstack-[11], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_175\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[11], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t2, r1, r1\n\tjump.lt\t@.BB0_175\n\tadd\tstack-[11], r0, r1\n\tadd\t64, r1, r1\n\tadd\tstack-[9], r0, r2\n\tsload\tr2, r2\n\tand\t@CPI0_2[0], r2, r2\n\tst.1\tr1, r2\n\tadd\t7, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tsload\tr1, r1\n\tld.1\t64, r4\n\tadd\t36, r4, r2\n\tadd\tstack-[13], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_50[0], r0, r2\n\tst.1\tr4, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr4, r0, stack-[6]\n\tadd\t4, r4, r2\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_324\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_330\n.BB0_319:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_322\n\tadd\tr0, r0, r6\n.BB0_321:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_321\n.BB0_322:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_324:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[6], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_327\n\tadd\tr0, r0, r7\n.BB0_326:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_326\n.BB0_327:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_329\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[6], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_329:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_346\n.BB0_330:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[6], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_6[0], r1, r4\n\tjump.gt\t@.BB0_25\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_25\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_195\n\tadd\tstack-[6], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_195\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_52[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tr1, r0, stack-[6]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_53[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_345\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_195\n\tld.1\t64, r2\n\tadd\t@CPI0_54[0], r0, r1\n\tadd\tr2, r0, stack-[2]\n\tst.1\tr2, r1\n\tadd\t@CPI0_55[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_56[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_345\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r4\n\tadd\t68, r4, r2\n\tadd\t160, r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r4, r3\n\tadd\tstack-[8], r0, r2\n\tadd\tr3, r0, stack-[1]\n\tst.1\tr3, r2\n\tadd\t4, r4, r3\n\tadd\tstack-[13], r0, r2\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr3, r2\n\tadd\tstack-[11], r0, r2\n\tld.1\tr2, r3\n\tadd\t164, r4, r2\n\tst.1\tr2, r3\n\tadd\t196, r4, r2\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB0_340\n\tadd\tr0, r0, r4\n\tadd\tstack-[11], r0, r6\n.BB0_339:\n\tadd\t32, r6, r6\n\tld.1\tr6, r5\n\tand\t@CPI0_2[0], r5, r5\n\tst.1.inc\tr2, r5, r2\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_339\n.BB0_340:\n\tadd\tstack-[2], r0, r4\n\tadd\t132, r4, r3\n\tst.1\tr3, r1\n\tadd\t100, r4, r1\n\tadd\tstack-[12], r0, r3\n\tst.1\tr1, r3\n\tcontext.gas_left\tr1\n\tadd\tstack-[6], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_342\n\tadd\tstack-[2], r0, r5\n\tsub\tr2, r5, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r4, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tadd\tstack-[6], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_371\n.BB0_342:\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tadd\tstack-[14], r0, r3\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[2], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_50[0], r0, r2\n\tst.1\tr4, r2\n\tand\t@CPI0_2[0], r1, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[1], r0, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r3, r2\n\tjump.ne\t@.BB0_376\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_382\n.BB0_345:\n\trevert\n.BB0_346:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_349\n\tadd\tr0, r0, r6\n.BB0_348:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_348\n.BB0_349:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_351:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_354\n\tadd\tr0, r0, r6\n.BB0_353:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_353\n.BB0_354:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_356:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[6], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_51[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_359\n\tadd\tr0, r0, r7\n.BB0_358:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_358\n.BB0_359:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_361\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[6], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_361:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_366\n.BB0_362:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[6], r1, r1\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.gt\t@.BB0_25\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_195\n\tadd\tstack-[6], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_195\n\tadd\tstack-[10], r0, r1\n\tadd\tstack-[13], r0, r2\n\tnear_call\tr0, @fun_burn, @DEFAULT_UNWIND\n\tadd\t1, r0, r1\n\tadd\tstack-[9], r0, r2\n\tjump\t@.BB0_98\n.BB0_366:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_369\n\tadd\tr0, r0, r6\n.BB0_368:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_368\n.BB0_369:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_371:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_374\n\tadd\tr0, r0, r6\n.BB0_373:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_373\n.BB0_374:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_376:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[2], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_379\n\tadd\tr0, r0, r7\n.BB0_378:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_378\n.BB0_379:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_381\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[2], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_381:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_388\n.BB0_382:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[2], r1, r2\n\tadd\tr2, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[14], r0, r2\n\tst.1\t64, r2\n\tsub.s!\t32, r4, r2\n\tjump.lt\t@.BB0_195\n\tadd\tstack-[2], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB0_195\n\tadd\tstack-[9], r0, r2\n\tsload\tr2, r2\n\tadd\t@CPI0_42[0], r0, r3\n\tadd\tstack-[14], r0, r4\n\tst.1\tr4, r3\n\tadd\t4, r4, r3\n\tadd\tstack-[12], r0, r4\n\tst.1\tr3, r4\n\tcontext.gas_left\tr3\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_393\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.gt\t@.BB0_25\n\tst.1\t64, r1\n\tjump\t@.BB0_401\n.BB0_388:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_391\n\tadd\tr0, r0, r6\n.BB0_390:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_390\n.BB0_391:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.BB0_393:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_396\n\tadd\tr0, r0, r7\n.BB0_395:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_395\n.BB0_396:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_398\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_398:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_406\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.gt\t@.BB0_25\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_195\n.BB0_401:\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r2\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB0_198\n\tadd\tstack-[10], r0, r1\n\tsload\tr1, r1\n\tsub.s!\tstack-[5], r2, r2\n\tjump.eq\t@.BB0_404\n\tsub.s\t1, r0, r3\n\tdiv\tr3, r2, r3, r4\n\tsub!\tr3, r1, r3\n\tjump.lt\t@.BB0_198\n.BB0_404:\n\tsub!\tstack-[5], r0, r3\n\tjump.eq\t@.BB0_204\n\tmul\tr1, r2, r1, r2\n\tdiv.s\tstack-[5], r1, r2, r1\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @fun_mint, @DEFAULT_UNWIND\n\tadd\t1, r0, r1\n\tadd\tstack-[7], r0, r2\n\tjump\t@.BB0_98\n.BB0_406:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_409\n\tadd\tr0, r0, r6\n.BB0_408:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_408\n.BB0_409:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_268\n\tjump\t@.BB0_267\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tsub!\tr2, r0, r4\n\tadd\t64, r1, r1\n\tjump.eq\t@.BB1_5\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n\tsub!\tr4, r2, r3\n\tjump.le\t@.BB1_5\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n.BB1_5:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nfinalize_allocation:\n.func_begin2:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r3\n\tjump.gt\t@.BB2_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_2\n\tst.1\t64, r1\n\tret\n.BB2_2:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nmapping_index_access_mapping_address_uint256_of_address:\n.func_begin3:\n\tand\t@CPI3_0[0], r2, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_1\n\tld\tr1, r1\n\tret\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_transfer:\n.func_begin4:\n\tnop\tstack+=[4]\n\tadd\tr3, r0, stack-[4]\n\tand!\t@CPI4_0[0], r1, r1\n\tjump.eq\t@.BB4_1\n\tand!\t@CPI4_0[0], r2, stack-[2]\n\tjump.eq\t@.BB4_4\n\tadd\tr1, r0, stack-[3]\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI4_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\tstack-[4], r2, r1\n\tjump.lt\t@.BB4_8\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI4_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tadd\tstack-[1], r0, r3\n\tsub.s\tstack-[4], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[4], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI4_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI4_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI4_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI4_4[0], r0, r4\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[2], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB4_6\n\tret\n.BB4_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_11[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t37, r0, r3\n\tjump\t@.BB4_2\n.BB4_4:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t35, r0, r3\n\tjump\t@.BB4_2\n.BB4_8:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI4_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI4_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t38, r0, r3\n.BB4_2:\n\tst.1\tr2, r3\n\tadd\t@CPI4_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI4_1[0], r0, r2\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_approve:\n.func_begin5:\n\tnop\tstack+=[3]\n\tand!\t@CPI5_0[0], r1, r1\n\tjump.eq\t@.BB5_1\n\tadd\tr3, r0, stack-[2]\n\tand!\t@CPI5_0[0], r2, stack-[3]\n\tjump.eq\t@.BB5_4\n\tadd\tr1, r0, stack-[1]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI5_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[3], r0, r3\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tst.1\t0, r3\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\t@CPI5_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI5_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI5_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI5_4[0], r0, r4\n\tadd\tstack-[1], r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB5_6\n\tret\n.BB5_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI5_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI5_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t36, r0, r3\n\tjump\t@.BB5_2\n.BB5_4:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI5_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI5_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t34, r0, r3\n.BB5_2:\n\tst.1\tr2, r3\n\tadd\t@CPI5_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_shareToAmount:\n.func_begin6:\n\tnop\tstack+=[2]\n\tadd\t6, r0, r2\n\tsload\tr2, r2\n\tld.1\t64, r10\n\tadd\t@CPI6_0[0], r0, r3\n\tst.1\tr10, r3\n\tadd\t4, r10, r4\n\tcontext.this\tr3\n\tst.1\tr4, r3\n\tcontext.gas_left\tr5\n\tand\t@CPI6_1[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB6_2\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB6_13\n.BB6_2:\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI6_2[0], r0, r3\n\tsub.s!\t@CPI6_2[0], r5, r4\n\tadd.ge\tr3, r0, r5\n\tsub.s!\t@CPI6_2[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r5, r1\n\tor\tr1, r3, r1\n\tor\t@CPI6_3[0], r1, r1\n\tadd\tr10, r0, stack-[2]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI6_2[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB6_26\n\tadd\tr0, r0, r7\n.BB6_4:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB6_4\n.BB6_26:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB6_6\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB6_6:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_8\n\tadd\tstack-[1], r0, r1\n.BB6_13:\n\tadd\t31, r4, r2\n\tand\t96, r2, r2\n\tadd\tr2, r10, r5\n\tsub!\tr5, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI6_4[0], r5, r4\n\tjump.gt\t@.BB6_15\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB6_15\n\tst.1\t64, r5\n\tsub.s!\t31, r3, r2\n\tjump.le\t@.BB6_18\n\tld.1\tr10, r4\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB6_22\n\tsub.s\t1, r0, r2\n\tdiv\tr2, r1, r2, r3\n\tsub!\tr2, r4, r2\n\tjump.lt\t@.BB6_21\n.BB6_22:\n\tadd\t2, r0, r2\n\tsload\tr2, r2\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB6_23\n\tmul\tr4, r1, r1, r3\n\tdiv\tr1, r2, r1, r2\n\tret\n.BB6_15:\n\tadd\t@CPI6_5[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_18:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_23:\n\tadd\t@CPI6_5[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_21:\n\tadd\t@CPI6_5[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_8:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB6_25\n\tadd\tr0, r0, r6\n.BB6_10:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB6_10\n.BB6_25:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB6_12\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB6_12:\n\tadd\t@CPI6_2[0], r0, r1\n\tsub.s!\t@CPI6_2[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\nfun_amountToShare:\n.func_begin7:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, r5\n\tadd\t2, r0, r1\n\tsload\tr1, r6\n\tsub!\tr5, r0, r1\n\tjump.eq\t@.BB7_4\n\tsub.s\t1, r0, r1\n\tdiv\tr1, r5, r1, r2\n\tsub!\tr1, r6, r1\n\tjump.lt\t@.BB7_2\n.BB7_4:\n\tadd\t6, r0, r1\n\tsload\tr1, r2\n\tld.1\t64, r10\n\tadd\t@CPI7_2[0], r0, r1\n\tst.1\tr10, r1\n\tadd\t4, r10, r1\n\tcontext.this\tr3\n\tst.1\tr1, r3\n\tcontext.gas_left\tr1\n\tand\t@CPI7_3[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB7_6\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB7_17\n.BB7_6:\n\tadd\tr6, r0, stack-[1]\n\tadd\tr5, r0, stack-[2]\n\tadd\t@CPI7_4[0], r0, r3\n\tsub.s!\t@CPI7_4[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI7_4[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI7_1[0], r1, r1\n\tadd\tr10, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI7_4[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB7_26\n\tadd\tr0, r0, r7\n.BB7_8:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB7_8\n.BB7_26:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB7_10\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB7_10:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_12\n\tadd\tstack-[2], r0, r5\n\tadd\tstack-[1], r0, r6\n.BB7_17:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI7_5[0], r1, r4\n\tjump.gt\t@.BB7_19\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB7_19\n\tst.1\t64, r1\n\tsub.s!\t31, r3, r1\n\tjump.le\t@.BB7_21\n\tld.1\tr10, r1\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB7_23\n\tmul\tr6, r5, r2, r3\n\tdiv\tr2, r1, r1, r2\n\tret\n.BB7_19:\n\tadd\t@CPI7_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_21:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_23:\n\tadd\t@CPI7_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t18, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_2:\n\tadd\t@CPI7_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_12:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB7_25\n\tadd\tr0, r0, r6\n.BB7_14:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB7_14\n.BB7_25:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB7_16\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB7_16:\n\tadd\t@CPI7_4[0], r0, r1\n\tsub.s!\t@CPI7_4[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\nfun_nonReentrantBefore:\n.func_begin8:\n\tadd\t5, r0, r1\n\tsload\tr1, r2\n\tsub.s!\t2, r2, r2\n\tjump.eq\t@.BB8_1\n\tadd\t2, r0, r2\n\tsstore\tr1, r2\n\tret\n.BB8_1:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI8_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t31, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI8_1[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI8_2[0], r0, r2\n\tsub.s!\t@CPI8_2[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI8_3[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end8:\n\nfun_mint:\n.func_begin9:\n\tnop\tstack+=[2]\n\tand!\t@CPI9_0[0], r1, r4\n\tjump.eq\t@.BB9_1\n\tsub.s\t1, r0, r1\n\txor\tr2, r1, r3\n\tadd\t2, r0, r1\n\tsload\tr1, r5\n\tsub!\tr5, r3, r3\n\tjump.gt\t@.BB9_3\n\tadd\tr2, r0, stack-[2]\n\tadd\tr5, r2, r2\n\tsstore\tr1, r2\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI9_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI9_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI9_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[1]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB9_5\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[2], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI9_1[0], r2, r3\n\tadd\t@CPI9_1[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI9_1[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI9_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI9_4[0], r0, r4\n\tadd\tr0, r0, r5\n\tadd\tstack-[1], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB9_5\n\tret\n.BB9_5:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB9_1:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI9_7[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t31, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI9_8[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI9_1[0], r0, r2\n\tsub.s!\t@CPI9_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI9_9[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB9_3:\n\tadd\t@CPI9_5[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI9_6[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end9:\n\nfun_safeTransferFrom:\n.func_begin10:\n\tnop\tstack+=[3]\n\tld.1\t64, r5\n\tadd\t100, r5, r6\n\tst.1\tr6, r4\n\tand\t@CPI10_0[0], r3, r3\n\tadd\t68, r5, r4\n\tst.1\tr4, r3\n\tadd\t32, r5, r3\n\tadd\t@CPI10_1[0], r0, r4\n\tst.1\tr3, r4\n\tand\t@CPI10_0[0], r2, r2\n\tadd\t36, r5, r4\n\tst.1\tr4, r2\n\tadd\t100, r0, r2\n\tst.1\tr5, r2\n\tsub.s!\t@CPI10_2[0], r5, r2\n\tjump.ge\t@.BB10_1\n\tand\t@CPI10_0[0], r1, r9\n\tadd\t160, r5, r8\n\tst.1\t64, r8\n\tsub.s!\t@CPI10_3[0], r5, r1\n\tjump.gt\t@.BB10_1\n\tadd\t224, r5, r1\n\tst.1\t64, r1\n\tadd\t32, r0, r6\n\tst.1\tr8, r6\n\tadd\t192, r5, r1\n\tadd\t@CPI10_4[0], r0, r2\n\tst.1\tr1, r2\n\tld.1\tr5, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r9, r4\n\tadd\tr6, r0, stack-[3]\n\tjump.ne\t@.BB10_4\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB10_7\n.BB10_19:\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t63, r3, r3\n\tand\tr3, r4, r3\n\tld.1\t64, r11\n\tadd\tr11, r3, r3\n\tsub!\tr3, r11, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI10_6[0], r3, r5\n\tjump.gt\t@.BB10_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB10_1\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr11, r1, r10\n\tptr.add\tstack[@ptr_return_data], r0, r4\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB10_31\n\tadd\tr0, r0, r5\n.BB10_23:\n\tshl.s\t5, r5, r6\n\tadd\tr10, r6, r7\n\tptr.add\tr4, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB10_23\n.BB10_31:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB10_8\n\tshl.s\t5, r1, r1\n\tptr.add\tr4, r1, r4\n\tadd\tr10, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r5, r3\n\tst.1\tr1, r3\n\tjump\t@.BB10_8\n.BB10_4:\n\tadd\t@CPI10_5[0], r0, r4\n\tsub.s!\t@CPI10_5[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t64, r3, r3\n\tsub.s!\t@CPI10_5[0], r2, r5\n\tadd.ge\tr4, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tsub.s!\t@CPI10_5[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr2, r1, r1\n\tadd\tr9, r0, r2\n\tadd\tr8, r0, stack-[2]\n\tadd\tr9, r0, stack-[1]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r9\n\tadd\tstack-[2], r0, r8\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI10_5[0], r1, stack[@returndatasize]\n\tand\t@CPI10_5[0], r1, r1\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB10_19\n.BB10_7:\n\tadd\t96, r0, r11\n\tadd\t128, r0, r10\n.BB10_8:\n\tld.1\tr11, r1\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB10_9\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB10_25\n\tadd\tr11, r0, stack-[2]\n\tadd\tr10, r0, stack-[1]\n\tadd\t@CPI10_7[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r9\n\tadd\t@CPI10_5[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI10_5[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI10_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB10_15\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tstack-[2], r0, r1\n\tjump.eq\t@.BB10_17\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\tstack-[1], r0, r10\n\tjump.eq\t@.BB10_30\n.BB10_25:\n\tadd\t@CPI10_9[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\tr0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI10_9[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.ge\tr0, r0, r2\n\tsub.s!\t@CPI10_9[0], r1, r1\n\tadd.ne\tr3, r0, r2\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB10_26\n\tld.1\tr10, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB10_26\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB10_29\n.BB10_30:\n\tret\n.BB10_1:\n\tadd\t@CPI10_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI10_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB10_26:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB10_9:\n\tadd\tr8, r0, r2\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB10_11\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[3]\n\tadd\t@CPI10_12[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI10_5[0], r0, r2\n\tsub.s!\t@CPI10_5[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI10_5[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB10_29:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI10_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI10_11[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t42, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI10_12[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI10_5[0], r0, r2\n\tsub.s!\t@CPI10_5[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI10_13[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB10_11:\n\tadd\t@CPI10_5[0], r0, r2\n\tsub.s!\t@CPI10_5[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI10_5[0], r10, r3\n\tadd.ge\tr2, r0, r10\n\tshl.s\t64, r10, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB10_15:\n\trevert\n.BB10_17:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI10_14[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI10_12[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI10_5[0], r0, r2\n\tsub.s!\t@CPI10_5[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI10_15[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end10:\n\nfun_callOptionalReturn:\n.func_begin11:\n\tnop\tstack+=[3]\n\tand\t@CPI11_0[0], r1, r9\n\tld.1\t64, r8\n\tsub.s!\t@CPI11_1[0], r8, r1\n\tjump.ge\t@.BB11_1\n\tadd\t64, r8, r1\n\tst.1\t64, r1\n\tadd\t32, r8, r1\n\tadd\t@CPI11_2[0], r0, r3\n\tst.1\tr1, r3\n\tadd\t32, r0, r5\n\tst.1\tr8, r5\n\tld.1.inc\tr2, r3, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r9, r4\n\tadd\tr5, r0, stack-[3]\n\tjump.ne\t@.BB11_3\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB11_6\n.BB11_18:\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t63, r3, r3\n\tand\tr3, r4, r3\n\tld.1\t64, r11\n\tadd\tr11, r3, r3\n\tsub!\tr3, r11, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI11_4[0], r3, r5\n\tjump.gt\t@.BB11_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB11_1\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr11, r1, r10\n\tptr.add\tstack[@ptr_return_data], r0, r4\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB11_30\n\tadd\tr0, r0, r5\n.BB11_22:\n\tshl.s\t5, r5, r6\n\tadd\tr10, r6, r7\n\tptr.add\tr4, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB11_22\n.BB11_30:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB11_7\n\tshl.s\t5, r1, r1\n\tptr.add\tr4, r1, r4\n\tadd\tr10, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r5, r3\n\tst.1\tr1, r3\n\tjump\t@.BB11_7\n.BB11_3:\n\tadd\t@CPI11_3[0], r0, r4\n\tsub.s!\t@CPI11_3[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t96, r3, r3\n\tsub.s!\t@CPI11_3[0], r2, r5\n\tadd.ge\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tor\tr3, r2, r2\n\tsub.s!\t@CPI11_3[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr2, r1, r1\n\tadd\tr9, r0, r2\n\tadd\tr8, r0, stack-[2]\n\tadd\tr9, r0, stack-[1]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r9\n\tadd\tstack-[2], r0, r8\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI11_3[0], r1, stack[@returndatasize]\n\tand\t@CPI11_3[0], r1, r1\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB11_18\n.BB11_6:\n\tadd\t96, r0, r11\n\tadd\t128, r0, r10\n.BB11_7:\n\tld.1\tr11, r1\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB11_8\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB11_24\n\tadd\tr11, r0, stack-[2]\n\tadd\tr10, r0, stack-[1]\n\tadd\t@CPI11_5[0], r0, r1\n\tst.2\t0, r1\n\tst.2\t4, r9\n\tadd\t@CPI11_3[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI11_3[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI11_6[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB11_14\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tstack-[2], r0, r1\n\tjump.eq\t@.BB11_16\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r2\n\tadd\tstack-[1], r0, r10\n\tjump.eq\t@.BB11_29\n.BB11_24:\n\tadd\t@CPI11_7[0], r0, r2\n\tsub.s!\t31, r1, r3\n\tadd\tr0, r0, r3\n\tadd.gt\tr2, r0, r3\n\tand\t@CPI11_7[0], r1, r1\n\tsub!\tr1, r0, r4\n\tadd.ge\tr0, r0, r2\n\tsub.s!\t@CPI11_7[0], r1, r1\n\tadd.ne\tr3, r0, r2\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB11_25\n\tld.1\tr10, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB11_25\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB11_28\n.BB11_29:\n\tret\n.BB11_25:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB11_1:\n\tadd\t@CPI11_14[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI11_15[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB11_8:\n\tadd\tr8, r0, r2\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB11_10\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[3]\n\tadd\t@CPI11_10[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI11_3[0], r0, r2\n\tsub.s!\t@CPI11_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI11_3[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB11_28:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI11_8[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI11_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t42, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI11_10[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI11_3[0], r0, r2\n\tsub.s!\t@CPI11_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI11_11[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB11_10:\n\tadd\t@CPI11_3[0], r0, r2\n\tsub.s!\t@CPI11_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI11_3[0], r10, r3\n\tadd.ge\tr2, r0, r10\n\tshl.s\t64, r10, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB11_14:\n\trevert\n.BB11_16:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI11_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI11_10[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI11_3[0], r0, r2\n\tsub.s!\t@CPI11_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI11_13[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end11:\n\nfun_burn:\n.func_begin12:\n\tnop\tstack+=[3]\n\tadd\tr2, r0, stack-[3]\n\tand!\t@CPI12_0[0], r1, r4\n\tjump.eq\t@.BB12_1\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI12_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI12_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI12_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[2]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB12_4\n\tadd\tstack-[2], r0, r2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tr3, r0, stack-[1]\n\tsub.s!\tstack-[3], r3, r1\n\tjump.lt\t@.BB12_6\n\tst.1\t0, r2\n\tst.1\t32, r0\n\tadd\t@CPI12_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI12_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI12_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB12_4\n\tadd\tstack-[3], r0, r3\n\tsub\tstack-[1], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI12_1[0], r2, r3\n\tadd\t@CPI12_1[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI12_1[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI12_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI12_4[0], r0, r4\n\tadd\tstack-[2], r0, r5\n\tadd\tr0, r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB12_4\n\tret\n.BB12_4:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB12_1:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI12_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI12_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t33, r0, r3\n\tjump\t@.BB12_2\n.BB12_6:\n\tld.1\t64, r1\n\tadd\t100, r1, r2\n\tadd\t@CPI12_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tadd\t@CPI12_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t34, r0, r3\n.BB12_2:\n\tst.1\tr2, r3\n\tadd\t@CPI12_7[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI12_1[0], r0, r2\n\tsub.s!\t@CPI12_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI12_8[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end12:\n\n__cxa_throw:\n.func_begin13:\n\trevert\n.func_end13:\n\n__sha3:\n.func_begin14:\n\tadd\t@CPI14_0[0], r0, r3\n\tsub.s!\t@CPI14_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI14_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI14_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI14_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB14_2\n\tld\tr1, r1\n\tret\n.BB14_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end14:\n\n__farcall:\n.func_begin15:\n.tmp0:\n\tfar_call\tr1, r2, @.BB15_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB15_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end15:\n\n__staticcall:\n.func_begin16:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB16_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB16_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end16:\n\n\t.data\n\t.p2align\t5, 0x0\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI3_1:\nCPI4_1:\nCPI5_1:\nCPI6_2:\nCPI7_4:\nCPI8_2:\nCPI9_1:\nCPI10_5:\nCPI11_3:\nCPI12_1:\nCPI14_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\nCPI3_0:\nCPI4_0:\nCPI5_0:\nCPI6_1:\nCPI7_3:\nCPI9_0:\nCPI10_0:\nCPI11_0:\nCPI12_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_3:\n\t.cell 18446744073709551551\nCPI0_4:\n\t.cell 39071099571692187701823911443423574783960696037724116614043465686908311437312\nCPI0_5:\n\t.cell 39047320131602293683790874766418499199787394120951178974487497048566897049600\nCPI0_6:\nCPI2_0:\nCPI6_4:\nCPI7_5:\nCPI10_6:\nCPI11_4:\n\t.cell 18446744073709551615\nCPI0_7:\nCPI4_3:\nCPI5_3:\nCPI9_3:\nCPI12_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_8:\n\t.cell -27889059366240281169193357100633332908378892778709981755071813198463099602853\nCPI0_9:\n\t.cell -53278079350709166316280423202849322519190186591071851114874353210178472783461\nCPI0_10:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_11:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_12:\n\t.cell 961581904\nCPI0_13:\n\t.cell 2757214934\nCPI0_14:\n\t.cell 3311251042\nCPI0_15:\n\t.cell 3311251043\nCPI0_16:\n\t.cell 3714247998\nCPI0_17:\n\t.cell 4169656896\nCPI0_18:\n\t.cell 2757214935\nCPI0_19:\n\t.cell 2835717307\nCPI0_20:\n\t.cell 3065339685\nCPI0_21:\n\t.cell 1889567280\nCPI0_22:\n\t.cell 1889567281\nCPI0_23:\n\t.cell 2064959016\nCPI0_24:\n\t.cell 2514000705\nCPI0_25:\n\t.cell 961581905\nCPI0_26:\n\t.cell 1178674557\nCPI0_27:\n\t.cell 759187428\nCPI0_28:\n\t.cell 773487948\nCPI0_29:\n\t.cell 773487949\nCPI0_30:\n\t.cell 826074471\nCPI0_31:\n\t.cell 841916164\nCPI0_32:\n\t.cell 759187429\nCPI0_33:\n\t.cell 762282003\nCPI0_34:\n\t.cell 157198258\nCPI0_35:\n\t.cell 157198259\nCPI0_36:\n\t.cell 404098525\nCPI0_37:\n\t.cell 599290589\nCPI0_38:\n\t.cell 111704594\nCPI0_39:\n\t.cell 117300739\nCPI0_40:\n\t.cell 2535301202817642044428229017600\nCPI0_41:\n\t.cell 2535301200456458802993406410752\nCPI0_42:\nCPI6_0:\nCPI7_2:\n\t.cell 50942633119752846454219349998365661925608737367104304655302372697894809501696\nCPI0_43:\n\t.cell 2852213852874699394802404818944\nCPI0_44:\nCPI2_2:\nCPI6_3:\nCPI7_1:\nCPI9_6:\nCPI10_17:\nCPI11_15:\n\t.cell 2852213850513516153367582212096\nCPI0_45:\nCPI3_2:\nCPI4_2:\nCPI5_2:\nCPI9_2:\nCPI12_2:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_46:\n\t.cell 14690266658072097593480850647027335513285713462661904985951319567533531463680\nCPI0_47:\n\t.cell 31354931781638678506476475496475743842680577777870365728514456330491174612855\nCPI0_48:\nCPI4_7:\nCPI5_7:\nCPI8_1:\nCPI9_8:\nCPI10_12:\nCPI11_10:\nCPI12_7:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_49:\nCPI4_8:\nCPI5_8:\nCPI10_13:\nCPI11_11:\nCPI12_8:\n\t.cell 10458117451882892562347801444352\nCPI0_50:\n\t.cell 4238056678808933066457772256406219440718756300954938350892797929791311314944\nCPI0_51:\n\t.cell 5387515050969974956360988622848\nCPI0_52:\nCPI10_7:\nCPI11_5:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_53:\nCPI10_8:\nCPI11_6:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_54:\n\t.cell 25748422551898331045570973773731243862858277601991987080409567332400279584768\nCPI0_55:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI0_56:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_57:\n\t.cell -39341301877480157781710804024396230103289065588583741745104145964028735258624\nCPI0_58:\nCPI5_4:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_59:\nCPI5_5:\n\t.cell 52219164999525148860834357634456956735281286572158918307284071279203377479680\nCPI0_60:\nCPI5_6:\n\t.cell 31354931781638678487916134672869638488806705378895508030211234510262059168357\nCPI0_61:\nCPI5_9:\n\t.cell 51742913093258732729005998692887265601192425265805909375210916622055285719040\nCPI0_62:\nCPI5_10:\n\t.cell 31354931781638678487916134672869638484047149969764982831501014746446650500196\nCPI0_63:\n\t.cell 31354931781638678538084197150757782427756587561754988975511141185730285404160\nCPI0_64:\nCPI8_3:\nCPI9_9:\nCPI10_15:\nCPI11_13:\n\t.cell 7922816251426433759354395033600\nCPI0_65:\nCPI2_1:\nCPI6_5:\nCPI7_0:\nCPI9_5:\nCPI10_16:\nCPI11_14:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_66:\nCPI10_1:\n\t.cell 16156842317565293874272834530371880720966471053262404558597773956279093428224\nCPI0_67:\nCPI10_4:\nCPI11_2:\n\t.cell 37714057306076988483118529490347679105585116642029194716945419020321082336612\nCPI0_68:\nCPI10_9:\nCPI11_7:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_69:\nCPI10_10:\nCPI11_8:\n\t.cell 50411904420896249798390057088552747694053213439589473829759729709664159399936\nCPI0_70:\nCPI10_11:\nCPI11_9:\n\t.cell 37714057306076988483118529433182395293628422681814405642689417129066110394478\nCPI0_71:\n\t.cell 18446744073709551519\nCPI0_72:\nCPI10_14:\nCPI11_12:\n\t.cell 29577713123142787666064487680123823951345158729797978021083438401868913442816\nCPI0_73:\nCPI8_0:\n\t.cell 37268805191608899176760263720700790282416321829889089033725955971341467020288\nCPI0_74:\n\t.cell 7922816253787617000789217640448\nCPI4_4:\nCPI9_4:\nCPI12_4:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI4_5:\n\t.cell 44065838241030143116324720188876985940908656145555552347773292252211112312832\nCPI4_6:\n\t.cell 31354931781638678607228669297131712859100820671745083778533502622993977909346\nCPI4_9:\n\t.cell 45887578820189300338443374388718498632482616163288499555830078344056365121536\nCPI4_10:\n\t.cell 31354931781638678607228669297131712859126084785867252355217498662940140921970\nCPI4_11:\n\t.cell 45433405612597180762055095701412804886438245671210399661410036396145969725440\nCPI4_12:\n\t.cell 31354931781638678607228669297131712859107492772550336241160036866987736981860\nCPI9_7:\n\t.cell 31354931781638678563069525067809233856775101976563302031013534919694566519552\nCPI10_2:\n\t.cell 18446744073709551456\nCPI10_3:\n\t.cell 18446744073709551391\nCPI11_1:\n\t.cell 18446744073709551552\nCPI12_5:\n\t.cell 44957423563285989266247004906403561635230327756000124389404269791890710200320\nCPI12_6:\n\t.cell 31354931781638678494316026001312189103416802390932084224065329695412615668078\nCPI12_9:\n\t.cell 52015977587075634662932278421871521105961125924018222127100086566054726205440\nCPI12_10:\n\t.cell 31354931781638678494316026001340845558170976982936511063842609339963588896115\nCPI14_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "amountToShare(uint256)": "2d4047e5",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "baseToken()": "c55dae63",
            "decimals()": "313ce567",
            "decreaseAllowance(address,uint256)": "a457c2d7",
            "deposit(uint256)": "b6b55f25",
            "harvest()": "4641257d",
            "increaseAllowance(address,uint256)": "39509351",
            "name()": "06fdde03",
            "router()": "f887ea40",
            "shareToAmount(uint256)": "2d6f8013",
            "swapAndDeposit(uint256,address,uint256)": "06a87a12",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd",
            "withdraw(uint256)": "2e1a7d4d",
            "withdrawAndSwap(uint256,address,uint256)": "7b14c628",
            "work()": "322e9f04"
          }
        },
        "irOptimized": "/// @use-src 0:\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\", 1:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 2:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 3:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 7:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 8:\"src/Reentrancy/CrossContractReentrancy/Vault.sol\"\nobject \"Vault_1812\" {\n    code {\n        {\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Vault_1812\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            if slt(sub(add(memoryDataOffset, argSize), memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            let value := mload(memoryDataOffset)\n            validator_revert_contract_ERC20(value)\n            let _1 := 32\n            let value_1 := mload(add(memoryDataOffset, _1))\n            validator_revert_contract_ERC20(value_1)\n            let memPtr := allocate_memory_array_string()\n            mstore(add(memPtr, _1), \"VaultToken\")\n            let memPtr_1 := allocate_memory_array_string_1392()\n            mstore(add(memPtr_1, _1), \"VT\")\n            let newLen := mload(memPtr)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage_1393(extract_byte_array_length(sload(/** @src 1:2042:2055  \"_name = name_\" */ 0x03)), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ newLen)\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            srcOffset := _1\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage_1394()\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                for { } lt(i, loopEnd) { i := add(i, _1) }\n                {\n                    sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, _1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(memPtr, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value_2 := /** @src -1:-1:-1 */ 0\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                if newLen\n                {\n                    value_2 := mload(add(memPtr, srcOffset))\n                }\n                sstore(/** @src 1:2042:2055  \"_name = name_\" */ 0x03, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ extract_used_part_and_set_length_of_short_byte_array(value_2, newLen))\n            }\n            copy_byte_array_to_storage_from_string_to_string(memPtr_1)\n            /// @src 0:1821:1843  \"_status = _NOT_ENTERED\"\n            update_storage_value_offsett_uint256_to_uint256()\n            /// @src 8:738:760  \"baseToken = _baseToken\"\n            update_storage_value_offsett_contract_ERC20_to_contract_ERC20_1397(value)\n            /// @src 8:770:786  \"router = _router\"\n            update_storage_value_offsett_contract_ERC20_to_contract_ERC20(value_1)\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"Vault_1812_deployed\")\n            codecopy(_2, dataoffset(\"Vault_1812_deployed\"), _3)\n            return(_2, _3)\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function allocate_memory_3099() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function validator_revert_contract_ERC20(value)\n        {\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n        function allocate_memory_array_string() -> memPtr\n        {\n            memPtr := allocate_memory_3099()\n            mstore(memPtr, 10)\n        }\n        function allocate_memory_array_string_1392() -> memPtr\n        {\n            memPtr := allocate_memory_3099()\n            mstore(memPtr, 2)\n        }\n        function update_storage_value_offsett_contract_ERC20_to_contract_ERC20_1397(value)\n        {\n            sstore(/** @src 8:738:760  \"baseToken = _baseToken\" */ 0x06, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ or(and(sload(/** @src 8:738:760  \"baseToken = _baseToken\" */ 0x06), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ not(sub(shl(160, 1), 1))), and(value, sub(shl(160, 1), 1))))\n        }\n        function update_storage_value_offsett_contract_ERC20_to_contract_ERC20(value)\n        {\n            sstore(/** @src 8:770:786  \"router = _router\" */ 0x07, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ or(and(sload(/** @src 8:770:786  \"router = _router\" */ 0x07), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ not(sub(shl(160, 1), 1))), and(value, sub(shl(160, 1), 1))))\n        }\n        /// @src 0:1716:1717  \"1\"\n        function update_storage_value_offsett_uint256_to_uint256()\n        {\n            sstore(/** @src 0:1821:1843  \"_status = _NOT_ENTERED\" */ 0x05, /** @src 0:1716:1717  \"1\" */ 0x01)\n        }\n        /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n        function array_dataslot_string_storage_1394() -> data\n        {\n            mstore(0, /** @src 1:2042:2055  \"_name = name_\" */ 0x03)\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            data := keccak256(0, 0x20)\n        }\n        function array_dataslot_string_storage() -> data\n        {\n            mstore(0, /** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            data := keccak256(0, 0x20)\n        }\n        function clean_up_bytearray_end_slots_string_storage_1393(len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 1:2042:2055  \"_name = name_\" */ 0x03)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _2 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _1)\n                }\n            }\n        }\n        /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n        function clean_up_bytearray_end_slots_string_storage(len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                /// @src -1:-1:-1\n                let _1 := 0\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                mstore(/** @src -1:-1:-1 */ _1, /** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ _1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x20)\n                let deleteStart := add(data, shr(5, add(startIndex, 31)))\n                if lt(startIndex, 0x20) { deleteStart := data }\n                let _2 := add(data, shr(5, add(len, 31)))\n                let start := deleteStart\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ _1)\n                }\n            }\n        }\n        /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(src)\n        {\n            let newLen := mload(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            clean_up_bytearray_end_slots_string_storage(extract_byte_array_length(sload(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04)), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ newLen)\n            let srcOffset := 0\n            let srcOffset_1 := 0x20\n            srcOffset := srcOffset_1\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                let dstPtr := array_dataslot_string_storage()\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, srcOffset_1)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(/** @src 1:2065:2082  \"_symbol = symbol_\" */ 0x04, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n    }\n    /// @use-src 0:\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\", 1:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 5:\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\", 6:\"lib/openzeppelin-contracts/contracts/utils/Address.sol\", 7:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 8:\"src/Reentrancy/CrossContractReentrancy/Vault.sol\"\n    object \"Vault_1812_deployed\" {\n        code {\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06a87a12 { external_fun_swapAndDeposit() }\n                    case 0x06fdde03 { external_fun_name() }\n                    case 0x095ea7b3 { external_fun_approve() }\n                    case 0x18160ddd { external_fun_totalSupply() }\n                    case 0x23b872dd { external_fun_transferFrom() }\n                    case 0x2d4047e5 { external_fun_amountToShare() }\n                    case 0x2d6f8013 { external_fun_shareToAmount() }\n                    case 0x2e1a7d4d { external_fun_withdraw() }\n                    case 0x313ce567 { external_fun_decimals() }\n                    case 0x322e9f04 { external_fun_work() }\n                    case 0x39509351 {\n                        external_fun_increaseAllowance()\n                    }\n                    case 0x4641257d { external_fun_work() }\n                    case 0x70a08231 { external_fun_balanceOf() }\n                    case 0x7b14c628 {\n                        external_fun_withdrawAndSwap()\n                    }\n                    case 0x95d89b41 { external_fun_symbol() }\n                    case 0xa457c2d7 {\n                        external_fun_decreaseAllowance()\n                    }\n                    case 0xa9059cbb { external_fun_transfer() }\n                    case 0xb6b55f25 { external_fun_deposit() }\n                    case 0xc55dae63 { external_fun_baseToken() }\n                    case 0xdd62ed3e { external_fun_allowance() }\n                    case 0xf887ea40 { external_fun_router() }\n                }\n                revert(0, 0)\n            }\n            function validator_revert_contract_ERC20(value)\n            {\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_uint256t_contract_ERC20t_uint256(dataEnd) -> value0, value1, value2\n            {\n                if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                value0 := calldataload(4)\n                let value := calldataload(36)\n                validator_revert_contract_ERC20(value)\n                value1 := value\n                value2 := calldataload(68)\n            }\n            function external_fun_swapAndDeposit()\n            {\n                if callvalue() { revert(0, 0) }\n                let param, param_1, param_2 := abi_decode_uint256t_contract_ERC20t_uint256(calldatasize())\n                /// @src 0:2227:2330  \"modifier nonReentrant() {...\"\n                fun_nonReentrantBefore()\n                /// @src 8:1697:1716  \"baseToken.balanceOf\"\n                let expr_address := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:1697:1706  \"baseToken\" */ 0x06)))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := 64\n                /// @src 8:1697:1731  \"baseToken.balanceOf(address(this))\"\n                let _2 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(_1)\n                let _3 := shl(224, 0x70a08231)\n                /// @src 8:1697:1731  \"baseToken.balanceOf(address(this))\"\n                mstore(_2, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)\n                /// @src 8:1697:1731  \"baseToken.balanceOf(address(this))\"\n                let _4 := 32\n                let _5 := staticcall(gas(), expr_address, _2, sub(abi_encode_address(add(_2, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:1725:1729  \"this\" */ address()), /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _2), _2, _4)\n                if iszero(_5) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 8:1697:1731  \"baseToken.balanceOf(address(this))\"\n                if _5\n                {\n                    let _6 := _4\n                    if gt(_4, returndatasize()) { _6 := returndatasize() }\n                    finalize_allocation(_2, _6)\n                    expr := abi_decode_uint256_fromMemory(_2, add(_2, _6))\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _7 := and(/** @src 8:1741:1767  \"_srcToken.safeTransferFrom\" */ param_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 8:1795:1802  \"_amount\"\n                fun_safeTransferFrom(_7, /** @src 8:1768:1778  \"msg.sender\" */ caller(), /** @src 8:1725:1729  \"this\" */ address(), /** @src 8:1795:1802  \"_amount\" */ param)\n                /// @src 8:1837:1853  \"new address[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_address_dyn()\n                /// @src 8:1863:1891  \"path[0] = address(_srcToken)\"\n                write_to_memory_address(memory_array_index_access_address_dyn_8368(expr_mpos), _7)\n                /// @src 8:1901:1929  \"path[1] = address(baseToken)\"\n                write_to_memory_address(memory_array_index_access_address_dyn_8369(expr_mpos), /** @src 8:1911:1929  \"address(baseToken)\" */ convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:1697:1706  \"baseToken\" */ 0x06))))\n                /// @src 8:1995:2010  \"address(router)\"\n                let expr_1 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:2003:2009  \"router\" */ 0x07)))\n                /// @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\"\n                let _8 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(_1)\n                let _9 := shl(224, 0x095ea7b3)\n                /// @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\"\n                mstore(_8, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _9)\n                /// @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\"\n                let _10 := call(gas(), _7, /** @src -1:-1:-1 */ 0, /** @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\" */ _8, sub(abi_encode_address_uint256(add(_8, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\" */ expr_1, param), _8), _8, /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4)\n                /// @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\"\n                if iszero(_10) { revert_forward() }\n                if _10\n                {\n                    let _11 := /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4\n                    /// @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\"\n                    if gt(/** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4, /** @src 8:1977:2020  \"_srcToken.approve(address(router), _amount)\" */ returndatasize()) { _11 := returndatasize() }\n                    finalize_allocation(_8, _11)\n                    pop(abi_decode_bool_fromMemory(_8, add(_8, _11)))\n                }\n                /// @src 8:2130:2161  \"router.swapExactTokensForTokens\"\n                let expr_address_1 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:2003:2009  \"router\" */ 0x07)))\n                /// @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\"\n                if iszero(extcodesize(expr_address_1))\n                {\n                    /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\"\n                let _12 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(_1)\n                /// @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\"\n                mstore(_12, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x38ed1739))\n                /// @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\"\n                let _13 := call(gas(), expr_address_1, /** @src -1:-1:-1 */ 0, /** @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\" */ _12, sub(abi_encode_uint256_uint256_array_address_dyn_address_uint256(add(_12, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\" */ param, param_2, expr_mpos, /** @src 8:1725:1729  \"this\" */ address(), /** @src 8:2206:2221  \"block.timestamp\" */ timestamp()), /** @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\" */ _12), _12, /** @src -1:-1:-1 */ 0)\n                /// @src 8:2130:2222  \"router.swapExactTokensForTokens(_amount, amountOutMin, path, address(this), block.timestamp)\"\n                if iszero(_13) { revert_forward() }\n                if _13\n                {\n                    finalize_allocation_8370(_12)\n                    abi_decode(_12, _12)\n                }\n                /// @src 8:2282:2297  \"address(router)\"\n                let expr_2 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:2003:2009  \"router\" */ 0x07)))\n                /// @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\"\n                let _14 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(_1)\n                /// @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\"\n                mstore(_14, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _9)\n                /// @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\"\n                let _15 := call(gas(), _7, /** @src -1:-1:-1 */ 0, /** @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\" */ _14, sub(abi_encode_address_rational_by_8371(add(_14, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\" */ expr_2), _14), _14, /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4)\n                /// @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\"\n                if iszero(_15) { revert_forward() }\n                if _15\n                {\n                    let _16 := /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4\n                    /// @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\"\n                    if gt(/** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4, /** @src 8:2264:2301  \"_srcToken.approve(address(router), 0)\" */ returndatasize()) { _16 := returndatasize() }\n                    finalize_allocation(_14, _16)\n                    pop(abi_decode_bool_fromMemory(_14, add(_14, _16)))\n                }\n                /// @src 8:2337:2356  \"baseToken.balanceOf\"\n                let expr_address_2 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:1697:1706  \"baseToken\" */ 0x06)))\n                /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                let _17 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(_1)\n                /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                mstore(_17, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)\n                /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                let _18 := staticcall(gas(), expr_address_2, _17, sub(abi_encode_address(add(_17, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:1725:1729  \"this\" */ address()), /** @src 8:2337:2371  \"baseToken.balanceOf(address(this))\" */ _17), _17, /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4)\n                /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                if iszero(_18) { revert_forward() }\n                let expr_3 := /** @src -1:-1:-1 */ 0\n                /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                if _18\n                {\n                    let _19 := /** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4\n                    /// @src 8:2337:2371  \"baseToken.balanceOf(address(this))\"\n                    if gt(/** @src 8:1697:1731  \"baseToken.balanceOf(address(this))\" */ _4, /** @src 8:2337:2371  \"baseToken.balanceOf(address(this))\" */ returndatasize()) { _19 := returndatasize() }\n                    finalize_allocation(_17, _19)\n                    expr_3 := abi_decode_uint256_fromMemory(_17, add(_17, _19))\n                }\n                /// @src 8:2337:2388  \"baseToken.balanceOf(address(this)) - beforeTransfer\"\n                let expr_4 := checked_sub_uint256(expr_3, expr)\n                /// @src 8:2490:2495  \"share\"\n                fun_mint(/** @src 8:1768:1778  \"msg.sender\" */ caller(), /** @src 8:2414:2462  \"baseTokenAmount * totalSupply() / beforeTransfer\" */ checked_div_uint256(/** @src 8:2414:2445  \"baseTokenAmount * totalSupply()\" */ checked_mul_uint256(expr_4, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 8:1851:1852  \"2\" */ 0x02)), /** @src 8:2414:2462  \"baseTokenAmount * totalSupply() / beforeTransfer\" */ expr))\n                /// @src 0:2292:2293  \"_\"\n                fun_nonReentrantAfter()\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(mload(_1), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(headStart, length), 64), 0)\n                }\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function external_fun_name()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let memPtr := mload(64)\n                let ret := _1\n                let slotValue := sload(/** @src 1:2240:2245  \"_name\" */ 0x03)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let length := _1\n                let _2 := 1\n                length := shr(_2, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _2)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _3 := 32\n                if eq(outOfPlaceEncoding, lt(length, _3))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(_1, 0x24)\n                }\n                let pos := array_storeLengthForEncoding_string(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, _3)\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage()\n                    let i := _1\n                    for { } lt(i, length) { i := add(i, _3) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function abi_encode_bool(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function external_fun_approve()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                /// @src 1:4593:4599  \"amount\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:4593:4599  \"amount\" */ value, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ calldataload(36))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:4617:4621  \"true\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(memPos, 32)\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, value0)\n            }\n            function external_fun_totalSupply()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let _1 := sload(/** @src 1:3329:3341  \"_totalSupply\" */ 0x02)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_transferFrom()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 96)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                let value_1 := calldataload(36)\n                validator_revert_contract_ERC20(value_1)\n                let value2 := calldataload(68)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(value, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 64), /** @src 7:719:729  \"msg.sender\" */ caller()))\n                /// @src 1:11347:11590  \"if (currentAllowance != type(uint256).max) {...\"\n                if /** @src 1:11351:11388  \"currentAllowance != type(uint256).max\" */ iszero(eq(_1, /** @src 1:11371:11388  \"type(uint256).max\" */ not(0)))\n                /// @src 1:11347:11590  \"if (currentAllowance != type(uint256).max) {...\"\n                {\n                    /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                    if /** @src 1:11412:11438  \"currentAllowance >= amount\" */ lt(_1, value2)\n                    /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                    {\n                        let memPtr := mload(64)\n                        mstore(memPtr, shl(229, 4594637))\n                        mstore(add(memPtr, 4), 32)\n                        mstore(add(memPtr, 36), 29)\n                        mstore(add(memPtr, 68), \"ERC20: insufficient allowance\")\n                        revert(memPtr, 100)\n                    }\n                    /// @src 1:11539:11564  \"currentAllowance - amount\"\n                    fun_approve(value, /** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(/** @src 1:11539:11564  \"currentAllowance - amount\" */ _1, value2))\n                }\n                /// @src 1:5441:5447  \"amount\"\n                fun_transfer(value, value_1, value2)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos), memPos))\n            }\n            function external_fun_amountToShare()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let ret := fun_amountToShare(calldataload(4))\n                let memPos := mload(64)\n                mstore(memPos, ret)\n                return(memPos, 32)\n            }\n            function external_fun_shareToAmount()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let ret := fun_shareToAmount(calldataload(4))\n                let memPos := mload(64)\n                mstore(memPos, ret)\n                return(memPos, 32)\n            }\n            function external_fun_withdraw()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value0 := calldataload(4)\n                /// @src 0:2227:2330  \"modifier nonReentrant() {...\"\n                fun_nonReentrantBefore()\n                /// @src 8:2654:2675  \"shareToAmount(_share)\"\n                let expr := fun_shareToAmount(value0)\n                /// @src 8:2703:2709  \"_share\"\n                fun_burn(/** @src 8:2691:2701  \"msg.sender\" */ caller(), /** @src 8:2703:2709  \"_share\" */ value0)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := and(sload(/** @src 8:2720:2729  \"baseToken\" */ 0x06), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 5:902:960  \"abi.encodeWithSelector(token.transfer.selector, to, value)\"\n                let expr_mpos := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 5:902:960  \"abi.encodeWithSelector(token.transfer.selector, to, value)\"\n                mstore(add(expr_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 32), shl(224, 0xa9059cbb))\n                /// @src 5:902:960  \"abi.encodeWithSelector(token.transfer.selector, to, value)\"\n                let _1 := sub(abi_encode_address_uint256(add(expr_mpos, 36), /** @src 8:2691:2701  \"msg.sender\" */ caller(), /** @src 5:902:960  \"abi.encodeWithSelector(token.transfer.selector, to, value)\" */ expr), expr_mpos)\n                mstore(expr_mpos, add(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ not(31)))\n                /// @src 5:902:960  \"abi.encodeWithSelector(token.transfer.selector, to, value)\"\n                finalize_allocation(expr_mpos, _1)\n                fun_callOptionalReturn(value, expr_mpos)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(/** @src 0:2809:2831  \"_status = _NOT_ENTERED\" */ 0x05, /** @src 0:1716:1717  \"1\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(mload(64), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function external_fun_decimals()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:3173:3175  \"18\" */ 0x12)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(memPos, 32)\n            }\n            function external_fun_work()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                /// @src 0:2227:2330  \"modifier nonReentrant() {...\"\n                fun_nonReentrantBefore()\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(/** @src 0:2809:2831  \"_status = _NOT_ENTERED\" */ 0x05, /** @src 0:1716:1717  \"1\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(mload(64), 0)\n            }\n            function external_fun_increaseAllowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:719:729  \"msg.sender\" */ caller())\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 1:6038:6076  \"allowance(owner, spender) + addedValue\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:6038:6076  \"allowance(owner, spender) + addedValue\" */ value, checked_add_uint256(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 64), /** @src 1:6038:6063  \"allowance(owner, spender)\" */ value)), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ calldataload(36)))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(memPos, 32)\n            }\n            function external_fun_balanceOf()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(value, sub(shl(160, 1), 1)))\n                mstore(32, /** @src -1:-1:-1 */ 0)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x40))\n                let memPos := mload(0x40)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_withdrawAndSwap()\n            {\n                if callvalue() { revert(0, 0) }\n                let param, param_1, param_2 := abi_decode_uint256t_contract_ERC20t_uint256(calldatasize())\n                /// @src 0:2227:2330  \"modifier nonReentrant() {...\"\n                fun_nonReentrantBefore()\n                /// @src 8:2989:3010  \"shareToAmount(_share)\"\n                let expr := fun_shareToAmount(param)\n                /// @src 8:3044:3060  \"new address[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_address_dyn()\n                /// @src 8:3080:3098  \"address(baseToken)\"\n                let _1 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:3088:3097  \"baseToken\" */ 0x06)))\n                /// @src 8:3070:3098  \"path[0] = address(baseToken)\"\n                write_to_memory_address(memory_array_index_access_address_dyn(expr_mpos), /** @src 8:3080:3098  \"address(baseToken)\" */ _1)\n                /// @src 8:3108:3137  \"path[1] = address(_destToken)\"\n                write_to_memory_address(memory_array_index_access_address_dyn_8369(expr_mpos), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(/** @src 8:3118:3137  \"address(_destToken)\" */ param_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1)))\n                /// @src 8:3203:3218  \"address(router)\"\n                let expr_1 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:3211:3217  \"router\" */ 0x07)))\n                /// @src 8:3185:3227  \"baseToken.approve(address(router), amount)\"\n                let _2 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                let _3 := shl(224, 0x095ea7b3)\n                /// @src 8:3185:3227  \"baseToken.approve(address(router), amount)\"\n                mstore(_2, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)\n                /// @src 8:3185:3227  \"baseToken.approve(address(router), amount)\"\n                let _4 := 32\n                let _5 := sub(abi_encode_address_uint256(add(_2, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:3185:3227  \"baseToken.approve(address(router), amount)\" */ expr_1, expr), _2)\n                /// @src 8:3075:3076  \"0\"\n                let _6 := 0x00\n                /// @src 8:3185:3227  \"baseToken.approve(address(router), amount)\"\n                let _7 := call(gas(), _1, /** @src 8:3075:3076  \"0\" */ _6, /** @src 8:3185:3227  \"baseToken.approve(address(router), amount)\" */ _2, _5, _2, _4)\n                if iszero(_7) { revert_forward() }\n                if _7\n                {\n                    let _8 := _4\n                    if gt(_4, returndatasize()) { _8 := returndatasize() }\n                    finalize_allocation(_2, _8)\n                    pop(abi_decode_bool_fromMemory(_2, add(_2, _8)))\n                }\n                /// @src 8:3237:3268  \"router.swapExactTokensForTokens\"\n                let expr_address := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:3211:3217  \"router\" */ 0x07)))\n                /// @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                    revert(/** @src 8:3075:3076  \"0\" */ _6, _6)\n                }\n                /// @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\"\n                let _9 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\"\n                mstore(_9, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x38ed1739))\n                /// @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\"\n                let _10 := call(gas(), expr_address, /** @src 8:3075:3076  \"0\" */ _6, /** @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\" */ _9, sub(abi_encode_uint256_uint256_array_address_dyn_address_uint256(add(_9, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\" */ expr, param_2, expr_mpos, /** @src 8:3305:3315  \"msg.sender\" */ caller(), /** @src 8:3318:3333  \"block.timestamp\" */ timestamp()), /** @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\" */ _9), _9, /** @src 8:3075:3076  \"0\" */ _6)\n                /// @src 8:3237:3334  \"router.swapExactTokensForTokens(amount, amountOutMin, path, address(msg.sender), block.timestamp)\"\n                if iszero(_10) { revert_forward() }\n                if _10\n                {\n                    finalize_allocation_8370(_9)\n                    abi_decode(_9, _9)\n                }\n                /// @src 8:3376:3393  \"baseToken.approve\"\n                let expr_address_1 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:3088:3097  \"baseToken\" */ 0x06)))\n                /// @src 8:3394:3409  \"address(router)\"\n                let expr_2 := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:3211:3217  \"router\" */ 0x07)))\n                /// @src 8:3376:3413  \"baseToken.approve(address(router), 0)\"\n                let _11 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 8:3376:3413  \"baseToken.approve(address(router), 0)\"\n                mstore(_11, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)\n                /// @src 8:3376:3413  \"baseToken.approve(address(router), 0)\"\n                let _12 := call(gas(), expr_address_1, /** @src 8:3075:3076  \"0\" */ _6, /** @src 8:3376:3413  \"baseToken.approve(address(router), 0)\" */ _11, sub(abi_encode_address_rational_by(add(_11, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:3376:3413  \"baseToken.approve(address(router), 0)\" */ expr_2), _11), _11, /** @src 8:3185:3227  \"baseToken.approve(address(router), amount)\" */ _4)\n                /// @src 8:3376:3413  \"baseToken.approve(address(router), 0)\"\n                if iszero(_12) { revert_forward() }\n                if _12\n                {\n                    let _13 := /** @src 8:3185:3227  \"baseToken.approve(address(router), amount)\" */ _4\n                    /// @src 8:3376:3413  \"baseToken.approve(address(router), 0)\"\n                    if gt(/** @src 8:3185:3227  \"baseToken.approve(address(router), amount)\" */ _4, /** @src 8:3376:3413  \"baseToken.approve(address(router), 0)\" */ returndatasize()) { _13 := returndatasize() }\n                    finalize_allocation(_11, _13)\n                    pop(abi_decode_bool_fromMemory(_11, add(_11, _13)))\n                }\n                /// @src 8:3441:3447  \"_share\"\n                fun_burn(/** @src 8:3305:3315  \"msg.sender\" */ caller(), /** @src 8:3441:3447  \"_share\" */ param)\n                /// @src 0:2292:2293  \"_\"\n                fun_nonReentrantAfter()\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(mload(64), /** @src 8:3075:3076  \"0\" */ _6)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function external_fun_symbol()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let memPtr := mload(64)\n                let ret := _1\n                let slotValue := sload(4)\n                let length := _1\n                let _2 := 1\n                length := shr(_2, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _2)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _3 := 32\n                if eq(outOfPlaceEncoding, lt(length, _3))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(_1, 0x24)\n                }\n                let pos := array_storeLengthForEncoding_string(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, _3)\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage_8386()\n                    let i := _1\n                    for { } lt(i, length) { i := add(i, _3) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n            }\n            function external_fun_decreaseAllowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                let value1 := calldataload(36)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:719:729  \"msg.sender\" */ caller())\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 64), /** @src 1:6766:6791  \"allowance(owner, spender)\" */ value))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                if /** @src 1:6809:6844  \"currentAllowance >= subtractedValue\" */ lt(_1, value1)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 37)\n                    mstore(add(memPtr, 68), \"ERC20: decreased allowance below\")\n                    mstore(add(memPtr, 100), \" zero\")\n                    revert(memPtr, 132)\n                }\n                /// @src 1:6945:6979  \"currentAllowance - subtractedValue\"\n                fun_approve(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:6945:6979  \"currentAllowance - subtractedValue\" */ value, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(/** @src 1:6945:6979  \"currentAllowance - subtractedValue\" */ _1, value1))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_bool(memPos), memPos))\n            }\n            function external_fun_transfer()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                /// @src 1:3881:3887  \"amount\"\n                fun_transfer(/** @src 7:719:729  \"msg.sender\" */ caller(), /** @src 1:3881:3887  \"amount\" */ value, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ calldataload(36))\n                let memPos := mload(64)\n                mstore(memPos, /** @src 1:3905:3909  \"true\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(memPos, 32)\n            }\n            function external_fun_deposit()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 32)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value0 := calldataload(4)\n                /// @src 0:2227:2330  \"modifier nonReentrant() {...\"\n                fun_nonReentrantBefore()\n                /// @src 8:1257:1276  \"baseToken.balanceOf\"\n                let expr_address := convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:1257:1266  \"baseToken\" */ 0x06)))\n                /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                let _1 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                mstore(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x70a08231))\n                /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                let _2 := staticcall(gas(), expr_address, _1, sub(abi_encode_address(add(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 4), /** @src 8:1285:1289  \"this\" */ address()), /** @src 8:1257:1291  \"baseToken.balanceOf(address(this))\" */ _1), _1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 32)\n                /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                if iszero(_2) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                if _2\n                {\n                    let _3 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 32\n                    /// @src 8:1257:1291  \"baseToken.balanceOf(address(this))\"\n                    if gt(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3, /** @src 8:1257:1291  \"baseToken.balanceOf(address(this))\" */ returndatasize()) { _3 := returndatasize() }\n                    finalize_allocation(_1, _3)\n                    expr := abi_decode_uint256_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 8:1317:1362  \"total == 0 ? _amount : amountToShare(_amount)\"\n                let expr_1 := /** @src -1:-1:-1 */ 0\n                /// @src 8:1317:1362  \"total == 0 ? _amount : amountToShare(_amount)\"\n                switch /** @src 8:1317:1327  \"total == 0\" */ iszero(expr)\n                case /** @src 8:1317:1362  \"total == 0 ? _amount : amountToShare(_amount)\" */ 0 {\n                    expr_1 := /** @src 8:1340:1362  \"amountToShare(_amount)\" */ fun_amountToShare(value0)\n                }\n                default /// @src 8:1317:1362  \"total == 0 ? _amount : amountToShare(_amount)\"\n                { expr_1 := value0 }\n                /// @src 8:1390:1395  \"share\"\n                fun_mint(/** @src 8:1378:1388  \"msg.sender\" */ caller(), /** @src 8:1390:1395  \"share\" */ expr_1)\n                /// @src 8:1460:1467  \"_amount\"\n                fun_safeTransferFrom(/** @src 8:1406:1432  \"baseToken.safeTransferFrom\" */ convert_contract_ERC20_to_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ convert_contract_ERC20_to_address(sload(/** @src 8:1257:1266  \"baseToken\" */ 0x06))), /** @src 8:1378:1388  \"msg.sender\" */ caller(), /** @src 8:1285:1289  \"this\" */ address(), /** @src 8:1460:1467  \"_amount\" */ value0)\n                /// @src 0:2292:2293  \"_\"\n                fun_nonReentrantAfter()\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                return(mload(64), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function convert_contract_ERC20_to_address(value) -> converted\n            {\n                converted := and(value, sub(shl(160, 1), 1))\n            }\n            function external_fun_baseToken()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 8:599:621  \"ERC20 public baseToken\" */ 6), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_allowance()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 64)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := calldataload(4)\n                validator_revert_contract_ERC20(value)\n                let value_1 := calldataload(36)\n                validator_revert_contract_ERC20(value_1)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(value, sub(shl(160, 1), 1)))\n                mstore(32, /** @src 1:4089:4100  \"_allowances\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sload(/** @src 1:4089:4116  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 64), value_1))\n                let memPos := mload(64)\n                mstore(memPos, _1)\n                return(memPos, 32)\n            }\n            function external_fun_router()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 8:627:648  \"IRouter public router\" */ 7), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function array_dataslot_string_storage() -> data\n            {\n                mstore(0, /** @src 1:2240:2245  \"_name\" */ 0x03)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                data := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n            }\n            function array_dataslot_string_storage_8386() -> data\n            {\n                mstore(0, 4)\n                data := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_8370(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff) { panic_error_0x41() }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_12060(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address_8391(key) -> dataSlot\n            {\n                mstore(/** @src 1:7615:7616  \"0\" */ 0x00, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:7615:7616  \"0\" */ 0x00)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                dataSlot := keccak256(/** @src 1:7615:7616  \"0\" */ 0x00, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x40)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address_8394(key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 1:10784:10795  \"_allowances\" */ 0x01)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                dataSlot := keccak256(0, 0x40)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                if gt(x, not(y)) { panic_error_0x11() }\n                sum := add(x, y)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 35)\n                    mstore(add(memPtr, 68), \"ERC20: transfer to the zero addr\")\n                    mstore(add(memPtr, 100), \"ess\")\n                    revert(memPtr, 132)\n                }\n            }\n            function require_helper_stringliteral_4107(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 38)\n                    mstore(add(memPtr, 68), \"ERC20: transfer amount exceeds b\")\n                    mstore(add(memPtr, 100), \"alance\")\n                    revert(memPtr, 132)\n                }\n            }\n            function update_storage_value_offsett_uint256_to_uint256(value)\n            {\n                sstore(/** @src 1:8778:8800  \"_totalSupply += amount\" */ 0x02, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ value)\n            }\n            /// @ast-id 400 @src 1:7473:8291  \"function _transfer(...\"\n            function fun_transfer(var_from, var_to, var_amount)\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 1:7599:7617  \"from != address(0)\" */ var_from, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                if /** @src 1:7599:7617  \"from != address(0)\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _2)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 37)\n                    mstore(add(memPtr, 68), \"ERC20: transfer from the zero ad\")\n                    mstore(add(memPtr, 100), \"dress\")\n                    revert(memPtr, 132)\n                }\n                let _3 := and(/** @src 1:7677:7693  \"to != address(0)\" */ var_to, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                /// @src 1:7669:7733  \"require(to != address(0), \\\"ERC20: transfer to the zero address\\\")\"\n                require_helper_stringliteral(/** @src 1:7677:7693  \"to != address(0)\" */ iszero(iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)))\n                let _4 := sload(/** @src 1:7815:7830  \"_balances[from]\" */ mapping_index_access_mapping_address_uint256_of_address_8391(var_from))\n                /// @src 1:7840:7912  \"require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\")\"\n                require_helper_stringliteral_4107(/** @src 1:7848:7869  \"fromBalance >= amount\" */ iszero(lt(_4, var_amount)))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(/** @src 1:7946:7961  \"_balances[from]\" */ mapping_index_access_mapping_address_uint256_of_address_8391(var_from), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(/** @src 1:7964:7984  \"fromBalance - amount\" */ _4, var_amount))\n                /// @src 1:8161:8174  \"_balances[to]\"\n                let _5 := mapping_index_access_mapping_address_uint256_of_address_8391(var_to)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(_5, add(sload(/** @src 1:8161:8184  \"_balances[to] += amount\" */ _5), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ var_amount))\n                /// @src 1:8210:8236  \"Transfer(from, to, amount)\"\n                let _6 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 1:8210:8236  \"Transfer(from, to, amount)\"\n                log3(_6, sub(abi_encode_uint256(_6, var_amount), _6), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _3)\n            }\n            /// @ast-id 574 @src 1:10504:10874  \"function _approve(...\"\n            function fun_approve(var_owner, var_spender, var_amount)\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 1:10635:10654  \"owner != address(0)\" */ var_owner, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                if /** @src 1:10635:10654  \"owner != address(0)\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _2)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 36)\n                    mstore(add(memPtr, 68), \"ERC20: approve from the zero add\")\n                    mstore(add(memPtr, 100), \"ress\")\n                    revert(memPtr, 132)\n                }\n                let _3 := and(/** @src 1:10713:10734  \"spender != address(0)\" */ var_spender, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                if /** @src 1:10713:10734  \"spender != address(0)\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _3)\n                {\n                    let memPtr_1 := mload(64)\n                    mstore(memPtr_1, shl(229, 4594637))\n                    mstore(add(memPtr_1, 4), 32)\n                    mstore(add(memPtr_1, 36), 34)\n                    mstore(add(memPtr_1, 68), \"ERC20: approve to the zero addre\")\n                    mstore(add(memPtr_1, 100), \"ss\")\n                    revert(memPtr_1, 132)\n                }\n                sstore(/** @src 1:10784:10811  \"_allowances[owner][spender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 1:10784:10802  \"_allowances[owner]\" */ mapping_index_access_mapping_address_uint256_of_address_8394(var_owner), /** @src 1:10784:10811  \"_allowances[owner][spender]\" */ var_spender), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ var_amount)\n                /// @src 1:10835:10867  \"Approval(owner, spender, amount)\"\n                let _4 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 1:10835:10867  \"Approval(owner, spender, amount)\"\n                log3(_4, sub(abi_encode_uint256(_4, var_amount), _4), 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, _2, _3)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                value0 := mload(headStart)\n            }\n            function abi_encode_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n            }\n            function revert_forward()\n            {\n                let pos := mload(64)\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function checked_mul_uint256(x, y) -> product\n            {\n                if and(iszero(iszero(x)), gt(y, div(/** @src 1:11371:11388  \"type(uint256).max\" */ not(0), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ x))) { panic_error_0x11() }\n                product := mul(x, y)\n            }\n            function checked_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n            /// @ast-id 1489 @src 8:799:951  \"function shareToAmount(uint256 _share) public view returns (uint256) {...\"\n            function fun_shareToAmount(var_share) -> var\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := and(sload(/** @src 8:894:903  \"baseToken\" */ 0x06), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 8:894:928  \"baseToken.balanceOf(address(this))\"\n                let _1 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 8:894:928  \"baseToken.balanceOf(address(this))\"\n                mstore(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x70a08231))\n                mstore(/** @src 8:894:928  \"baseToken.balanceOf(address(this))\" */ add(_1, 4), /** @src 8:922:926  \"this\" */ address())\n                /// @src 8:894:928  \"baseToken.balanceOf(address(this))\"\n                let _2 := staticcall(gas(), value, _1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 36, /** @src 8:894:928  \"baseToken.balanceOf(address(this))\" */ _1, 32)\n                if iszero(_2) { revert_forward() }\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 8:894:928  \"baseToken.balanceOf(address(this))\"\n                if _2\n                {\n                    let _3 := 32\n                    if gt(_3, returndatasize()) { _3 := returndatasize() }\n                    finalize_allocation(_1, _3)\n                    expr := abi_decode_uint256_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 8:885:928  \"_share * baseToken.balanceOf(address(this))\"\n                let expr_1 := checked_mul_uint256(var_share, expr)\n                /// @src 8:878:944  \"return _share * baseToken.balanceOf(address(this)) / totalSupply()\"\n                var := /** @src 8:885:944  \"_share * baseToken.balanceOf(address(this)) / totalSupply()\" */ checked_div_uint256(expr_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 1:3329:3341  \"_totalSupply\" */ 0x02))\n            }\n            /// @ast-id 1510 @src 8:957:1111  \"function amountToShare(uint256 _amount) public view returns (uint256) {...\"\n            function fun_amountToShare(var_amount) -> var\n            {\n                /// @src 8:1044:1067  \"_amount * totalSupply()\"\n                let expr := checked_mul_uint256(var_amount, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 1:3329:3341  \"_totalSupply\" */ 0x02))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let value := and(sload(/** @src 8:1070:1079  \"baseToken\" */ 0x06), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 8:1070:1104  \"baseToken.balanceOf(address(this))\"\n                let _1 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 8:1070:1104  \"baseToken.balanceOf(address(this))\"\n                mstore(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x70a08231))\n                mstore(/** @src 8:1070:1104  \"baseToken.balanceOf(address(this))\" */ add(_1, 4), /** @src 8:1098:1102  \"this\" */ address())\n                /// @src 8:1070:1104  \"baseToken.balanceOf(address(this))\"\n                let _2 := staticcall(gas(), value, _1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 36, /** @src 8:1070:1104  \"baseToken.balanceOf(address(this))\" */ _1, 32)\n                if iszero(_2) { revert_forward() }\n                let expr_1 := /** @src -1:-1:-1 */ 0\n                /// @src 8:1070:1104  \"baseToken.balanceOf(address(this))\"\n                if _2\n                {\n                    let _3 := 32\n                    if gt(_3, returndatasize()) { _3 := returndatasize() }\n                    finalize_allocation(_1, _3)\n                    expr_1 := abi_decode_uint256_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 8:1037:1104  \"return _amount * totalSupply() / baseToken.balanceOf(address(this))\"\n                var := /** @src 8:1044:1104  \"_amount * totalSupply() / baseToken.balanceOf(address(this))\" */ checked_div_uint256(expr, expr_1)\n            }\n            /// @ast-id 44 @src 0:2336:2623  \"function _nonReentrantBefore() private {...\"\n            function fun_nonReentrantBefore()\n            {\n                /// @src 0:1759:1760  \"2\"\n                if /** @src 0:2468:2487  \"_status != _ENTERED\" */ eq(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 0:2468:2475  \"_status\" */ 0x05), /** @src 0:1759:1760  \"2\" */ 0x02)\n                {\n                    let memPtr := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                    /// @src 0:1759:1760  \"2\"\n                    mstore(memPtr, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(229, 4594637))\n                    /// @src 0:1759:1760  \"2\"\n                    mstore(add(memPtr, 4), 32)\n                    /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                    mstore(/** @src 0:1759:1760  \"2\" */ add(memPtr, 36), 31)\n                    mstore(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ add(/** @src 0:1759:1760  \"2\" */ memPtr, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 68), /** @src 0:1759:1760  \"2\" */ \"ReentrancyGuard: reentrant call\")\n                    revert(memPtr, 100)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(/** @src 0:2468:2475  \"_status\" */ 0x05, /** @src 0:1759:1760  \"2\" */ 0x02)\n            }\n            /// @ast-id 52 @src 0:2629:2838  \"function _nonReentrantAfter() private {...\"\n            function fun_nonReentrantAfter()\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(/** @src 0:2809:2831  \"_status = _NOT_ENTERED\" */ 0x05, /** @src 0:1716:1717  \"1\" */ 0x01)\n            }\n            /// @ast-id 457 @src 1:8567:9102  \"function _mint(address account, uint256 amount) internal virtual {...\"\n            function fun_mint(var_account, var_amount)\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := and(/** @src 1:8650:8671  \"account != address(0)\" */ var_account, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                if /** @src 1:8650:8671  \"account != address(0)\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 31)\n                    mstore(add(memPtr, 68), \"ERC20: mint to the zero address\")\n                    revert(memPtr, 100)\n                }\n                sstore(/** @src 1:8778:8800  \"_totalSupply += amount\" */ 0x02, checked_add_uint256(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sload(/** @src 1:8778:8800  \"_totalSupply += amount\" */ 0x02), var_amount))\n                /// @src 1:8946:8964  \"_balances[account]\"\n                let _2 := mapping_index_access_mapping_address_uint256_of_address_8391(var_account)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                sstore(_2, add(sload(/** @src 1:8946:8974  \"_balances[account] += amount\" */ _2), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ var_amount))\n                /// @src 1:8999:9036  \"Transfer(address(0), account, amount)\"\n                let _3 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                mstore(_3, var_amount)\n                /// @src 1:8999:9036  \"Transfer(address(0), account, amount)\"\n                log3(_3, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 32, /** @src 1:8999:9036  \"Transfer(address(0), account, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 1:8669:8670  \"0\" */ 0x00, /** @src 1:8999:9036  \"Transfer(address(0), account, amount)\" */ _1)\n            }\n            /// @ast-id 837 @src 5:974:1215  \"function safeTransferFrom(...\"\n            function fun_safeTransferFrom(var_token_814_address, var_from, var_to, var_value)\n            {\n                /// @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\"\n                let expr_833_mpos := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\"\n                mstore(add(expr_833_mpos, 0x20), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x23b872dd))\n                let _1 := sub(shl(160, 1), 1)\n                mstore(/** @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\" */ add(expr_833_mpos, 36), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ and(var_from, _1))\n                mstore(add(/** @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\" */ expr_833_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 68), and(var_to, _1))\n                mstore(add(/** @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\" */ expr_833_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 100), var_value)\n                /// @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\"\n                mstore(expr_833_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 100)\n                let newFreePtr := add(expr_833_mpos, 160)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_833_mpos)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n                /// @src 5:1139:1207  \"abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\"\n                fun_callOptionalReturn(var_token_814_address, expr_833_mpos)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, iszero(iszero(value))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                value0 := value\n            }\n            function require_helper_stringliteral_e11a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 42)\n                    mstore(add(memPtr, 68), \"SafeERC20: ERC20 operation did n\")\n                    mstore(add(memPtr, 100), \"ot succeed\")\n                    revert(memPtr, 132)\n                }\n            }\n            /// @ast-id 1059 @src 5:3747:4453  \"function _callOptionalReturn(IERC20 token, bytes memory data) private {...\"\n            function fun_callOptionalReturn(var_token_address, var_data_mpos)\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := and(/** @src 5:4192:4206  \"address(token)\" */ var_token_address, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                let memPtr := mload(64)\n                finalize_allocation_12060(memPtr)\n                let _2 := 32\n                mstore(memPtr, _2)\n                mstore(add(memPtr, _2), \"SafeERC20: low-level call failed\")\n                /// @src 6:5282:5313  \"target.call{value: value}(data)\"\n                let expr_component := call(gas(), _1, /** @src -1:-1:-1 */ 0, /** @src 6:5282:5313  \"target.call{value: value}(data)\" */ add(var_data_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _2), /** @src 6:5282:5313  \"target.call{value: value}(data)\" */ mload(var_data_mpos), /** @src -1:-1:-1 */ 0, 0)\n                /// @src 6:5282:5313  \"target.call{value: value}(data)\"\n                let data := /** @src -1:-1:-1 */ 0\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _3 := returndatasize()\n                    if gt(_3, 0xffffffffffffffff) { panic_error_0x41() }\n                    let memPtr_1 := mload(64)\n                    finalize_allocation(memPtr_1, add(and(add(_3, 31), not(31)), _2))\n                    mstore(memPtr_1, _3)\n                    data := memPtr_1\n                    returndatacopy(add(memPtr_1, _2), /** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ returndatasize())\n                }\n                /// @src 6:5323:5399  \"return verifyCallResultFromTarget(target, success, returndata, errorMessage)\"\n                let var_mpos := /** @src 6:5330:5399  \"verifyCallResultFromTarget(target, success, returndata, errorMessage)\" */ fun_verifyCallResultFromTarget(_1, expr_component, /** @src 6:5282:5313  \"target.call{value: value}(data)\" */ data, /** @src 6:5330:5399  \"verifyCallResultFromTarget(target, success, returndata, errorMessage)\" */ memPtr)\n                /// @src 5:4275:4292  \"returndata.length\"\n                let expr := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(/** @src 5:4275:4292  \"returndata.length\" */ var_mpos)\n                /// @src 5:4271:4447  \"if (returndata.length > 0) {...\"\n                if /** @src 5:4275:4296  \"returndata.length > 0\" */ iszero(iszero(expr))\n                /// @src 5:4271:4447  \"if (returndata.length > 0) {...\"\n                {\n                    /// @src 5:4351:4436  \"require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\")\"\n                    require_helper_stringliteral_e11a(/** @src 5:4359:4389  \"abi.decode(returndata, (bool))\" */ abi_decode_bool_fromMemory(add(var_mpos, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _2), /** @src 5:4359:4389  \"abi.decode(returndata, (bool))\" */ add(add(var_mpos, expr), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _2)))\n                }\n            }\n            /// @ast-id 1345 @src 6:7466:8094  \"function verifyCallResultFromTarget(...\"\n            function fun_verifyCallResultFromTarget(var_target, var_success, var_returndata_mpos, var_errorMessage_mpos) -> var_mpos\n            {\n                /// @src 6:7646:7658  \"bytes memory\"\n                var_mpos := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 96\n                /// @src 6:7670:8088  \"if (success) {...\"\n                switch var_success\n                case 0 {\n                    /// @src 6:8771:9150  \"if (returndata.length > 0) {...\"\n                    switch /** @src 6:8775:8796  \"returndata.length > 0\" */ iszero(iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(/** @src 6:8775:8792  \"returndata.length\" */ var_returndata_mpos)))\n                    case /** @src 6:8771:9150  \"if (returndata.length > 0) {...\" */ 0 {\n                        /// @src 6:9119:9139  \"revert(errorMessage)\"\n                        let _1 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                        /// @src 6:9119:9139  \"revert(errorMessage)\"\n                        mstore(_1, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(229, 4594637))\n                        /// @src 6:9119:9139  \"revert(errorMessage)\"\n                        revert(_1, sub(abi_encode_string(add(_1, 4), var_errorMessage_mpos), _1))\n                    }\n                    default /// @src 6:8771:9150  \"if (returndata.length > 0) {...\"\n                    {\n                        /// @src 6:8947:9089  \"assembly {...\"\n                        revert(add(32, var_returndata_mpos), mload(var_returndata_mpos))\n                    }\n                }\n                default /// @src 6:7670:8088  \"if (success) {...\"\n                {\n                    /// @src 6:7697:7983  \"if (returndata.length == 0) {...\"\n                    if /** @src 6:7701:7723  \"returndata.length == 0\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(/** @src 6:7701:7718  \"returndata.length\" */ var_returndata_mpos))\n                    /// @src 6:7697:7983  \"if (returndata.length == 0) {...\"\n                    {\n                        /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                        if /** @src 6:1465:1488  \"account.code.length > 0\" */ iszero(/** @src 6:1465:1484  \"account.code.length\" */ extcodesize(var_target))\n                        /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 29)\n                            mstore(add(memPtr, 68), \"Address: call to non-contract\")\n                            revert(memPtr, 100)\n                        }\n                    }\n                    /// @src 6:7996:8013  \"return returndata\"\n                    var_mpos := var_returndata_mpos\n                    leave\n                }\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function allocate_and_zero_memory_array_array_address_dyn() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                let newFreePtr := add(memPtr_1, 96)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n                mstore(memPtr_1, /** @src 8:1851:1852  \"2\" */ 0x02)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 0x20), calldatasize(), 64)\n            }\n            function memory_array_index_access_address_dyn_8368(baseRef) -> addr\n            {\n                if iszero(mload(baseRef))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            function memory_array_index_access_address_dyn_8369(baseRef) -> addr\n            {\n                if iszero(lt(/** @src 8:1906:1907  \"1\" */ 0x01, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(baseRef)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, 64)\n            }\n            function memory_array_index_access_address_dyn(baseRef) -> addr\n            {\n                if iszero(mload(baseRef))\n                {\n                    mstore(/** @src 8:3075:3076  \"0\" */ 0x00, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(/** @src 8:3075:3076  \"0\" */ 0x00, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, and(value, sub(shl(160, 1), 1)))\n            }\n            function abi_encode_address_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), value1)\n            }\n            function abi_encode_uint256_uint256_array_address_dyn_address_uint256(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                let tail_1 := add(headStart, 160)\n                mstore(headStart, value0)\n                let _1 := 32\n                mstore(add(headStart, _1), value1)\n                mstore(add(headStart, 64), 160)\n                let pos := tail_1\n                let length := mload(value2)\n                mstore(tail_1, length)\n                pos := add(headStart, 192)\n                let srcPtr := add(value2, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n                mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 128), value4)\n            }\n            function abi_encode_address_rational_by_8371(headStart, value0) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), /** @src -1:-1:-1 */ 0)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function abi_encode_address_rational_by(headStart, value0) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), /** @src 8:3075:3076  \"0\" */ 0x00)\n            }\n            /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n            function checked_sub_uint256(x, y) -> diff\n            {\n                if lt(x, y) { panic_error_0x11() }\n                diff := sub(x, y)\n            }\n            /// @ast-id 529 @src 1:9422:10081  \"function _burn(address account, uint256 amount) internal virtual {...\"\n            function fun_burn(var_account, var_amount)\n            {\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                let _1 := and(/** @src 1:9505:9526  \"account != address(0)\" */ var_account, /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                if /** @src 1:9505:9526  \"account != address(0)\" */ iszero(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ _1)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 33)\n                    mstore(add(memPtr, 68), \"ERC20: burn from the zero addres\")\n                    mstore(add(memPtr, 100), \"s\")\n                    revert(memPtr, 132)\n                }\n                let _2 := sload(/** @src 1:9660:9678  \"_balances[account]\" */ mapping_index_access_mapping_address_uint256_of_address_8391(var_account))\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                if /** @src 1:9696:9720  \"accountBalance >= amount\" */ lt(_2, var_amount)\n                /// @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\"\n                {\n                    let memPtr_1 := mload(64)\n                    mstore(memPtr_1, shl(229, 4594637))\n                    mstore(add(memPtr_1, 4), 32)\n                    mstore(add(memPtr_1, 36), 34)\n                    mstore(add(memPtr_1, 68), \"ERC20: burn amount exceeds balan\")\n                    mstore(add(memPtr_1, 100), \"ce\")\n                    revert(memPtr_1, 132)\n                }\n                sstore(/** @src 1:9793:9811  \"_balances[account]\" */ mapping_index_access_mapping_address_uint256_of_address_8391(var_account), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(/** @src 1:9814:9837  \"accountBalance - amount\" */ _2, var_amount))\n                /// @src 1:9930:9952  \"_totalSupply -= amount\"\n                update_storage_value_offsett_uint256_to_uint256(/** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ sub(sload(/** @src 1:9930:9952  \"_totalSupply -= amount\" */ 0x02), /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ var_amount))\n                /// @src 1:9978:10015  \"Transfer(account, address(0), amount)\"\n                let _3 := /** @src 8:520:3639  \"contract Vault is ERC20, ReentrancyGuard {...\" */ mload(64)\n                /// @src 1:9978:10015  \"Transfer(account, address(0), amount)\"\n                log3(_3, sub(abi_encode_uint256(_3, var_amount), _3), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, /** @src 1:9524:9525  \"0\" */ 0x00)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212205e2055df6dc23b40358090057f62d99c8928863b5cc3400264605b12fea5540564736f6c634300080d0033\"\n    }\n}\n",
        "hash": "010004053af742247f960caed23d11a649bcea8b83d6242ea540a28b358bcdec",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
        "exportedSymbols": {
          "ReentrancyGuard": [
            53
          ]
        },
        "id": 54,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "112:23:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "ReentrancyGuard",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 2,
              "nodeType": "StructuredDocumentation",
              "src": "137:750:0",
              "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
            },
            "fullyImplemented": true,
            "id": 53,
            "linearizedBaseContracts": [
              53
            ],
            "name": "ReentrancyGuard",
            "nameLocation": "906:15:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "id": 5,
                "mutability": "constant",
                "name": "_NOT_ENTERED",
                "nameLocation": "1701:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 53,
                "src": "1676:41:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 3,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1676:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "31",
                  "id": 4,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1716:1:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 8,
                "mutability": "constant",
                "name": "_ENTERED",
                "nameLocation": "1748:8:0",
                "nodeType": "VariableDeclaration",
                "scope": 53,
                "src": "1723:37:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1723:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "32",
                  "id": 7,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1759:1:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "mutable",
                "name": "_status",
                "nameLocation": "1783:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 53,
                "src": "1767:23:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 9,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1767:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 17,
                  "nodeType": "Block",
                  "src": "1811:39:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 13,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "1821:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 14,
                          "name": "_NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "1831:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1821:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 16,
                      "nodeType": "ExpressionStatement",
                      "src": "1821:22:0"
                    }
                  ]
                },
                "id": 18,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 11,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1808:2:0"
                },
                "returnParameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1811:0:0"
                },
                "scope": 53,
                "src": "1797:53:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 28,
                  "nodeType": "Block",
                  "src": "2251:79:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 21,
                          "name": "_nonReentrantBefore",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "2261:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 22,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2261:21:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 23,
                      "nodeType": "ExpressionStatement",
                      "src": "2261:21:0"
                    },
                    {
                      "id": 24,
                      "nodeType": "PlaceholderStatement",
                      "src": "2292:1:0"
                    },
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 25,
                          "name": "_nonReentrantAfter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 52,
                          "src": "2303:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2303:20:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 27,
                      "nodeType": "ExpressionStatement",
                      "src": "2303:20:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 19,
                  "nodeType": "StructuredDocumentation",
                  "src": "1856:366:0",
                  "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
                },
                "id": 29,
                "name": "nonReentrant",
                "nameLocation": "2236:12:0",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 20,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2248:2:0"
                },
                "src": "2227:103:0",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 43,
                  "nodeType": "Block",
                  "src": "2375:248:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 35,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 33,
                              "name": "_status",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "2468:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "id": 34,
                              "name": "_ENTERED",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8,
                              "src": "2479:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2468:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                            "id": 36,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2489:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                              "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                            },
                            "value": "ReentrancyGuard: reentrant call"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                              "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                            }
                          ],
                          "id": 32,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "2460:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2460:63:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 38,
                      "nodeType": "ExpressionStatement",
                      "src": "2460:63:0"
                    },
                    {
                      "expression": {
                        "id": 41,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 39,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "2598:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 40,
                          "name": "_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "2608:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2598:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 42,
                      "nodeType": "ExpressionStatement",
                      "src": "2598:18:0"
                    }
                  ]
                },
                "id": 44,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_nonReentrantBefore",
                "nameLocation": "2345:19:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 30,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2364:2:0"
                },
                "returnParameters": {
                  "id": 31,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2375:0:0"
                },
                "scope": 53,
                "src": "2336:287:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 51,
                  "nodeType": "Block",
                  "src": "2667:171:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 47,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10,
                          "src": "2809:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 48,
                          "name": "_NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "2819:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2809:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 50,
                      "nodeType": "ExpressionStatement",
                      "src": "2809:22:0"
                    }
                  ]
                },
                "id": 52,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_nonReentrantAfter",
                "nameLocation": "2638:18:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 45,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2656:2:0"
                },
                "returnParameters": {
                  "id": 46,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2667:0:0"
                },
                "scope": 53,
                "src": "2629:209:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              }
            ],
            "scope": 54,
            "src": "888:1952:0",
            "usedErrors": []
          }
        ],
        "src": "112:2729:0"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "exportedSymbols": {
          "Context": [
            1412
          ],
          "ERC20": [
            640
          ],
          "IERC20": [
            718
          ],
          "IERC20Metadata": [
            743
          ]
        },
        "id": 641,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 55,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "105:23:1"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "file": "./IERC20.sol",
            "id": 56,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 641,
            "sourceUnit": 719,
            "src": "130:22:1",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
            "file": "./extensions/IERC20Metadata.sol",
            "id": 57,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 641,
            "sourceUnit": 744,
            "src": "153:41:1",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../../utils/Context.sol",
            "id": 58,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 641,
            "sourceUnit": 1413,
            "src": "195:33:1",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 60,
                  "name": "Context",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1412,
                  "src": "1419:7:1"
                },
                "id": 61,
                "nodeType": "InheritanceSpecifier",
                "src": "1419:7:1"
              },
              {
                "baseName": {
                  "id": 62,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 718,
                  "src": "1428:6:1"
                },
                "id": 63,
                "nodeType": "InheritanceSpecifier",
                "src": "1428:6:1"
              },
              {
                "baseName": {
                  "id": 64,
                  "name": "IERC20Metadata",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 743,
                  "src": "1436:14:1"
                },
                "id": 65,
                "nodeType": "InheritanceSpecifier",
                "src": "1436:14:1"
              }
            ],
            "canonicalName": "ERC20",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 59,
              "nodeType": "StructuredDocumentation",
              "src": "230:1170:1",
              "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
            },
            "fullyImplemented": true,
            "id": 640,
            "linearizedBaseContracts": [
              640,
              743,
              718,
              1412
            ],
            "name": "ERC20",
            "nameLocation": "1410:5:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 69,
                "mutability": "mutable",
                "name": "_balances",
                "nameLocation": "1493:9:1",
                "nodeType": "VariableDeclaration",
                "scope": 640,
                "src": "1457:45:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 68,
                  "keyType": {
                    "id": 66,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1465:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1457:27:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 67,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1476:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 75,
                "mutability": "mutable",
                "name": "_allowances",
                "nameLocation": "1565:11:1",
                "nodeType": "VariableDeclaration",
                "scope": 640,
                "src": "1509:67:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 74,
                  "keyType": {
                    "id": 70,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1517:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1509:47:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 73,
                    "keyType": {
                      "id": 71,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1536:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1528:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 72,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1547:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 77,
                "mutability": "mutable",
                "name": "_totalSupply",
                "nameLocation": "1599:12:1",
                "nodeType": "VariableDeclaration",
                "scope": 640,
                "src": "1583:28:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 76,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1583:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 79,
                "mutability": "mutable",
                "name": "_name",
                "nameLocation": "1633:5:1",
                "nodeType": "VariableDeclaration",
                "scope": 640,
                "src": "1618:20:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 78,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1618:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 81,
                "mutability": "mutable",
                "name": "_symbol",
                "nameLocation": "1659:7:1",
                "nodeType": "VariableDeclaration",
                "scope": 640,
                "src": "1644:22:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 80,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1644:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 97,
                  "nodeType": "Block",
                  "src": "2032:57:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 89,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79,
                          "src": "2042:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 90,
                          "name": "name_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 84,
                          "src": "2050:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "2042:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 92,
                      "nodeType": "ExpressionStatement",
                      "src": "2042:13:1"
                    },
                    {
                      "expression": {
                        "id": 95,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 93,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 81,
                          "src": "2065:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 94,
                          "name": "symbol_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "2075:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "2065:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 96,
                      "nodeType": "ExpressionStatement",
                      "src": "2065:17:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 82,
                  "nodeType": "StructuredDocumentation",
                  "src": "1673:298:1",
                  "text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
                },
                "id": 98,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 87,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 84,
                      "mutability": "mutable",
                      "name": "name_",
                      "nameLocation": "2002:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 98,
                      "src": "1988:19:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 83,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1988:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 86,
                      "mutability": "mutable",
                      "name": "symbol_",
                      "nameLocation": "2023:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 98,
                      "src": "2009:21:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 85,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2009:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1987:44:1"
                },
                "returnParameters": {
                  "id": 88,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2032:0:1"
                },
                "scope": 640,
                "src": "1976:113:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  730
                ],
                "body": {
                  "id": 107,
                  "nodeType": "Block",
                  "src": "2223:29:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 105,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "2240:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 104,
                      "id": 106,
                      "nodeType": "Return",
                      "src": "2233:12:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 99,
                  "nodeType": "StructuredDocumentation",
                  "src": "2095:54:1",
                  "text": " @dev Returns the name of the token."
                },
                "functionSelector": "06fdde03",
                "id": 108,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "name",
                "nameLocation": "2163:4:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 101,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "2190:8:1"
                },
                "parameters": {
                  "id": 100,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2167:2:1"
                },
                "returnParameters": {
                  "id": 104,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 103,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 108,
                      "src": "2208:13:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 102,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2208:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2207:15:1"
                },
                "scope": 640,
                "src": "2154:98:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  736
                ],
                "body": {
                  "id": 117,
                  "nodeType": "Block",
                  "src": "2436:31:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 115,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 81,
                        "src": "2453:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 114,
                      "id": 116,
                      "nodeType": "Return",
                      "src": "2446:14:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 109,
                  "nodeType": "StructuredDocumentation",
                  "src": "2258:102:1",
                  "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
                },
                "functionSelector": "95d89b41",
                "id": 118,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "symbol",
                "nameLocation": "2374:6:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 111,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "2403:8:1"
                },
                "parameters": {
                  "id": 110,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2380:2:1"
                },
                "returnParameters": {
                  "id": 114,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 113,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 118,
                      "src": "2421:13:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2421:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2420:15:1"
                },
                "scope": 640,
                "src": "2365:102:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  742
                ],
                "body": {
                  "id": 127,
                  "nodeType": "Block",
                  "src": "3156:26:1",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "3138",
                        "id": 125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3173:2:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        "value": "18"
                      },
                      "functionReturnParameters": 124,
                      "id": 126,
                      "nodeType": "Return",
                      "src": "3166:9:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 119,
                  "nodeType": "StructuredDocumentation",
                  "src": "2473:613:1",
                  "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
                },
                "functionSelector": "313ce567",
                "id": 128,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nameLocation": "3100:8:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 121,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "3131:8:1"
                },
                "parameters": {
                  "id": 120,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3108:2:1"
                },
                "returnParameters": {
                  "id": 124,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 123,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 128,
                      "src": "3149:5:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 122,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "3149:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3148:7:1"
                },
                "scope": 640,
                "src": "3091:91:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  667
                ],
                "body": {
                  "id": 137,
                  "nodeType": "Block",
                  "src": "3312:36:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 135,
                        "name": "_totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 77,
                        "src": "3329:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 134,
                      "id": 136,
                      "nodeType": "Return",
                      "src": "3322:19:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 129,
                  "nodeType": "StructuredDocumentation",
                  "src": "3188:49:1",
                  "text": " @dev See {IERC20-totalSupply}."
                },
                "functionSelector": "18160ddd",
                "id": 138,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nameLocation": "3251:11:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 131,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "3285:8:1"
                },
                "parameters": {
                  "id": 130,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3262:2:1"
                },
                "returnParameters": {
                  "id": 134,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 133,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 138,
                      "src": "3303:7:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 132,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3303:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3302:9:1"
                },
                "scope": 640,
                "src": "3242:106:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  675
                ],
                "body": {
                  "id": 151,
                  "nodeType": "Block",
                  "src": "3489:42:1",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 147,
                          "name": "_balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "3506:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 149,
                        "indexExpression": {
                          "id": 148,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 141,
                          "src": "3516:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3506:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 146,
                      "id": 150,
                      "nodeType": "Return",
                      "src": "3499:25:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 139,
                  "nodeType": "StructuredDocumentation",
                  "src": "3354:47:1",
                  "text": " @dev See {IERC20-balanceOf}."
                },
                "functionSelector": "70a08231",
                "id": 152,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nameLocation": "3415:9:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 143,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "3462:8:1"
                },
                "parameters": {
                  "id": 142,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 141,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "3433:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "3425:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 140,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3425:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3424:17:1"
                },
                "returnParameters": {
                  "id": 146,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 145,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "3480:7:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 144,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3480:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3479:9:1"
                },
                "scope": 640,
                "src": "3406:125:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  685
                ],
                "body": {
                  "id": 176,
                  "nodeType": "Block",
                  "src": "3812:104:1",
                  "statements": [
                    {
                      "assignments": [
                        164
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 164,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "3830:5:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 176,
                          "src": "3822:13:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 163,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3822:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 167,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 165,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1402,
                          "src": "3838:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3838:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3822:28:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 169,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 164,
                            "src": "3870:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 170,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 155,
                            "src": "3877:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 171,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 157,
                            "src": "3881:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 168,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 400,
                          "src": "3860:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3860:28:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 173,
                      "nodeType": "ExpressionStatement",
                      "src": "3860:28:1"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3905:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 162,
                      "id": 175,
                      "nodeType": "Return",
                      "src": "3898:11:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 153,
                  "nodeType": "StructuredDocumentation",
                  "src": "3537:185:1",
                  "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
                },
                "functionSelector": "a9059cbb",
                "id": 177,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nameLocation": "3736:8:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 159,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "3788:8:1"
                },
                "parameters": {
                  "id": 158,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 155,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "3753:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "3745:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 154,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3745:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 157,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "3765:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "3757:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 156,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3757:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3744:28:1"
                },
                "returnParameters": {
                  "id": 162,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 161,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 177,
                      "src": "3806:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 160,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3806:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3805:6:1"
                },
                "scope": 640,
                "src": "3727:189:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  695
                ],
                "body": {
                  "id": 194,
                  "nodeType": "Block",
                  "src": "4072:51:1",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 188,
                            "name": "_allowances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 75,
                            "src": "4089:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 190,
                          "indexExpression": {
                            "id": 189,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "4101:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4089:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 192,
                        "indexExpression": {
                          "id": 191,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 182,
                          "src": "4108:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4089:27:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 187,
                      "id": 193,
                      "nodeType": "Return",
                      "src": "4082:34:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 178,
                  "nodeType": "StructuredDocumentation",
                  "src": "3922:47:1",
                  "text": " @dev See {IERC20-allowance}."
                },
                "functionSelector": "dd62ed3e",
                "id": 195,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nameLocation": "3983:9:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 184,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "4045:8:1"
                },
                "parameters": {
                  "id": 183,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 180,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "4001:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 195,
                      "src": "3993:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 179,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3993:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 182,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "4016:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 195,
                      "src": "4008:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 181,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4008:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3992:32:1"
                },
                "returnParameters": {
                  "id": 187,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 186,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 195,
                      "src": "4063:7:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 185,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4063:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4062:9:1"
                },
                "scope": 640,
                "src": "3974:149:1",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  705
                ],
                "body": {
                  "id": 219,
                  "nodeType": "Block",
                  "src": "4520:108:1",
                  "statements": [
                    {
                      "assignments": [
                        207
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 207,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "4538:5:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 219,
                          "src": "4530:13:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 206,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4530:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 210,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 208,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1402,
                          "src": "4546:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 209,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4546:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4530:28:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 212,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 207,
                            "src": "4577:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 213,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 198,
                            "src": "4584:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 214,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 200,
                            "src": "4593:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 211,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "4568:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 215,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4568:32:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 216,
                      "nodeType": "ExpressionStatement",
                      "src": "4568:32:1"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 217,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4617:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 205,
                      "id": 218,
                      "nodeType": "Return",
                      "src": "4610:11:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 196,
                  "nodeType": "StructuredDocumentation",
                  "src": "4129:297:1",
                  "text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
                },
                "functionSelector": "095ea7b3",
                "id": 220,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nameLocation": "4440:7:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 202,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "4496:8:1"
                },
                "parameters": {
                  "id": 201,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 198,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "4456:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 220,
                      "src": "4448:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 197,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4448:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 200,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "4473:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 220,
                      "src": "4465:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 199,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4465:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4447:33:1"
                },
                "returnParameters": {
                  "id": 205,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 204,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 220,
                      "src": "4514:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 203,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4514:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4513:6:1"
                },
                "scope": 640,
                "src": "4431:197:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  717
                ],
                "body": {
                  "id": 252,
                  "nodeType": "Block",
                  "src": "5323:153:1",
                  "statements": [
                    {
                      "assignments": [
                        234
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 234,
                          "mutability": "mutable",
                          "name": "spender",
                          "nameLocation": "5341:7:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 252,
                          "src": "5333:15:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 233,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5333:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 237,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 235,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1402,
                          "src": "5351:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 236,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5351:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5333:30:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 239,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 223,
                            "src": "5389:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 240,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 234,
                            "src": "5395:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 241,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "5404:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 238,
                          "name": "_spendAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 617,
                          "src": "5373:15:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 242,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5373:38:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 243,
                      "nodeType": "ExpressionStatement",
                      "src": "5373:38:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 245,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 223,
                            "src": "5431:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 246,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "5437:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 247,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "5441:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 244,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 400,
                          "src": "5421:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 248,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5421:27:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 249,
                      "nodeType": "ExpressionStatement",
                      "src": "5421:27:1"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5465:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 232,
                      "id": 251,
                      "nodeType": "Return",
                      "src": "5458:11:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 221,
                  "nodeType": "StructuredDocumentation",
                  "src": "4634:551:1",
                  "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
                },
                "functionSelector": "23b872dd",
                "id": 253,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nameLocation": "5199:12:1",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 229,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "5299:8:1"
                },
                "parameters": {
                  "id": 228,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 223,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "5229:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "5221:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 222,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5221:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 225,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "5251:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "5243:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 224,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5243:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 227,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "5271:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "5263:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 226,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5263:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5211:72:1"
                },
                "returnParameters": {
                  "id": 232,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 231,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "5317:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 230,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5317:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5316:6:1"
                },
                "scope": 640,
                "src": "5190:286:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 281,
                  "nodeType": "Block",
                  "src": "5965:140:1",
                  "statements": [
                    {
                      "assignments": [
                        264
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 264,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "5983:5:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 281,
                          "src": "5975:13:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 263,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5975:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 267,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 265,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1402,
                          "src": "5991:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5991:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5975:28:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 269,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 264,
                            "src": "6022:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 270,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "6029:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 276,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 272,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 264,
                                  "src": "6048:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 273,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 256,
                                  "src": "6055:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 271,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 195,
                                "src": "6038:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address,address) view returns (uint256)"
                                }
                              },
                              "id": 274,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6038:25:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 275,
                              "name": "addedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 258,
                              "src": "6066:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6038:38:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 268,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "6013:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 277,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6013:64:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 278,
                      "nodeType": "ExpressionStatement",
                      "src": "6013:64:1"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 279,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6094:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 262,
                      "id": 280,
                      "nodeType": "Return",
                      "src": "6087:11:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 254,
                  "nodeType": "StructuredDocumentation",
                  "src": "5482:384:1",
                  "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
                },
                "functionSelector": "39509351",
                "id": 282,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "increaseAllowance",
                "nameLocation": "5880:17:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 259,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 256,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "5906:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 282,
                      "src": "5898:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 255,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5898:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 258,
                      "mutability": "mutable",
                      "name": "addedValue",
                      "nameLocation": "5923:10:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 282,
                      "src": "5915:18:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 257,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5915:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5897:37:1"
                },
                "returnParameters": {
                  "id": 262,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 261,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 282,
                      "src": "5959:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 260,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5959:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5958:6:1"
                },
                "scope": 640,
                "src": "5871:234:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 322,
                  "nodeType": "Block",
                  "src": "6691:328:1",
                  "statements": [
                    {
                      "assignments": [
                        293
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 293,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "6709:5:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 322,
                          "src": "6701:13:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 292,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6701:7:1",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 296,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 294,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1402,
                          "src": "6717:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 295,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6717:12:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "6701:28:1"
                    },
                    {
                      "assignments": [
                        298
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 298,
                          "mutability": "mutable",
                          "name": "currentAllowance",
                          "nameLocation": "6747:16:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 322,
                          "src": "6739:24:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 297,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "6739:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 303,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 300,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 293,
                            "src": "6776:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 301,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 285,
                            "src": "6783:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 299,
                          "name": "allowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 195,
                          "src": "6766:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address,address) view returns (uint256)"
                          }
                        },
                        "id": 302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6766:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "6739:52:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 307,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 305,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 298,
                              "src": "6809:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 306,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 287,
                              "src": "6829:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6809:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                            "id": 308,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6846:39:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                              "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                            },
                            "value": "ERC20: decreased allowance below zero"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                              "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                            }
                          ],
                          "id": 304,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "6801:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 309,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6801:85:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 310,
                      "nodeType": "ExpressionStatement",
                      "src": "6801:85:1"
                    },
                    {
                      "id": 319,
                      "nodeType": "UncheckedBlock",
                      "src": "6896:95:1",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "id": 312,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 293,
                                "src": "6929:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 313,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 285,
                                "src": "6936:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 316,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 314,
                                  "name": "currentAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 298,
                                  "src": "6945:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 315,
                                  "name": "subtractedValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 287,
                                  "src": "6964:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6945:34:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 311,
                              "name": "_approve",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 574,
                              "src": "6920:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                "typeString": "function (address,address,uint256)"
                              }
                            },
                            "id": 317,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6920:60:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 318,
                          "nodeType": "ExpressionStatement",
                          "src": "6920:60:1"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 320,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7008:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 291,
                      "id": 321,
                      "nodeType": "Return",
                      "src": "7001:11:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 283,
                  "nodeType": "StructuredDocumentation",
                  "src": "6111:476:1",
                  "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
                },
                "functionSelector": "a457c2d7",
                "id": 323,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "decreaseAllowance",
                "nameLocation": "6601:17:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 288,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 285,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "6627:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 323,
                      "src": "6619:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 284,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6619:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 287,
                      "mutability": "mutable",
                      "name": "subtractedValue",
                      "nameLocation": "6644:15:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 323,
                      "src": "6636:23:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 286,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6636:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6618:42:1"
                },
                "returnParameters": {
                  "id": 291,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 290,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 323,
                      "src": "6685:4:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 289,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "6685:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6684:6:1"
                },
                "scope": 640,
                "src": "6592:427:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 399,
                  "nodeType": "Block",
                  "src": "7581:710:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 339,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 334,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 326,
                              "src": "7599:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 337,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7615:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 336,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7607:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 335,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7607:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 338,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7607:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "7599:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                            "id": 340,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7619:39:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                              "typeString": "literal_string \"ERC20: transfer from the zero address\""
                            },
                            "value": "ERC20: transfer from the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                              "typeString": "literal_string \"ERC20: transfer from the zero address\""
                            }
                          ],
                          "id": 333,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "7591:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7591:68:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 342,
                      "nodeType": "ExpressionStatement",
                      "src": "7591:68:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 349,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 344,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 328,
                              "src": "7677:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 347,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7691:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 346,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7683:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 345,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "7683:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 348,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7683:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "7677:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                            "id": 350,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7695:37:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                              "typeString": "literal_string \"ERC20: transfer to the zero address\""
                            },
                            "value": "ERC20: transfer to the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                              "typeString": "literal_string \"ERC20: transfer to the zero address\""
                            }
                          ],
                          "id": 343,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "7669:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 351,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7669:64:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 352,
                      "nodeType": "ExpressionStatement",
                      "src": "7669:64:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 354,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "7765:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 355,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 328,
                            "src": "7771:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 356,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 330,
                            "src": "7775:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 353,
                          "name": "_beforeTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 628,
                          "src": "7744:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7744:38:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 358,
                      "nodeType": "ExpressionStatement",
                      "src": "7744:38:1"
                    },
                    {
                      "assignments": [
                        360
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 360,
                          "mutability": "mutable",
                          "name": "fromBalance",
                          "nameLocation": "7801:11:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 399,
                          "src": "7793:19:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 359,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "7793:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 364,
                      "initialValue": {
                        "baseExpression": {
                          "id": 361,
                          "name": "_balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "7815:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 363,
                        "indexExpression": {
                          "id": 362,
                          "name": "from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 326,
                          "src": "7825:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7815:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "7793:37:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 368,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 366,
                              "name": "fromBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 360,
                              "src": "7848:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 367,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 330,
                              "src": "7863:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "7848:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                            "id": 369,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7871:40:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                              "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                            },
                            "value": "ERC20: transfer amount exceeds balance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                              "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                            }
                          ],
                          "id": 365,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "7840:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7840:72:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 371,
                      "nodeType": "ExpressionStatement",
                      "src": "7840:72:1"
                    },
                    {
                      "id": 386,
                      "nodeType": "UncheckedBlock",
                      "src": "7922:273:1",
                      "statements": [
                        {
                          "expression": {
                            "id": 378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 372,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "7946:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 374,
                              "indexExpression": {
                                "id": 373,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 326,
                                "src": "7956:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "7946:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 377,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 375,
                                "name": "fromBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 360,
                                "src": "7964:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 376,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 330,
                                "src": "7978:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7964:20:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "7946:38:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 379,
                          "nodeType": "ExpressionStatement",
                          "src": "7946:38:1"
                        },
                        {
                          "expression": {
                            "id": 384,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 380,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "8161:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 382,
                              "indexExpression": {
                                "id": 381,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 328,
                                "src": "8171:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "8161:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "+=",
                            "rightHandSide": {
                              "id": 383,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 330,
                              "src": "8178:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8161:23:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 385,
                          "nodeType": "ExpressionStatement",
                          "src": "8161:23:1"
                        }
                      ]
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 388,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "8219:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 389,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 328,
                            "src": "8225:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 390,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 330,
                            "src": "8229:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 387,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 652,
                          "src": "8210:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 391,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8210:26:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 392,
                      "nodeType": "EmitStatement",
                      "src": "8205:31:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 394,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "8267:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 395,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 328,
                            "src": "8273:2:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 396,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 330,
                            "src": "8277:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 393,
                          "name": "_afterTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 639,
                          "src": "8247:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 397,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8247:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 398,
                      "nodeType": "ExpressionStatement",
                      "src": "8247:37:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 324,
                  "nodeType": "StructuredDocumentation",
                  "src": "7025:443:1",
                  "text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
                },
                "id": 400,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transfer",
                "nameLocation": "7482:9:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 331,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 326,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "7509:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "7501:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 325,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7501:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 328,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "7531:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "7523:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 327,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7523:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 330,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "7551:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "7543:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 329,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7543:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "7491:72:1"
                },
                "returnParameters": {
                  "id": 332,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "7581:0:1"
                },
                "scope": 640,
                "src": "7473:818:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 456,
                  "nodeType": "Block",
                  "src": "8632:470:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 414,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 409,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 403,
                              "src": "8650:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 412,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8669:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 411,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8661:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 410,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8661:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 413,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8661:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "8650:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                            "id": 415,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8673:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                              "typeString": "literal_string \"ERC20: mint to the zero address\""
                            },
                            "value": "ERC20: mint to the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                              "typeString": "literal_string \"ERC20: mint to the zero address\""
                            }
                          ],
                          "id": 408,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "8642:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 416,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8642:65:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 417,
                      "nodeType": "ExpressionStatement",
                      "src": "8642:65:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 421,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8747:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 420,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8739:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 419,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8739:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 422,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8739:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 423,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 403,
                            "src": "8751:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 424,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 405,
                            "src": "8760:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 418,
                          "name": "_beforeTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 628,
                          "src": "8718:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 425,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8718:49:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 426,
                      "nodeType": "ExpressionStatement",
                      "src": "8718:49:1"
                    },
                    {
                      "expression": {
                        "id": 429,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 427,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 77,
                          "src": "8778:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "id": 428,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "8794:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8778:22:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 430,
                      "nodeType": "ExpressionStatement",
                      "src": "8778:22:1"
                    },
                    {
                      "id": 437,
                      "nodeType": "UncheckedBlock",
                      "src": "8810:175:1",
                      "statements": [
                        {
                          "expression": {
                            "id": 435,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 431,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "8946:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 433,
                              "indexExpression": {
                                "id": 432,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 403,
                                "src": "8956:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "8946:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "+=",
                            "rightHandSide": {
                              "id": 434,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 405,
                              "src": "8968:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8946:28:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 436,
                          "nodeType": "ExpressionStatement",
                          "src": "8946:28:1"
                        }
                      ]
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 441,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9016:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 440,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9008:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 439,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9008:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 442,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9008:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 443,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 403,
                            "src": "9020:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 444,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 405,
                            "src": "9029:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 438,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 652,
                          "src": "8999:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8999:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 446,
                      "nodeType": "EmitStatement",
                      "src": "8994:42:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 450,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9075:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 449,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9067:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 448,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9067:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 451,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9067:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 452,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 403,
                            "src": "9079:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 453,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 405,
                            "src": "9088:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 447,
                          "name": "_afterTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 639,
                          "src": "9047:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9047:48:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 455,
                      "nodeType": "ExpressionStatement",
                      "src": "9047:48:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 401,
                  "nodeType": "StructuredDocumentation",
                  "src": "8297:265:1",
                  "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
                },
                "id": 457,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_mint",
                "nameLocation": "8576:5:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 406,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 403,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "8590:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "8582:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 402,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8582:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 405,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "8607:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "8599:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 404,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8599:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8581:33:1"
                },
                "returnParameters": {
                  "id": 407,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "8632:0:1"
                },
                "scope": 640,
                "src": "8567:535:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 528,
                  "nodeType": "Block",
                  "src": "9487:594:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 471,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 466,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 460,
                              "src": "9505:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 469,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9524:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 468,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9516:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 467,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "9516:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 470,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9516:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "9505:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                            "id": 472,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9528:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                              "typeString": "literal_string \"ERC20: burn from the zero address\""
                            },
                            "value": "ERC20: burn from the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                              "typeString": "literal_string \"ERC20: burn from the zero address\""
                            }
                          ],
                          "id": 465,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "9497:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9497:67:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 474,
                      "nodeType": "ExpressionStatement",
                      "src": "9497:67:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 476,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "9596:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 479,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9613:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 478,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9605:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 477,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9605:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 480,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9605:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 481,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 462,
                            "src": "9617:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 475,
                          "name": "_beforeTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 628,
                          "src": "9575:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9575:49:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 483,
                      "nodeType": "ExpressionStatement",
                      "src": "9575:49:1"
                    },
                    {
                      "assignments": [
                        485
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 485,
                          "mutability": "mutable",
                          "name": "accountBalance",
                          "nameLocation": "9643:14:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 528,
                          "src": "9635:22:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 484,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "9635:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 489,
                      "initialValue": {
                        "baseExpression": {
                          "id": 486,
                          "name": "_balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69,
                          "src": "9660:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 488,
                        "indexExpression": {
                          "id": 487,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 460,
                          "src": "9670:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9660:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "9635:43:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 493,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 491,
                              "name": "accountBalance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 485,
                              "src": "9696:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 492,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 462,
                              "src": "9714:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "9696:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                            "id": 494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9722:36:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                              "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                            },
                            "value": "ERC20: burn amount exceeds balance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                              "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                            }
                          ],
                          "id": 490,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "9688:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9688:71:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 496,
                      "nodeType": "ExpressionStatement",
                      "src": "9688:71:1"
                    },
                    {
                      "id": 509,
                      "nodeType": "UncheckedBlock",
                      "src": "9769:194:1",
                      "statements": [
                        {
                          "expression": {
                            "id": 503,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 497,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 69,
                                "src": "9793:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 499,
                              "indexExpression": {
                                "id": 498,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 460,
                                "src": "9803:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "9793:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 502,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 500,
                                "name": "accountBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 485,
                                "src": "9814:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 501,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 462,
                                "src": "9831:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9814:23:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "9793:44:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 504,
                          "nodeType": "ExpressionStatement",
                          "src": "9793:44:1"
                        },
                        {
                          "expression": {
                            "id": 507,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "id": 505,
                              "name": "_totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "9930:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "-=",
                            "rightHandSide": {
                              "id": 506,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 462,
                              "src": "9946:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "9930:22:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 508,
                          "nodeType": "ExpressionStatement",
                          "src": "9930:22:1"
                        }
                      ]
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 511,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "9987:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 514,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10004:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 513,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "9996:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 512,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "9996:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 515,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "9996:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 516,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 462,
                            "src": "10008:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 510,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 652,
                          "src": "9978:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 517,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9978:37:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 518,
                      "nodeType": "EmitStatement",
                      "src": "9973:42:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 520,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "10046:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 523,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10063:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 522,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "10055:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 521,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "10055:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10055:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 525,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 462,
                            "src": "10067:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 519,
                          "name": "_afterTokenTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 639,
                          "src": "10026:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 526,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10026:48:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 527,
                      "nodeType": "ExpressionStatement",
                      "src": "10026:48:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 458,
                  "nodeType": "StructuredDocumentation",
                  "src": "9108:309:1",
                  "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
                },
                "id": 529,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_burn",
                "nameLocation": "9431:5:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 463,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 460,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "9445:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 529,
                      "src": "9437:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 459,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9437:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 462,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "9462:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 529,
                      "src": "9454:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 461,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9454:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9436:33:1"
                },
                "returnParameters": {
                  "id": 464,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9487:0:1"
                },
                "scope": 640,
                "src": "9422:659:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 573,
                  "nodeType": "Block",
                  "src": "10617:257:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 545,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 540,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 532,
                              "src": "10635:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 543,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10652:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 542,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10644:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 541,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10644:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10644:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "10635:19:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                            "id": 546,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10656:38:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                              "typeString": "literal_string \"ERC20: approve from the zero address\""
                            },
                            "value": "ERC20: approve from the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                              "typeString": "literal_string \"ERC20: approve from the zero address\""
                            }
                          ],
                          "id": 539,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "10627:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 547,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10627:68:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 548,
                      "nodeType": "ExpressionStatement",
                      "src": "10627:68:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 555,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 550,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 534,
                              "src": "10713:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 553,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10732:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 552,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10724:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 551,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10724:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10724:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "10713:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                            "id": 556,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10736:36:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                              "typeString": "literal_string \"ERC20: approve to the zero address\""
                            },
                            "value": "ERC20: approve to the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                              "typeString": "literal_string \"ERC20: approve to the zero address\""
                            }
                          ],
                          "id": 549,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "10705:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10705:68:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 558,
                      "nodeType": "ExpressionStatement",
                      "src": "10705:68:1"
                    },
                    {
                      "expression": {
                        "id": 565,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 559,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 75,
                              "src": "10784:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 562,
                            "indexExpression": {
                              "id": 560,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 532,
                              "src": "10796:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10784:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 563,
                          "indexExpression": {
                            "id": 561,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 534,
                            "src": "10803:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10784:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 564,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 536,
                          "src": "10814:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10784:36:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 566,
                      "nodeType": "ExpressionStatement",
                      "src": "10784:36:1"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 568,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 532,
                            "src": "10844:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 569,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 534,
                            "src": "10851:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 570,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 536,
                            "src": "10860:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 567,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 661,
                          "src": "10835:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 571,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10835:32:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 572,
                      "nodeType": "EmitStatement",
                      "src": "10830:37:1"
                    }
                  ]
                },
                "documentation": {
                  "id": 530,
                  "nodeType": "StructuredDocumentation",
                  "src": "10087:412:1",
                  "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
                },
                "id": 574,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_approve",
                "nameLocation": "10513:8:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 537,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 532,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "10539:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 574,
                      "src": "10531:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 531,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10531:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 534,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "10562:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 574,
                      "src": "10554:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 533,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10554:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 536,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "10587:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 574,
                      "src": "10579:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 535,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10579:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10521:78:1"
                },
                "returnParameters": {
                  "id": 538,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10617:0:1"
                },
                "scope": 640,
                "src": "10504:370:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 616,
                  "nodeType": "Block",
                  "src": "11275:321:1",
                  "statements": [
                    {
                      "assignments": [
                        585
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 585,
                          "mutability": "mutable",
                          "name": "currentAllowance",
                          "nameLocation": "11293:16:1",
                          "nodeType": "VariableDeclaration",
                          "scope": 616,
                          "src": "11285:24:1",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 584,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "11285:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 590,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 587,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 577,
                            "src": "11322:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 588,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 579,
                            "src": "11329:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 586,
                          "name": "allowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 195,
                          "src": "11312:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address,address) view returns (uint256)"
                          }
                        },
                        "id": 589,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11312:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "11285:52:1"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 597,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 591,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 585,
                          "src": "11351:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 594,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11376:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": {
                                  "id": 593,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "11376:7:1",
                                  "typeDescriptions": {}
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                }
                              ],
                              "id": 592,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "11371:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 595,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11371:13:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_uint256",
                              "typeString": "type(uint256)"
                            }
                          },
                          "id": 596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "max",
                          "nodeType": "MemberAccess",
                          "src": "11371:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11351:37:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 615,
                      "nodeType": "IfStatement",
                      "src": "11347:243:1",
                      "trueBody": {
                        "id": 614,
                        "nodeType": "Block",
                        "src": "11390:200:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 601,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 599,
                                    "name": "currentAllowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 585,
                                    "src": "11412:16:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">=",
                                  "rightExpression": {
                                    "id": 600,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 581,
                                    "src": "11432:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "11412:26:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
                                  "id": 602,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11440:31:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
                                    "typeString": "literal_string \"ERC20: insufficient allowance\""
                                  },
                                  "value": "ERC20: insufficient allowance"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
                                    "typeString": "literal_string \"ERC20: insufficient allowance\""
                                  }
                                ],
                                "id": 598,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "11404:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 603,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11404:68:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 604,
                            "nodeType": "ExpressionStatement",
                            "src": "11404:68:1"
                          },
                          {
                            "id": 613,
                            "nodeType": "UncheckedBlock",
                            "src": "11486:94:1",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 606,
                                      "name": "owner",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 577,
                                      "src": "11523:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 607,
                                      "name": "spender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 579,
                                      "src": "11530:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 610,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 608,
                                        "name": "currentAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 585,
                                        "src": "11539:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 609,
                                        "name": "amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 581,
                                        "src": "11558:6:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "11539:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 605,
                                    "name": "_approve",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 574,
                                    "src": "11514:8:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,address,uint256)"
                                    }
                                  },
                                  "id": 611,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11514:51:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 612,
                                "nodeType": "ExpressionStatement",
                                "src": "11514:51:1"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 575,
                  "nodeType": "StructuredDocumentation",
                  "src": "10880:270:1",
                  "text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
                },
                "id": 617,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_spendAllowance",
                "nameLocation": "11164:15:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 582,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 577,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "11197:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "11189:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 576,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11189:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 579,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "11220:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "11212:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 578,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11212:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 581,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "11245:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "11237:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 580,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11237:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "11179:78:1"
                },
                "returnParameters": {
                  "id": 583,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11275:0:1"
                },
                "scope": 640,
                "src": "11155:441:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 627,
                  "nodeType": "Block",
                  "src": "12299:2:1",
                  "statements": []
                },
                "documentation": {
                  "id": 618,
                  "nodeType": "StructuredDocumentation",
                  "src": "11602:573:1",
                  "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                },
                "id": 628,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_beforeTokenTransfer",
                "nameLocation": "12189:20:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 625,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 620,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "12227:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 628,
                      "src": "12219:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 619,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12219:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 622,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "12249:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 628,
                      "src": "12241:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 621,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12241:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 624,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "12269:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 628,
                      "src": "12261:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 623,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12261:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "12209:72:1"
                },
                "returnParameters": {
                  "id": 626,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12299:0:1"
                },
                "scope": 640,
                "src": "12180:121:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 638,
                  "nodeType": "Block",
                  "src": "13007:2:1",
                  "statements": []
                },
                "documentation": {
                  "id": 629,
                  "nodeType": "StructuredDocumentation",
                  "src": "12307:577:1",
                  "text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
                },
                "id": 639,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_afterTokenTransfer",
                "nameLocation": "12898:19:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 636,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 631,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "12935:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 639,
                      "src": "12927:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 630,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12927:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 633,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "12957:2:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 639,
                      "src": "12949:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 632,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12949:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 635,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "12977:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 639,
                      "src": "12969:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 634,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12969:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "12917:72:1"
                },
                "returnParameters": {
                  "id": 637,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13007:0:1"
                },
                "scope": 640,
                "src": "12889:120:1",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 641,
            "src": "1401:11610:1",
            "usedErrors": []
          }
        ],
        "src": "105:12907:1"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "exportedSymbols": {
          "IERC20": [
            718
          ]
        },
        "id": 719,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 642,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "106:23:2"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC20",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 643,
              "nodeType": "StructuredDocumentation",
              "src": "131:70:2",
              "text": " @dev Interface of the ERC20 standard as defined in the EIP."
            },
            "fullyImplemented": false,
            "id": 718,
            "linearizedBaseContracts": [
              718
            ],
            "name": "IERC20",
            "nameLocation": "212:6:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": {
                  "id": 644,
                  "nodeType": "StructuredDocumentation",
                  "src": "225:158:2",
                  "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                },
                "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                "id": 652,
                "name": "Transfer",
                "nameLocation": "394:8:2",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 651,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 646,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "419:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 652,
                      "src": "403:20:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 645,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "403:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 648,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "441:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 652,
                      "src": "425:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 647,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "425:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 650,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "453:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 652,
                      "src": "445:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 649,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "445:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "402:57:2"
                },
                "src": "388:72:2"
              },
              {
                "anonymous": false,
                "documentation": {
                  "id": 653,
                  "nodeType": "StructuredDocumentation",
                  "src": "466:148:2",
                  "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                },
                "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                "id": 661,
                "name": "Approval",
                "nameLocation": "625:8:2",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 660,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 655,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "650:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "634:21:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 654,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "634:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 657,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "673:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "657:23:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 656,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "657:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 659,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "690:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 661,
                      "src": "682:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 658,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "682:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "633:63:2"
                },
                "src": "619:78:2"
              },
              {
                "documentation": {
                  "id": 662,
                  "nodeType": "StructuredDocumentation",
                  "src": "703:66:2",
                  "text": " @dev Returns the amount of tokens in existence."
                },
                "functionSelector": "18160ddd",
                "id": 667,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nameLocation": "783:11:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 663,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "794:2:2"
                },
                "returnParameters": {
                  "id": 666,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 665,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 667,
                      "src": "820:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 664,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "820:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "819:9:2"
                },
                "scope": 718,
                "src": "774:55:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 668,
                  "nodeType": "StructuredDocumentation",
                  "src": "835:72:2",
                  "text": " @dev Returns the amount of tokens owned by `account`."
                },
                "functionSelector": "70a08231",
                "id": 675,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nameLocation": "921:9:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 671,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 670,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "939:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 675,
                      "src": "931:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 669,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "931:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "930:17:2"
                },
                "returnParameters": {
                  "id": 674,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 673,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 675,
                      "src": "971:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 672,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "971:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "970:9:2"
                },
                "scope": 718,
                "src": "912:68:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 676,
                  "nodeType": "StructuredDocumentation",
                  "src": "986:202:2",
                  "text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                },
                "functionSelector": "a9059cbb",
                "id": 685,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nameLocation": "1202:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 681,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 678,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "1219:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 685,
                      "src": "1211:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 677,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1211:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 680,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "1231:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 685,
                      "src": "1223:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 679,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1223:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1210:28:2"
                },
                "returnParameters": {
                  "id": 684,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 683,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 685,
                      "src": "1257:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 682,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1257:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1256:6:2"
                },
                "scope": 718,
                "src": "1193:70:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 686,
                  "nodeType": "StructuredDocumentation",
                  "src": "1269:264:2",
                  "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                },
                "functionSelector": "dd62ed3e",
                "id": 695,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nameLocation": "1547:9:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 691,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 688,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1565:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "1557:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 687,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1557:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 690,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "1580:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "1572:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 689,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1572:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1556:32:2"
                },
                "returnParameters": {
                  "id": 694,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 693,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "1612:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 692,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1612:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1611:9:2"
                },
                "scope": 718,
                "src": "1538:83:2",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 696,
                  "nodeType": "StructuredDocumentation",
                  "src": "1627:642:2",
                  "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                },
                "functionSelector": "095ea7b3",
                "id": 705,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nameLocation": "2283:7:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 701,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 698,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2299:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 705,
                      "src": "2291:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 697,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2291:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 700,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "2316:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 705,
                      "src": "2308:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 699,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2308:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2290:33:2"
                },
                "returnParameters": {
                  "id": 704,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 703,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 705,
                      "src": "2342:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 702,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2342:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2341:6:2"
                },
                "scope": 718,
                "src": "2274:74:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 706,
                  "nodeType": "StructuredDocumentation",
                  "src": "2354:287:2",
                  "text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                },
                "functionSelector": "23b872dd",
                "id": 717,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nameLocation": "2655:12:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 713,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 708,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "2685:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 717,
                      "src": "2677:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 707,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2677:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 710,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "2707:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 717,
                      "src": "2699:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 709,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2699:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 712,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "2727:6:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 717,
                      "src": "2719:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 711,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2719:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2667:72:2"
                },
                "returnParameters": {
                  "id": 716,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 715,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 717,
                      "src": "2758:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 714,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2758:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2757:6:2"
                },
                "scope": 718,
                "src": "2646:118:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 719,
            "src": "202:2564:2",
            "usedErrors": []
          }
        ],
        "src": "106:2661:2"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "id": 3,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "exportedSymbols": {
          "IERC20": [
            718
          ],
          "IERC20Metadata": [
            743
          ]
        },
        "id": 744,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 720,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "110:23:3"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "file": "../IERC20.sol",
            "id": 721,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 744,
            "sourceUnit": 719,
            "src": "135:23:3",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 723,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 718,
                  "src": "305:6:3"
                },
                "id": 724,
                "nodeType": "InheritanceSpecifier",
                "src": "305:6:3"
              }
            ],
            "canonicalName": "IERC20Metadata",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 722,
              "nodeType": "StructuredDocumentation",
              "src": "160:116:3",
              "text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
            },
            "fullyImplemented": false,
            "id": 743,
            "linearizedBaseContracts": [
              743,
              718
            ],
            "name": "IERC20Metadata",
            "nameLocation": "287:14:3",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 725,
                  "nodeType": "StructuredDocumentation",
                  "src": "318:54:3",
                  "text": " @dev Returns the name of the token."
                },
                "functionSelector": "06fdde03",
                "id": 730,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "name",
                "nameLocation": "386:4:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 726,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "390:2:3"
                },
                "returnParameters": {
                  "id": 729,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 728,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 730,
                      "src": "416:13:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 727,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "416:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "415:15:3"
                },
                "scope": 743,
                "src": "377:54:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 731,
                  "nodeType": "StructuredDocumentation",
                  "src": "437:56:3",
                  "text": " @dev Returns the symbol of the token."
                },
                "functionSelector": "95d89b41",
                "id": 736,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "symbol",
                "nameLocation": "507:6:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 732,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "513:2:3"
                },
                "returnParameters": {
                  "id": 735,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 734,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 736,
                      "src": "539:13:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 733,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "539:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "538:15:3"
                },
                "scope": 743,
                "src": "498:56:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 737,
                  "nodeType": "StructuredDocumentation",
                  "src": "560:65:3",
                  "text": " @dev Returns the decimals places of the token."
                },
                "functionSelector": "313ce567",
                "id": 742,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nameLocation": "639:8:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 738,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "647:2:3"
                },
                "returnParameters": {
                  "id": 741,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 740,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 742,
                      "src": "673:5:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 739,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "673:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "672:7:3"
                },
                "scope": 743,
                "src": "630:50:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 744,
            "src": "277:405:3",
            "usedErrors": []
          }
        ],
        "src": "110:573:3"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "id": 4,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
        "exportedSymbols": {
          "IERC20Permit": [
            779
          ]
        },
        "id": 780,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 745,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "114:23:4"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC20Permit",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 746,
              "nodeType": "StructuredDocumentation",
              "src": "139:480:4",
              "text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
            },
            "fullyImplemented": false,
            "id": 779,
            "linearizedBaseContracts": [
              779
            ],
            "name": "IERC20Permit",
            "nameLocation": "630:12:4",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 747,
                  "nodeType": "StructuredDocumentation",
                  "src": "649:792:4",
                  "text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
                },
                "functionSelector": "d505accf",
                "id": 764,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "permit",
                "nameLocation": "1455:6:4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 762,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 749,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1479:5:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1471:13:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 748,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1471:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 751,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "1502:7:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1494:15:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 750,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1494:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 753,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1527:5:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1519:13:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 752,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1519:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 755,
                      "mutability": "mutable",
                      "name": "deadline",
                      "nameLocation": "1550:8:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1542:16:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 754,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1542:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 757,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "1574:1:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1568:7:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 756,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "1568:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 759,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "1593:1:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1585:9:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 758,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1585:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 761,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "1612:1:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 764,
                      "src": "1604:9:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 760,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1604:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1461:158:4"
                },
                "returnParameters": {
                  "id": 763,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1628:0:4"
                },
                "scope": 779,
                "src": "1446:183:4",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 765,
                  "nodeType": "StructuredDocumentation",
                  "src": "1635:294:4",
                  "text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
                },
                "functionSelector": "7ecebe00",
                "id": 772,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "nonces",
                "nameLocation": "1943:6:4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 768,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 767,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1958:5:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 772,
                      "src": "1950:13:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 766,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1950:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1949:15:4"
                },
                "returnParameters": {
                  "id": 771,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 770,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 772,
                      "src": "1988:7:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 769,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1988:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1987:9:4"
                },
                "scope": 779,
                "src": "1934:63:4",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 773,
                  "nodeType": "StructuredDocumentation",
                  "src": "2003:128:4",
                  "text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
                },
                "functionSelector": "3644e515",
                "id": 778,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "DOMAIN_SEPARATOR",
                "nameLocation": "2198:16:4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 774,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2214:2:4"
                },
                "returnParameters": {
                  "id": 777,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 776,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 778,
                      "src": "2240:7:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 775,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2240:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2239:9:4"
                },
                "scope": 779,
                "src": "2189:60:4",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 780,
            "src": "620:1631:4",
            "usedErrors": []
          }
        ],
        "src": "114:2138:4"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "id": 5,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "exportedSymbols": {
          "Address": [
            1390
          ],
          "IERC20": [
            718
          ],
          "IERC20Permit": [
            779
          ],
          "SafeERC20": [
            1060
          ]
        },
        "id": 1061,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 781,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "115:23:5"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "file": "../IERC20.sol",
            "id": 782,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1061,
            "sourceUnit": 719,
            "src": "140:23:5",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
            "file": "../extensions/draft-IERC20Permit.sol",
            "id": 783,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1061,
            "sourceUnit": 780,
            "src": "164:46:5",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
            "file": "../../../utils/Address.sol",
            "id": 784,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1061,
            "sourceUnit": 1391,
            "src": "211:36:5",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "SafeERC20",
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": {
              "id": 785,
              "nodeType": "StructuredDocumentation",
              "src": "249:457:5",
              "text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
            },
            "fullyImplemented": true,
            "id": 1060,
            "linearizedBaseContracts": [
              1060
            ],
            "name": "SafeERC20",
            "nameLocation": "715:9:5",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "global": false,
                "id": 788,
                "libraryName": {
                  "id": 786,
                  "name": "Address",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1390,
                  "src": "737:7:5"
                },
                "nodeType": "UsingForDirective",
                "src": "731:26:5",
                "typeName": {
                  "id": 787,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "749:7:5",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }
              },
              {
                "body": {
                  "id": 810,
                  "nodeType": "Block",
                  "src": "865:103:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 799,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 791,
                            "src": "895:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 802,
                                    "name": "token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 791,
                                    "src": "925:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$718",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 803,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "transfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 685,
                                  "src": "925:14:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "925:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 805,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 793,
                                "src": "950:2:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 806,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 795,
                                "src": "954:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 800,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "902:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 801,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "902:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 807,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "902:58:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 798,
                          "name": "_callOptionalReturn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1059,
                          "src": "875:19:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_bytes_memory_ptr_$returns$__$",
                            "typeString": "function (contract IERC20,bytes memory)"
                          }
                        },
                        "id": 808,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "875:86:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 809,
                      "nodeType": "ExpressionStatement",
                      "src": "875:86:5"
                    }
                  ]
                },
                "id": 811,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransfer",
                "nameLocation": "772:12:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 796,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 791,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "801:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "794:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 790,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 789,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "794:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "794:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 793,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "824:2:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "816:10:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 792,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "816:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 795,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "844:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "836:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 794,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "836:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "784:71:5"
                },
                "returnParameters": {
                  "id": 797,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "865:0:5"
                },
                "scope": 1060,
                "src": "763:205:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 836,
                  "nodeType": "Block",
                  "src": "1102:113:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 824,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 814,
                            "src": "1132:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 827,
                                    "name": "token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 814,
                                    "src": "1162:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$718",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 828,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "transferFrom",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 717,
                                  "src": "1162:18:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 829,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "1162:27:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 830,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 816,
                                "src": "1191:4:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 831,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 818,
                                "src": "1197:2:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 832,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 820,
                                "src": "1201:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 825,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "1139:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 826,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "1139:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1139:68:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 823,
                          "name": "_callOptionalReturn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1059,
                          "src": "1112:19:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_bytes_memory_ptr_$returns$__$",
                            "typeString": "function (contract IERC20,bytes memory)"
                          }
                        },
                        "id": 834,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1112:96:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 835,
                      "nodeType": "ExpressionStatement",
                      "src": "1112:96:5"
                    }
                  ]
                },
                "id": 837,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransferFrom",
                "nameLocation": "983:16:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 821,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 814,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "1016:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 837,
                      "src": "1009:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 813,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 812,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "1009:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "1009:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 816,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "1039:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 837,
                      "src": "1031:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 815,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1031:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 818,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "1061:2:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 837,
                      "src": "1053:10:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 817,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1053:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 820,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1081:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 837,
                      "src": "1073:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 819,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1073:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "999:93:5"
                },
                "returnParameters": {
                  "id": 822,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1102:0:5"
                },
                "scope": 1060,
                "src": "974:241:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 880,
                  "nodeType": "Block",
                  "src": "1581:497:5",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 864,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 851,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 849,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 845,
                                    "src": "1830:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 850,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1839:1:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "1830:10:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 852,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "1829:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 862,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 857,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "1870:4:5",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                              "typeString": "library SafeERC20"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                              "typeString": "library SafeERC20"
                                            }
                                          ],
                                          "id": 856,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "1862:7:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 855,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "1862:7:5",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 858,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "1862:13:5",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 859,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 843,
                                        "src": "1877:7:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 853,
                                        "name": "token",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 841,
                                        "src": "1846:5:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC20_$718",
                                          "typeString": "contract IERC20"
                                        }
                                      },
                                      "id": 854,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "allowance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 695,
                                      "src": "1846:15:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                        "typeString": "function (address,address) view external returns (uint256)"
                                      }
                                    },
                                    "id": 860,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1846:39:5",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 861,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1889:1:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "1846:44:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 863,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "1845:46:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "1829:62:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
                            "id": 865,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1905:56:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                              "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                            },
                            "value": "SafeERC20: approve from non-zero to non-zero allowance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                              "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                            }
                          ],
                          "id": 848,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "1808:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1808:163:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 867,
                      "nodeType": "ExpressionStatement",
                      "src": "1808:163:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 869,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 841,
                            "src": "2001:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 872,
                                    "name": "token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 841,
                                    "src": "2031:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$718",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 873,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "approve",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 705,
                                  "src": "2031:13:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 874,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "2031:22:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 875,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 843,
                                "src": "2055:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 876,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 845,
                                "src": "2064:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 870,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2008:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 871,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "2008:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 877,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2008:62:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 868,
                          "name": "_callOptionalReturn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1059,
                          "src": "1981:19:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_bytes_memory_ptr_$returns$__$",
                            "typeString": "function (contract IERC20,bytes memory)"
                          }
                        },
                        "id": 878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1981:90:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 879,
                      "nodeType": "ExpressionStatement",
                      "src": "1981:90:5"
                    }
                  ]
                },
                "documentation": {
                  "id": 838,
                  "nodeType": "StructuredDocumentation",
                  "src": "1221:249:5",
                  "text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
                },
                "id": 881,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeApprove",
                "nameLocation": "1484:11:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 846,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 841,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "1512:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 881,
                      "src": "1505:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 840,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 839,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "1505:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "1505:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 843,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "1535:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 881,
                      "src": "1527:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 842,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1527:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 845,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1560:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 881,
                      "src": "1552:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 844,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1552:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1495:76:5"
                },
                "returnParameters": {
                  "id": 847,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1581:0:5"
                },
                "scope": 1060,
                "src": "1475:603:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 916,
                  "nodeType": "Block",
                  "src": "2200:194:5",
                  "statements": [
                    {
                      "assignments": [
                        892
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 892,
                          "mutability": "mutable",
                          "name": "newAllowance",
                          "nameLocation": "2218:12:5",
                          "nodeType": "VariableDeclaration",
                          "scope": 916,
                          "src": "2210:20:5",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 891,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2210:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 903,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 897,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "2257:4:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                    "typeString": "library SafeERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                    "typeString": "library SafeERC20"
                                  }
                                ],
                                "id": 896,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2249:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 895,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2249:7:5",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 898,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2249:13:5",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 899,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 886,
                              "src": "2264:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 893,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 884,
                              "src": "2233:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$718",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 894,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "allowance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 695,
                            "src": "2233:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view external returns (uint256)"
                            }
                          },
                          "id": 900,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2233:39:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 901,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 888,
                          "src": "2275:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2233:47:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2210:70:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 905,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 884,
                            "src": "2310:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 908,
                                    "name": "token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 884,
                                    "src": "2340:5:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$718",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 909,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "approve",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 705,
                                  "src": "2340:13:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                    "typeString": "function (address,uint256) external returns (bool)"
                                  }
                                },
                                "id": 910,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "selector",
                                "nodeType": "MemberAccess",
                                "src": "2340:22:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                }
                              },
                              {
                                "id": 911,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 886,
                                "src": "2364:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 912,
                                "name": "newAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 892,
                                "src": "2373:12:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes4",
                                  "typeString": "bytes4"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 906,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2317:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 907,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "src": "2317:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 913,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2317:69:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_IERC20_$718",
                              "typeString": "contract IERC20"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 904,
                          "name": "_callOptionalReturn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1059,
                          "src": "2290:19:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_bytes_memory_ptr_$returns$__$",
                            "typeString": "function (contract IERC20,bytes memory)"
                          }
                        },
                        "id": 914,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2290:97:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 915,
                      "nodeType": "ExpressionStatement",
                      "src": "2290:97:5"
                    }
                  ]
                },
                "id": 917,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeIncreaseAllowance",
                "nameLocation": "2093:21:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 889,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 884,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "2131:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 917,
                      "src": "2124:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 883,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 882,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "2124:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "2124:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 886,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2154:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 917,
                      "src": "2146:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 885,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2146:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 888,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "2179:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 917,
                      "src": "2171:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 887,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2171:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2114:76:5"
                },
                "returnParameters": {
                  "id": 890,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2200:0:5"
                },
                "scope": 1060,
                "src": "2084:310:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 964,
                  "nodeType": "Block",
                  "src": "2516:370:5",
                  "statements": [
                    {
                      "id": 963,
                      "nodeType": "UncheckedBlock",
                      "src": "2526:354:5",
                      "statements": [
                        {
                          "assignments": [
                            928
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 928,
                              "mutability": "mutable",
                              "name": "oldAllowance",
                              "nameLocation": "2558:12:5",
                              "nodeType": "VariableDeclaration",
                              "scope": 963,
                              "src": "2550:20:5",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 927,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2550:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 937,
                          "initialValue": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 933,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "2597:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                      "typeString": "library SafeERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_SafeERC20_$1060",
                                      "typeString": "library SafeERC20"
                                    }
                                  ],
                                  "id": 932,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2589:7:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 931,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2589:7:5",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 934,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2589:13:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 935,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 922,
                                "src": "2604:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 929,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "2573:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$718",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 930,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allowance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 695,
                              "src": "2573:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address,address) view external returns (uint256)"
                              }
                            },
                            "id": 936,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2573:39:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2550:62:5"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 941,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 939,
                                  "name": "oldAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 928,
                                  "src": "2634:12:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "id": 940,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 924,
                                  "src": "2650:5:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2634:21:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              {
                                "hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                                "id": 942,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2657:43:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                  "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                },
                                "value": "SafeERC20: decreased allowance below zero"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                  "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                }
                              ],
                              "id": 938,
                              "name": "require",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "src": "2626:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (bool,string memory) pure"
                              }
                            },
                            "id": 943,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2626:75:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 944,
                          "nodeType": "ExpressionStatement",
                          "src": "2626:75:5"
                        },
                        {
                          "assignments": [
                            946
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 946,
                              "mutability": "mutable",
                              "name": "newAllowance",
                              "nameLocation": "2723:12:5",
                              "nodeType": "VariableDeclaration",
                              "scope": 963,
                              "src": "2715:20:5",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 945,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "2715:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 950,
                          "initialValue": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 949,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 947,
                              "name": "oldAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 928,
                              "src": "2738:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 948,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 924,
                              "src": "2753:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2738:20:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2715:43:5"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "id": 952,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "2792:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$718",
                                  "typeString": "contract IERC20"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "expression": {
                                        "id": 955,
                                        "name": "token",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 920,
                                        "src": "2822:5:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC20_$718",
                                          "typeString": "contract IERC20"
                                        }
                                      },
                                      "id": 956,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "approve",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 705,
                                      "src": "2822:13:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                        "typeString": "function (address,uint256) external returns (bool)"
                                      }
                                    },
                                    "id": 957,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "selector",
                                    "nodeType": "MemberAccess",
                                    "src": "2822:22:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    }
                                  },
                                  {
                                    "id": 958,
                                    "name": "spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 922,
                                    "src": "2846:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 959,
                                    "name": "newAllowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 946,
                                    "src": "2855:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes4",
                                      "typeString": "bytes4"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 953,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "2799:3:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 954,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodeWithSelector",
                                  "nodeType": "MemberAccess",
                                  "src": "2799:22:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes4) pure returns (bytes memory)"
                                  }
                                },
                                "id": 960,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2799:69:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IERC20_$718",
                                  "typeString": "contract IERC20"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 951,
                              "name": "_callOptionalReturn",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1059,
                              "src": "2772:19:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_bytes_memory_ptr_$returns$__$",
                                "typeString": "function (contract IERC20,bytes memory)"
                              }
                            },
                            "id": 961,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2772:97:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 962,
                          "nodeType": "ExpressionStatement",
                          "src": "2772:97:5"
                        }
                      ]
                    }
                  ]
                },
                "id": 965,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeDecreaseAllowance",
                "nameLocation": "2409:21:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 925,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 920,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "2447:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 965,
                      "src": "2440:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 919,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 918,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "2440:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "2440:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 922,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2470:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 965,
                      "src": "2462:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 921,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2462:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 924,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "2495:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 965,
                      "src": "2487:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 923,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2487:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2430:76:5"
                },
                "returnParameters": {
                  "id": 926,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2516:0:5"
                },
                "scope": 1060,
                "src": "2400:486:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1020,
                  "nodeType": "Block",
                  "src": "3107:257:5",
                  "statements": [
                    {
                      "assignments": [
                        986
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 986,
                          "mutability": "mutable",
                          "name": "nonceBefore",
                          "nameLocation": "3125:11:5",
                          "nodeType": "VariableDeclaration",
                          "scope": 1020,
                          "src": "3117:19:5",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 985,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3117:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 991,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 989,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "3152:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 987,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "3139:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20Permit_$779",
                              "typeString": "contract IERC20Permit"
                            }
                          },
                          "id": 988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "nonces",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 772,
                          "src": "3139:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 990,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3139:19:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3117:41:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 995,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "3181:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 996,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 972,
                            "src": "3188:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 997,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 974,
                            "src": "3197:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 998,
                            "name": "deadline",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 976,
                            "src": "3204:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 999,
                            "name": "v",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 978,
                            "src": "3214:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "id": 1000,
                            "name": "r",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 980,
                            "src": "3217:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 1001,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 982,
                            "src": "3220:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 992,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "3168:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20Permit_$779",
                              "typeString": "contract IERC20Permit"
                            }
                          },
                          "id": 994,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "permit",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 764,
                          "src": "3168:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
                            "typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
                          }
                        },
                        "id": 1002,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3168:54:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1003,
                      "nodeType": "ExpressionStatement",
                      "src": "3168:54:5"
                    },
                    {
                      "assignments": [
                        1005
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1005,
                          "mutability": "mutable",
                          "name": "nonceAfter",
                          "nameLocation": "3240:10:5",
                          "nodeType": "VariableDeclaration",
                          "scope": 1020,
                          "src": "3232:18:5",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1004,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3232:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1010,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1008,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "3266:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 1006,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "3253:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20Permit_$779",
                              "typeString": "contract IERC20Permit"
                            }
                          },
                          "id": 1007,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "nonces",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 772,
                          "src": "3253:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 1009,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3253:19:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3232:40:5"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1016,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1012,
                              "name": "nonceAfter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1005,
                              "src": "3290:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1015,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1013,
                                "name": "nonceBefore",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 986,
                                "src": "3304:11:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1014,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3318:1:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "3304:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3290:29:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
                            "id": 1017,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3321:35:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
                              "typeString": "literal_string \"SafeERC20: permit did not succeed\""
                            },
                            "value": "SafeERC20: permit did not succeed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
                              "typeString": "literal_string \"SafeERC20: permit did not succeed\""
                            }
                          ],
                          "id": 1011,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "3282:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1018,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3282:75:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1019,
                      "nodeType": "ExpressionStatement",
                      "src": "3282:75:5"
                    }
                  ]
                },
                "id": 1021,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safePermit",
                "nameLocation": "2901:10:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 983,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 968,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "2934:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "2921:18:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20Permit_$779",
                        "typeString": "contract IERC20Permit"
                      },
                      "typeName": {
                        "id": 967,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 966,
                          "name": "IERC20Permit",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 779,
                          "src": "2921:12:5"
                        },
                        "referencedDeclaration": 779,
                        "src": "2921:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20Permit_$779",
                          "typeString": "contract IERC20Permit"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 970,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "2957:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "2949:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 969,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2949:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 972,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2980:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "2972:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 971,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2972:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 974,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "3005:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "2997:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 973,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2997:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 976,
                      "mutability": "mutable",
                      "name": "deadline",
                      "nameLocation": "3028:8:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "3020:16:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 975,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3020:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 978,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "3052:1:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "3046:7:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 977,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "3046:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 980,
                      "mutability": "mutable",
                      "name": "r",
                      "nameLocation": "3071:1:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "3063:9:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 979,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3063:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 982,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "3090:1:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1021,
                      "src": "3082:9:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 981,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3082:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2911:186:5"
                },
                "returnParameters": {
                  "id": 984,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3107:0:5"
                },
                "scope": 1060,
                "src": "2892:472:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1058,
                  "nodeType": "Block",
                  "src": "3817:636:5",
                  "statements": [
                    {
                      "assignments": [
                        1031
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1031,
                          "mutability": "mutable",
                          "name": "returndata",
                          "nameLocation": "4179:10:5",
                          "nodeType": "VariableDeclaration",
                          "scope": 1058,
                          "src": "4166:23:5",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 1030,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "4166:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1040,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1037,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1027,
                            "src": "4220:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
                            "id": 1038,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4226:34:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                              "typeString": "literal_string \"SafeERC20: low-level call failed\""
                            },
                            "value": "SafeERC20: low-level call failed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                              "typeString": "literal_string \"SafeERC20: low-level call failed\""
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 1034,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1025,
                                "src": "4200:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$718",
                                  "typeString": "contract IERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IERC20_$718",
                                  "typeString": "contract IERC20"
                                }
                              ],
                              "id": 1033,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4192:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1032,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4192:7:5",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4192:14:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "functionCall",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1150,
                          "src": "4192:27:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                            "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                          }
                        },
                        "id": 1039,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4192:69:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4166:95:5"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1044,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1041,
                            "name": "returndata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1031,
                            "src": "4275:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4275:17:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1043,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4295:1:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "4275:21:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1057,
                      "nodeType": "IfStatement",
                      "src": "4271:176:5",
                      "trueBody": {
                        "id": 1056,
                        "nodeType": "Block",
                        "src": "4298:149:5",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1048,
                                      "name": "returndata",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1031,
                                      "src": "4370:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    },
                                    {
                                      "components": [
                                        {
                                          "id": 1050,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "4383:4:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          },
                                          "typeName": {
                                            "id": 1049,
                                            "name": "bool",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4383:4:5",
                                            "typeDescriptions": {}
                                          }
                                        }
                                      ],
                                      "id": 1051,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "4382:6:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_bool_$",
                                        "typeString": "type(bool)"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      },
                                      {
                                        "typeIdentifier": "t_type$_t_bool_$",
                                        "typeString": "type(bool)"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1046,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "4359:3:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 1047,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "decode",
                                    "nodeType": "MemberAccess",
                                    "src": "4359:10:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                      "typeString": "function () pure"
                                    }
                                  },
                                  "id": 1052,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4359:30:5",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
                                  "id": 1053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4391:44:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                    "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                  },
                                  "value": "SafeERC20: ERC20 operation did not succeed"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                    "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                  }
                                ],
                                "id": 1045,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "4351:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 1054,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4351:85:5",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1055,
                            "nodeType": "ExpressionStatement",
                            "src": "4351:85:5"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 1022,
                  "nodeType": "StructuredDocumentation",
                  "src": "3370:372:5",
                  "text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
                },
                "id": 1059,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_callOptionalReturn",
                "nameLocation": "3756:19:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1028,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1025,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "3783:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1059,
                      "src": "3776:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$718",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 1024,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1023,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 718,
                          "src": "3776:6:5"
                        },
                        "referencedDeclaration": 718,
                        "src": "3776:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$718",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1027,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "3803:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1059,
                      "src": "3790:17:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1026,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3790:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3775:33:5"
                },
                "returnParameters": {
                  "id": 1029,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3817:0:5"
                },
                "scope": 1060,
                "src": "3747:706:5",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              }
            ],
            "scope": 1061,
            "src": "707:3748:5",
            "usedErrors": []
          }
        ],
        "src": "115:4341:5"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "id": 6,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "exportedSymbols": {
          "Address": [
            1390
          ]
        },
        "id": 1391,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1062,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".1"
            ],
            "nodeType": "PragmaDirective",
            "src": "101:23:6"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "Address",
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": {
              "id": 1063,
              "nodeType": "StructuredDocumentation",
              "src": "126:67:6",
              "text": " @dev Collection of functions related to the address type"
            },
            "fullyImplemented": true,
            "id": 1390,
            "linearizedBaseContracts": [
              1390
            ],
            "name": "Address",
            "nameLocation": "202:7:6",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 1077,
                  "nodeType": "Block",
                  "src": "1241:254:6",
                  "statements": [
                    {
                      "expression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1075,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "expression": {
                              "id": 1071,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1066,
                              "src": "1465:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1072,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "code",
                            "nodeType": "MemberAccess",
                            "src": "1465:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1073,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "1465:19:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1074,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1487:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1465:23:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1070,
                      "id": 1076,
                      "nodeType": "Return",
                      "src": "1458:30:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1064,
                  "nodeType": "StructuredDocumentation",
                  "src": "216:954:6",
                  "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
                },
                "id": 1078,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isContract",
                "nameLocation": "1184:10:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1067,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1066,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "1203:7:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1078,
                      "src": "1195:15:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1065,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1195:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1194:17:6"
                },
                "returnParameters": {
                  "id": 1070,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1069,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1078,
                      "src": "1235:4:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1068,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1235:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1234:6:6"
                },
                "scope": 1390,
                "src": "1175:320:6",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1111,
                  "nodeType": "Block",
                  "src": "2483:241:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1093,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1089,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "2509:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Address_$1390",
                                      "typeString": "library Address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Address_$1390",
                                      "typeString": "library Address"
                                    }
                                  ],
                                  "id": 1088,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2501:7:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1087,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2501:7:6",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1090,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2501:13:6",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1091,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "2501:21:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 1092,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1083,
                              "src": "2526:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2501:31:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                            "id": 1094,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2534:31:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                              "typeString": "literal_string \"Address: insufficient balance\""
                            },
                            "value": "Address: insufficient balance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                              "typeString": "literal_string \"Address: insufficient balance\""
                            }
                          ],
                          "id": 1086,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "2493:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1095,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2493:73:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1096,
                      "nodeType": "ExpressionStatement",
                      "src": "2493:73:6"
                    },
                    {
                      "assignments": [
                        1098,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1098,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "2583:7:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1111,
                          "src": "2578:12:6",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 1097,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "2578:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 1105,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 1103,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2626:2:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "id": 1099,
                              "name": "recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1081,
                              "src": "2596:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 1100,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "2596:14:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1102,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 1101,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1083,
                              "src": "2618:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "2596:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 1104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2596:33:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2577:52:6"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1107,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1098,
                            "src": "2647:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                            "id": 1108,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2656:60:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                              "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                            },
                            "value": "Address: unable to send value, recipient may have reverted"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                              "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                            }
                          ],
                          "id": 1106,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "2639:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1109,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2639:78:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1110,
                      "nodeType": "ExpressionStatement",
                      "src": "2639:78:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1079,
                  "nodeType": "StructuredDocumentation",
                  "src": "1501:906:6",
                  "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                },
                "id": 1112,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "sendValue",
                "nameLocation": "2421:9:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1084,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1081,
                      "mutability": "mutable",
                      "name": "recipient",
                      "nameLocation": "2447:9:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1112,
                      "src": "2431:25:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 1080,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2431:15:6",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1083,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "2466:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1112,
                      "src": "2458:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1082,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2458:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2430:43:6"
                },
                "returnParameters": {
                  "id": 1085,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2483:0:6"
                },
                "scope": 1390,
                "src": "2412:312:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1129,
                  "nodeType": "Block",
                  "src": "3555:96:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1123,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1115,
                            "src": "3594:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1124,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1117,
                            "src": "3602:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "hexValue": "30",
                            "id": 1125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3608:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                            "id": 1126,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3611:32:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                              "typeString": "literal_string \"Address: low-level call failed\""
                            },
                            "value": "Address: low-level call failed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                              "typeString": "literal_string \"Address: low-level call failed\""
                            }
                          ],
                          "id": 1122,
                          "name": "functionCallWithValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            1170,
                            1214
                          ],
                          "referencedDeclaration": 1214,
                          "src": "3572:21:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                          }
                        },
                        "id": 1127,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3572:72:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1121,
                      "id": 1128,
                      "nodeType": "Return",
                      "src": "3565:79:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1113,
                  "nodeType": "StructuredDocumentation",
                  "src": "2730:731:6",
                  "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                },
                "id": 1130,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionCall",
                "nameLocation": "3475:12:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1118,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1115,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "3496:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1130,
                      "src": "3488:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1114,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3488:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1117,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "3517:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1130,
                      "src": "3504:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1116,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3504:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3487:35:6"
                },
                "returnParameters": {
                  "id": 1121,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1120,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1130,
                      "src": "3541:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1119,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3541:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3540:14:6"
                },
                "scope": 1390,
                "src": "3466:185:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1149,
                  "nodeType": "Block",
                  "src": "4020:76:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1143,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1133,
                            "src": "4059:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1144,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1135,
                            "src": "4067:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "hexValue": "30",
                            "id": 1145,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4073:1:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "id": 1146,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1137,
                            "src": "4076:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 1142,
                          "name": "functionCallWithValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            1170,
                            1214
                          ],
                          "referencedDeclaration": 1214,
                          "src": "4037:21:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                          }
                        },
                        "id": 1147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4037:52:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1141,
                      "id": 1148,
                      "nodeType": "Return",
                      "src": "4030:59:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1131,
                  "nodeType": "StructuredDocumentation",
                  "src": "3657:211:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                },
                "id": 1150,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionCall",
                "nameLocation": "3882:12:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1138,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1133,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "3912:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1150,
                      "src": "3904:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1132,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3904:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1135,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "3941:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1150,
                      "src": "3928:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1134,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3928:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1137,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "3969:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1150,
                      "src": "3955:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1136,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3955:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3894:93:6"
                },
                "returnParameters": {
                  "id": 1141,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1140,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1150,
                      "src": "4006:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1139,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4006:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4005:14:6"
                },
                "scope": 1390,
                "src": "3873:223:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1169,
                  "nodeType": "Block",
                  "src": "4601:111:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1163,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1153,
                            "src": "4640:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1164,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1155,
                            "src": "4648:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "id": 1165,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1157,
                            "src": "4654:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                            "id": 1166,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4661:43:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                              "typeString": "literal_string \"Address: low-level call with value failed\""
                            },
                            "value": "Address: low-level call with value failed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                              "typeString": "literal_string \"Address: low-level call with value failed\""
                            }
                          ],
                          "id": 1162,
                          "name": "functionCallWithValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            1170,
                            1214
                          ],
                          "referencedDeclaration": 1214,
                          "src": "4618:21:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                          }
                        },
                        "id": 1167,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4618:87:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1161,
                      "id": 1168,
                      "nodeType": "Return",
                      "src": "4611:94:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1151,
                  "nodeType": "StructuredDocumentation",
                  "src": "4102:351:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                },
                "id": 1170,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionCallWithValue",
                "nameLocation": "4467:21:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1158,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1153,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "4506:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "4498:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1152,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4498:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1155,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "4535:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "4522:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1154,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4522:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1157,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "4557:5:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "4549:13:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1156,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4549:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4488:80:6"
                },
                "returnParameters": {
                  "id": 1161,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1160,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "4587:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1159,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "4587:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4586:14:6"
                },
                "scope": 1390,
                "src": "4458:254:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1213,
                  "nodeType": "Block",
                  "src": "5139:267:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1191,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1187,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "5165:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Address_$1390",
                                      "typeString": "library Address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Address_$1390",
                                      "typeString": "library Address"
                                    }
                                  ],
                                  "id": 1186,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5157:7:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1185,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5157:7:6",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1188,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5157:13:6",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1189,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "src": "5157:21:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 1190,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1177,
                              "src": "5182:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5157:30:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                            "id": 1192,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5189:40:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                              "typeString": "literal_string \"Address: insufficient balance for call\""
                            },
                            "value": "Address: insufficient balance for call"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                              "typeString": "literal_string \"Address: insufficient balance for call\""
                            }
                          ],
                          "id": 1184,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "5149:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1193,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5149:81:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1194,
                      "nodeType": "ExpressionStatement",
                      "src": "5149:81:6"
                    },
                    {
                      "assignments": [
                        1196,
                        1198
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1196,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "5246:7:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1213,
                          "src": "5241:12:6",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 1195,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "5241:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 1198,
                          "mutability": "mutable",
                          "name": "returndata",
                          "nameLocation": "5268:10:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1213,
                          "src": "5255:23:6",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 1197,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "5255:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1205,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1203,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1175,
                            "src": "5308:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 1199,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1173,
                              "src": "5282:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1200,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "5282:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 1201,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1177,
                              "src": "5301:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "5282:25:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 1204,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5282:31:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5240:73:6"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1207,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1173,
                            "src": "5357:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1208,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1196,
                            "src": "5365:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1209,
                            "name": "returndata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1198,
                            "src": "5374:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "id": 1210,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "5386:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 1206,
                          "name": "verifyCallResultFromTarget",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1345,
                          "src": "5330:26:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                          }
                        },
                        "id": 1211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5330:69:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1183,
                      "id": 1212,
                      "nodeType": "Return",
                      "src": "5323:76:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1171,
                  "nodeType": "StructuredDocumentation",
                  "src": "4718:237:6",
                  "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                },
                "id": 1214,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionCallWithValue",
                "nameLocation": "4969:21:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1180,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1173,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "5008:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1214,
                      "src": "5000:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1172,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5000:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1175,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "5037:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1214,
                      "src": "5024:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1174,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5024:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1177,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "5059:5:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1214,
                      "src": "5051:13:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1176,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5051:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1179,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "5088:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1214,
                      "src": "5074:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1178,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "5074:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4990:116:6"
                },
                "returnParameters": {
                  "id": 1183,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1182,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1214,
                      "src": "5125:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1181,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5125:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5124:14:6"
                },
                "scope": 1390,
                "src": "4960:446:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1230,
                  "nodeType": "Block",
                  "src": "5683:97:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1225,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1217,
                            "src": "5719:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1226,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1219,
                            "src": "5727:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                            "id": 1227,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5733:39:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                              "typeString": "literal_string \"Address: low-level static call failed\""
                            },
                            "value": "Address: low-level static call failed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                              "typeString": "literal_string \"Address: low-level static call failed\""
                            }
                          ],
                          "id": 1224,
                          "name": "functionStaticCall",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            1231,
                            1260
                          ],
                          "referencedDeclaration": 1260,
                          "src": "5700:18:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                          }
                        },
                        "id": 1228,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5700:73:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1223,
                      "id": 1229,
                      "nodeType": "Return",
                      "src": "5693:80:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1215,
                  "nodeType": "StructuredDocumentation",
                  "src": "5412:166:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                },
                "id": 1231,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionStaticCall",
                "nameLocation": "5592:18:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1220,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1217,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "5619:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1231,
                      "src": "5611:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1216,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5611:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1219,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "5640:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1231,
                      "src": "5627:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1218,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5627:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5610:35:6"
                },
                "returnParameters": {
                  "id": 1223,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1222,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1231,
                      "src": "5669:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1221,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "5669:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5668:14:6"
                },
                "scope": 1390,
                "src": "5583:197:6",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1259,
                  "nodeType": "Block",
                  "src": "6122:168:6",
                  "statements": [
                    {
                      "assignments": [
                        1244,
                        1246
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1244,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "6138:7:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1259,
                          "src": "6133:12:6",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 1243,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "6133:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 1246,
                          "mutability": "mutable",
                          "name": "returndata",
                          "nameLocation": "6160:10:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1259,
                          "src": "6147:23:6",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 1245,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "6147:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1251,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1249,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1236,
                            "src": "6192:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 1247,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1234,
                            "src": "6174:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "staticcall",
                          "nodeType": "MemberAccess",
                          "src": "6174:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                          }
                        },
                        "id": 1250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6174:23:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "6132:65:6"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1253,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1234,
                            "src": "6241:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1254,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1244,
                            "src": "6249:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1255,
                            "name": "returndata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1246,
                            "src": "6258:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "id": 1256,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1238,
                            "src": "6270:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 1252,
                          "name": "verifyCallResultFromTarget",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1345,
                          "src": "6214:26:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                          }
                        },
                        "id": 1257,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6214:69:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1242,
                      "id": 1258,
                      "nodeType": "Return",
                      "src": "6207:76:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1232,
                  "nodeType": "StructuredDocumentation",
                  "src": "5786:173:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                },
                "id": 1260,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionStaticCall",
                "nameLocation": "5973:18:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1239,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1234,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "6009:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1260,
                      "src": "6001:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1233,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6001:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1236,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "6038:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1260,
                      "src": "6025:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1235,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6025:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1238,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "6066:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1260,
                      "src": "6052:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1237,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "6052:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5991:93:6"
                },
                "returnParameters": {
                  "id": 1242,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1241,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1260,
                      "src": "6108:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1240,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6108:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6107:14:6"
                },
                "scope": 1390,
                "src": "5964:326:6",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1276,
                  "nodeType": "Block",
                  "src": "6566:101:6",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1271,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1263,
                            "src": "6604:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1272,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1265,
                            "src": "6612:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                            "id": 1273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6618:41:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                              "typeString": "literal_string \"Address: low-level delegate call failed\""
                            },
                            "value": "Address: low-level delegate call failed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                              "typeString": "literal_string \"Address: low-level delegate call failed\""
                            }
                          ],
                          "id": 1270,
                          "name": "functionDelegateCall",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            1277,
                            1306
                          ],
                          "referencedDeclaration": 1306,
                          "src": "6583:20:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                          }
                        },
                        "id": 1274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6583:77:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1269,
                      "id": 1275,
                      "nodeType": "Return",
                      "src": "6576:84:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1261,
                  "nodeType": "StructuredDocumentation",
                  "src": "6296:168:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                },
                "id": 1277,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionDelegateCall",
                "nameLocation": "6478:20:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1266,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1263,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "6507:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1277,
                      "src": "6499:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1262,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6499:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1265,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "6528:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1277,
                      "src": "6515:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1264,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6515:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6498:35:6"
                },
                "returnParameters": {
                  "id": 1269,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1268,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1277,
                      "src": "6552:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1267,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6552:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6551:14:6"
                },
                "scope": 1390,
                "src": "6469:198:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1305,
                  "nodeType": "Block",
                  "src": "7008:170:6",
                  "statements": [
                    {
                      "assignments": [
                        1290,
                        1292
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1290,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "7024:7:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1305,
                          "src": "7019:12:6",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 1289,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "7019:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 1292,
                          "mutability": "mutable",
                          "name": "returndata",
                          "nameLocation": "7046:10:6",
                          "nodeType": "VariableDeclaration",
                          "scope": 1305,
                          "src": "7033:23:6",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 1291,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "7033:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1297,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1295,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1282,
                            "src": "7080:4:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 1293,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1280,
                            "src": "7060:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "delegatecall",
                          "nodeType": "MemberAccess",
                          "src": "7060:19:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) returns (bool,bytes memory)"
                          }
                        },
                        "id": 1296,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7060:25:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "7018:67:6"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1299,
                            "name": "target",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1280,
                            "src": "7129:6:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1300,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1290,
                            "src": "7137:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1301,
                            "name": "returndata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1292,
                            "src": "7146:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "id": 1302,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1284,
                            "src": "7158:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 1298,
                          "name": "verifyCallResultFromTarget",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1345,
                          "src": "7102:26:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                          }
                        },
                        "id": 1303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7102:69:6",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 1288,
                      "id": 1304,
                      "nodeType": "Return",
                      "src": "7095:76:6"
                    }
                  ]
                },
                "documentation": {
                  "id": 1278,
                  "nodeType": "StructuredDocumentation",
                  "src": "6673:175:6",
                  "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                },
                "id": 1306,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "functionDelegateCall",
                "nameLocation": "6862:20:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1285,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1280,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "6900:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1306,
                      "src": "6892:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1279,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6892:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1282,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "6929:4:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1306,
                      "src": "6916:17:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1281,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6916:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1284,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "6957:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1306,
                      "src": "6943:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1283,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "6943:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6882:93:6"
                },
                "returnParameters": {
                  "id": 1288,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1287,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1306,
                      "src": "6994:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1286,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6994:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6993:14:6"
                },
                "scope": 1390,
                "src": "6853:325:6",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1344,
                  "nodeType": "Block",
                  "src": "7660:434:6",
                  "statements": [
                    {
                      "condition": {
                        "id": 1320,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1311,
                        "src": "7674:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 1342,
                        "nodeType": "Block",
                        "src": "8030:58:6",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1338,
                                  "name": "returndata",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1313,
                                  "src": "8052:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                {
                                  "id": 1339,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1315,
                                  "src": "8064:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1337,
                                "name": "_revert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1389,
                                "src": "8044:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bytes memory,string memory) pure"
                                }
                              },
                              "id": 1340,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8044:33:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1341,
                            "nodeType": "ExpressionStatement",
                            "src": "8044:33:6"
                          }
                        ]
                      },
                      "id": 1343,
                      "nodeType": "IfStatement",
                      "src": "7670:418:6",
                      "trueBody": {
                        "id": 1336,
                        "nodeType": "Block",
                        "src": "7683:341:6",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1324,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1321,
                                  "name": "returndata",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1313,
                                  "src": "7701:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1322,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "7701:17:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1323,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7722:1:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "7701:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1333,
                            "nodeType": "IfStatement",
                            "src": "7697:286:6",
                            "trueBody": {
                              "id": 1332,
                              "nodeType": "Block",
                              "src": "7725:258:6",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 1327,
                                            "name": "target",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1309,
                                            "src": "7927:6:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 1326,
                                          "name": "isContract",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1078,
                                          "src": "7916:10:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                            "typeString": "function (address) view returns (bool)"
                                          }
                                        },
                                        "id": 1328,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "7916:18:6",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      {
                                        "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                        "id": 1329,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7936:31:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                          "typeString": "literal_string \"Address: call to non-contract\""
                                        },
                                        "value": "Address: call to non-contract"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        {
                                          "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                          "typeString": "literal_string \"Address: call to non-contract\""
                                        }
                                      ],
                                      "id": 1325,
                                      "name": "require",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        -18,
                                        -18
                                      ],
                                      "referencedDeclaration": -18,
                                      "src": "7908:7:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                        "typeString": "function (bool,string memory) pure"
                                      }
                                    },
                                    "id": 1330,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7908:60:6",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 1331,
                                  "nodeType": "ExpressionStatement",
                                  "src": "7908:60:6"
                                }
                              ]
                            }
                          },
                          {
                            "expression": {
                              "id": 1334,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1313,
                              "src": "8003:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "functionReturnParameters": 1319,
                            "id": 1335,
                            "nodeType": "Return",
                            "src": "7996:17:6"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 1307,
                  "nodeType": "StructuredDocumentation",
                  "src": "7184:277:6",
                  "text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
                },
                "id": 1345,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "verifyCallResultFromTarget",
                "nameLocation": "7475:26:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1316,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1309,
                      "mutability": "mutable",
                      "name": "target",
                      "nameLocation": "7519:6:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1345,
                      "src": "7511:14:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1308,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7511:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1311,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "7540:7:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1345,
                      "src": "7535:12:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1310,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7535:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1313,
                      "mutability": "mutable",
                      "name": "returndata",
                      "nameLocation": "7570:10:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1345,
                      "src": "7557:23:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1312,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "7557:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1315,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "7604:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1345,
                      "src": "7590:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1314,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "7590:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "7501:121:6"
                },
                "returnParameters": {
                  "id": 1319,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1318,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1345,
                      "src": "7646:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1317,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "7646:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "7645:14:6"
                },
                "scope": 1390,
                "src": "7466:628:6",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1368,
                  "nodeType": "Block",
                  "src": "8475:135:6",
                  "statements": [
                    {
                      "condition": {
                        "id": 1357,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1348,
                        "src": "8489:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 1366,
                        "nodeType": "Block",
                        "src": "8546:58:6",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1362,
                                  "name": "returndata",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1350,
                                  "src": "8568:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                {
                                  "id": 1363,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1352,
                                  "src": "8580:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1361,
                                "name": "_revert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1389,
                                "src": "8560:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bytes memory,string memory) pure"
                                }
                              },
                              "id": 1364,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8560:33:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1365,
                            "nodeType": "ExpressionStatement",
                            "src": "8560:33:6"
                          }
                        ]
                      },
                      "id": 1367,
                      "nodeType": "IfStatement",
                      "src": "8485:119:6",
                      "trueBody": {
                        "id": 1360,
                        "nodeType": "Block",
                        "src": "8498:42:6",
                        "statements": [
                          {
                            "expression": {
                              "id": 1358,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1350,
                              "src": "8519:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "functionReturnParameters": 1356,
                            "id": 1359,
                            "nodeType": "Return",
                            "src": "8512:17:6"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 1346,
                  "nodeType": "StructuredDocumentation",
                  "src": "8100:210:6",
                  "text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
                },
                "id": 1369,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "verifyCallResult",
                "nameLocation": "8324:16:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1353,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1348,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "8355:7:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1369,
                      "src": "8350:12:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1347,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8350:4:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1350,
                      "mutability": "mutable",
                      "name": "returndata",
                      "nameLocation": "8385:10:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1369,
                      "src": "8372:23:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1349,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "8372:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1352,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "8419:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1369,
                      "src": "8405:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1351,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "8405:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8340:97:6"
                },
                "returnParameters": {
                  "id": 1356,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1355,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1369,
                      "src": "8461:12:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1354,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "8461:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8460:14:6"
                },
                "scope": 1390,
                "src": "8315:295:6",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1388,
                  "nodeType": "Block",
                  "src": "8699:457:6",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1379,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1376,
                            "name": "returndata",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1371,
                            "src": "8775:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1377,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "8775:17:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8795:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8775:21:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 1386,
                        "nodeType": "Block",
                        "src": "9105:45:6",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1383,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1373,
                                  "src": "9126:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1382,
                                "name": "revert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -19,
                                  -19
                                ],
                                "referencedDeclaration": -19,
                                "src": "9119:6:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (string memory) pure"
                                }
                              },
                              "id": 1384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9119:20:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1385,
                            "nodeType": "ExpressionStatement",
                            "src": "9119:20:6"
                          }
                        ]
                      },
                      "id": 1387,
                      "nodeType": "IfStatement",
                      "src": "8771:379:6",
                      "trueBody": {
                        "id": 1381,
                        "nodeType": "Block",
                        "src": "8798:301:6",
                        "statements": [
                          {
                            "AST": {
                              "nodeType": "YulBlock",
                              "src": "8956:133:6",
                              "statements": [
                                {
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "8974:40:6",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "returndata",
                                        "nodeType": "YulIdentifier",
                                        "src": "9003:10:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "8997:5:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8997:17:6"
                                  },
                                  "variables": [
                                    {
                                      "name": "returndata_size",
                                      "nodeType": "YulTypedName",
                                      "src": "8978:15:6",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9042:2:6",
                                            "type": "",
                                            "value": "32"
                                          },
                                          {
                                            "name": "returndata",
                                            "nodeType": "YulIdentifier",
                                            "src": "9046:10:6"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "9038:3:6"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9038:19:6"
                                      },
                                      {
                                        "name": "returndata_size",
                                        "nodeType": "YulIdentifier",
                                        "src": "9059:15:6"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nodeType": "YulIdentifier",
                                      "src": "9031:6:6"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9031:44:6"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "9031:44:6"
                                }
                              ]
                            },
                            "documentation": "@solidity memory-safe-assembly",
                            "evmVersion": "london",
                            "externalReferences": [
                              {
                                "declaration": 1371,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "9003:10:6",
                                "valueSize": 1
                              },
                              {
                                "declaration": 1371,
                                "isOffset": false,
                                "isSlot": false,
                                "src": "9046:10:6",
                                "valueSize": 1
                              }
                            ],
                            "id": 1380,
                            "nodeType": "InlineAssembly",
                            "src": "8947:142:6"
                          }
                        ]
                      }
                    }
                  ]
                },
                "id": 1389,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_revert",
                "nameLocation": "8625:7:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1374,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1371,
                      "mutability": "mutable",
                      "name": "returndata",
                      "nameLocation": "8646:10:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1389,
                      "src": "8633:23:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1370,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "8633:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1373,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nameLocation": "8672:12:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 1389,
                      "src": "8658:26:6",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1372,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "8658:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8632:53:6"
                },
                "returnParameters": {
                  "id": 1375,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "8699:0:6"
                },
                "scope": 1390,
                "src": "8616:540:6",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "private"
              }
            ],
            "scope": 1391,
            "src": "194:8964:6",
            "usedErrors": []
          }
        ],
        "src": "101:9058:6"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "id": 7,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "exportedSymbols": {
          "Context": [
            1412
          ]
        },
        "id": 1413,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1392,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "86:23:7"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "Context",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 1393,
              "nodeType": "StructuredDocumentation",
              "src": "111:496:7",
              "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
            },
            "fullyImplemented": true,
            "id": 1412,
            "linearizedBaseContracts": [
              1412
            ],
            "name": "Context",
            "nameLocation": "626:7:7",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 1401,
                  "nodeType": "Block",
                  "src": "702:34:7",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 1398,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "719:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1399,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "719:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 1397,
                      "id": 1400,
                      "nodeType": "Return",
                      "src": "712:17:7"
                    }
                  ]
                },
                "id": 1402,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgSender",
                "nameLocation": "649:10:7",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1394,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "659:2:7"
                },
                "returnParameters": {
                  "id": 1397,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1396,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1402,
                      "src": "693:7:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1395,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "693:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "692:9:7"
                },
                "scope": 1412,
                "src": "640:96:7",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1410,
                  "nodeType": "Block",
                  "src": "809:32:7",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 1407,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "826:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "src": "826:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "functionReturnParameters": 1406,
                      "id": 1409,
                      "nodeType": "Return",
                      "src": "819:15:7"
                    }
                  ]
                },
                "id": 1411,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgData",
                "nameLocation": "751:8:7",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1403,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "759:2:7"
                },
                "returnParameters": {
                  "id": 1406,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1405,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1411,
                      "src": "793:14:7",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1404,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "793:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "792:16:7"
                },
                "scope": 1412,
                "src": "742:99:7",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 1413,
            "src": "608:235:7",
            "usedErrors": []
          }
        ],
        "src": "86:758:7"
      }
    },
    "src/Reentrancy/CrossContractReentrancy/Vault.sol": {
      "id": 8,
      "ast": {
        "absolutePath": "src/Reentrancy/CrossContractReentrancy/Vault.sol",
        "exportedSymbols": {
          "Address": [
            1390
          ],
          "Context": [
            1412
          ],
          "ERC20": [
            640
          ],
          "IERC20": [
            718
          ],
          "IERC20Metadata": [
            743
          ],
          "IERC20Permit": [
            779
          ],
          "IRouter": [
            1432
          ],
          "ReentrancyGuard": [
            53
          ],
          "SafeERC20": [
            1060
          ],
          "Vault": [
            1812
          ]
        },
        "id": 1813,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1414,
            "literals": [
              "solidity",
              "0.8",
              ".13"
            ],
            "nodeType": "PragmaDirective",
            "src": "31:23:8"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
            "file": "../../../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
            "id": 1415,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1813,
            "sourceUnit": 641,
            "src": "56:77:8",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
            "file": "../../../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
            "id": 1416,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1813,
            "sourceUnit": 1061,
            "src": "134:87:8",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
            "file": "../../../lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol",
            "id": 1417,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1813,
            "sourceUnit": 54,
            "src": "222:84:8",
            "symbolAliases": [],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IRouter",
            "contractDependencies": [],
            "contractKind": "interface",
            "fullyImplemented": false,
            "id": 1432,
            "linearizedBaseContracts": [
              1432
            ],
            "name": "IRouter",
            "nameLocation": "318:7:8",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "functionSelector": "38ed1739",
                "id": 1431,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "swapExactTokensForTokens",
                "nameLocation": "341:24:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1429,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1419,
                      "mutability": "mutable",
                      "name": "amountIn",
                      "nameLocation": "383:8:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1431,
                      "src": "375:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1418,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "375:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1421,
                      "mutability": "mutable",
                      "name": "amountOutMin",
                      "nameLocation": "409:12:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1431,
                      "src": "401:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1420,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "401:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1424,
                      "mutability": "mutable",
                      "name": "path",
                      "nameLocation": "450:4:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1431,
                      "src": "431:23:8",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                        "typeString": "address[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 1422,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "431:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1423,
                        "nodeType": "ArrayTypeName",
                        "src": "431:9:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                          "typeString": "address[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1426,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "472:2:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1431,
                      "src": "464:10:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1425,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "464:7:8",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1428,
                      "mutability": "mutable",
                      "name": "deadline",
                      "nameLocation": "492:8:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1431,
                      "src": "484:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1427,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "484:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "365:141:8"
                },
                "returnParameters": {
                  "id": 1430,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "515:0:8"
                },
                "scope": 1432,
                "src": "332:184:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 1813,
            "src": "308:210:8",
            "usedErrors": []
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 1433,
                  "name": "ERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 640,
                  "src": "538:5:8"
                },
                "id": 1434,
                "nodeType": "InheritanceSpecifier",
                "src": "538:5:8"
              },
              {
                "baseName": {
                  "id": 1435,
                  "name": "ReentrancyGuard",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 53,
                  "src": "545:15:8"
                },
                "id": 1436,
                "nodeType": "InheritanceSpecifier",
                "src": "545:15:8"
              }
            ],
            "canonicalName": "Vault",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 1812,
            "linearizedBaseContracts": [
              1812,
              53,
              640,
              743,
              718,
              1412
            ],
            "name": "Vault",
            "nameLocation": "529:5:8",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "global": false,
                "id": 1440,
                "libraryName": {
                  "id": 1437,
                  "name": "SafeERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1060,
                  "src": "573:9:8"
                },
                "nodeType": "UsingForDirective",
                "src": "567:26:8",
                "typeName": {
                  "id": 1439,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1438,
                    "name": "ERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 640,
                    "src": "587:5:8"
                  },
                  "referencedDeclaration": 640,
                  "src": "587:5:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$640",
                    "typeString": "contract ERC20"
                  }
                }
              },
              {
                "constant": false,
                "functionSelector": "c55dae63",
                "id": 1443,
                "mutability": "mutable",
                "name": "baseToken",
                "nameLocation": "612:9:8",
                "nodeType": "VariableDeclaration",
                "scope": 1812,
                "src": "599:22:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ERC20_$640",
                  "typeString": "contract ERC20"
                },
                "typeName": {
                  "id": 1442,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1441,
                    "name": "ERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 640,
                    "src": "599:5:8"
                  },
                  "referencedDeclaration": 640,
                  "src": "599:5:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$640",
                    "typeString": "contract ERC20"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "f887ea40",
                "id": 1446,
                "mutability": "mutable",
                "name": "router",
                "nameLocation": "642:6:8",
                "nodeType": "VariableDeclaration",
                "scope": 1812,
                "src": "627:21:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_IRouter_$1432",
                  "typeString": "contract IRouter"
                },
                "typeName": {
                  "id": 1445,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1444,
                    "name": "IRouter",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1432,
                    "src": "627:7:8"
                  },
                  "referencedDeclaration": 1432,
                  "src": "627:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRouter_$1432",
                    "typeString": "contract IRouter"
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1467,
                  "nodeType": "Block",
                  "src": "728:65:8",
                  "statements": [
                    {
                      "expression": {
                        "id": 1461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1459,
                          "name": "baseToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1443,
                          "src": "738:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$640",
                            "typeString": "contract ERC20"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1460,
                          "name": "_baseToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1449,
                          "src": "750:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$640",
                            "typeString": "contract ERC20"
                          }
                        },
                        "src": "738:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$640",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 1462,
                      "nodeType": "ExpressionStatement",
                      "src": "738:22:8"
                    },
                    {
                      "expression": {
                        "id": 1465,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1463,
                          "name": "router",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1446,
                          "src": "770:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRouter_$1432",
                            "typeString": "contract IRouter"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1464,
                          "name": "_router",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1452,
                          "src": "779:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRouter_$1432",
                            "typeString": "contract IRouter"
                          }
                        },
                        "src": "770:16:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRouter_$1432",
                          "typeString": "contract IRouter"
                        }
                      },
                      "id": 1466,
                      "nodeType": "ExpressionStatement",
                      "src": "770:16:8"
                    }
                  ]
                },
                "id": 1468,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "hexValue": "5661756c74546f6b656e",
                        "id": 1455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "708:12:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_222bd28dc52837d77f4e42a719d9f40a761931c5c307b726f9ecd2653df8038f",
                          "typeString": "literal_string \"VaultToken\""
                        },
                        "value": "VaultToken"
                      },
                      {
                        "hexValue": "5654",
                        "id": 1456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "722:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fb5bac070e56bbdb9efaedc013f6db4d6a9a7aa99ac0c2ecd00a4ebddcf8275b",
                          "typeString": "literal_string \"VT\""
                        },
                        "value": "VT"
                      }
                    ],
                    "id": 1457,
                    "kind": "baseConstructorSpecifier",
                    "modifierName": {
                      "id": 1454,
                      "name": "ERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 640,
                      "src": "702:5:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "702:25:8"
                  }
                ],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1453,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1449,
                      "mutability": "mutable",
                      "name": "_baseToken",
                      "nameLocation": "673:10:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1468,
                      "src": "667:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$640",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 1448,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1447,
                          "name": "ERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 640,
                          "src": "667:5:8"
                        },
                        "referencedDeclaration": 640,
                        "src": "667:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$640",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1452,
                      "mutability": "mutable",
                      "name": "_router",
                      "nameLocation": "693:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1468,
                      "src": "685:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IRouter_$1432",
                        "typeString": "contract IRouter"
                      },
                      "typeName": {
                        "id": 1451,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1450,
                          "name": "IRouter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1432,
                          "src": "685:7:8"
                        },
                        "referencedDeclaration": 1432,
                        "src": "685:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IRouter_$1432",
                          "typeString": "contract IRouter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "666:35:8"
                },
                "returnParameters": {
                  "id": 1458,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "728:0:8"
                },
                "scope": 1812,
                "src": "655:138:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1488,
                  "nodeType": "Block",
                  "src": "868:83:8",
                  "statements": [
                    {
                      "expression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1483,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1475,
                            "name": "_share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1470,
                            "src": "885:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 1480,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "922:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Vault_$1812",
                                      "typeString": "contract Vault"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Vault_$1812",
                                      "typeString": "contract Vault"
                                    }
                                  ],
                                  "id": 1479,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "914:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1478,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "914:7:8",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1481,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "914:13:8",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 1476,
                                "name": "baseToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1443,
                                "src": "894:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ERC20_$640",
                                  "typeString": "contract ERC20"
                                }
                              },
                              "id": 1477,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 152,
                              "src": "894:19:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 1482,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "894:34:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "885:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1484,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 138,
                            "src": "931:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 1485,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "931:13:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "885:59:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1474,
                      "id": 1487,
                      "nodeType": "Return",
                      "src": "878:66:8"
                    }
                  ]
                },
                "functionSelector": "2d6f8013",
                "id": 1489,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "shareToAmount",
                "nameLocation": "808:13:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1471,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1470,
                      "mutability": "mutable",
                      "name": "_share",
                      "nameLocation": "830:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1489,
                      "src": "822:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1469,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "822:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "821:16:8"
                },
                "returnParameters": {
                  "id": 1474,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1473,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1489,
                      "src": "859:7:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1472,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "859:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "858:9:8"
                },
                "scope": 1812,
                "src": "799:152:8",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1509,
                  "nodeType": "Block",
                  "src": "1027:84:8",
                  "statements": [
                    {
                      "expression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1496,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1491,
                            "src": "1044:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1497,
                              "name": "totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 138,
                              "src": "1054:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 1498,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1054:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1044:23:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1504,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "1098:4:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Vault_$1812",
                                    "typeString": "contract Vault"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_Vault_$1812",
                                    "typeString": "contract Vault"
                                  }
                                ],
                                "id": 1503,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1090:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1502,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1090:7:8",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1090:13:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1500,
                              "name": "baseToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1443,
                              "src": "1070:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 1501,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 152,
                            "src": "1070:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1070:34:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1044:60:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 1495,
                      "id": 1508,
                      "nodeType": "Return",
                      "src": "1037:67:8"
                    }
                  ]
                },
                "functionSelector": "2d4047e5",
                "id": 1510,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "amountToShare",
                "nameLocation": "966:13:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1492,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1491,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nameLocation": "988:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1510,
                      "src": "980:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1490,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "980:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "979:17:8"
                },
                "returnParameters": {
                  "id": 1495,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1494,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1510,
                      "src": "1018:7:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1493,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1018:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1017:9:8"
                },
                "scope": 1812,
                "src": "957:154:8",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1556,
                  "nodeType": "Block",
                  "src": "1231:244:8",
                  "statements": [
                    {
                      "assignments": [
                        1518
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1518,
                          "mutability": "mutable",
                          "name": "total",
                          "nameLocation": "1249:5:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1556,
                          "src": "1241:13:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1517,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1241:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1526,
                      "initialValue": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1523,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1285:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              ],
                              "id": 1522,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1277:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1521,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1277:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1277:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 1519,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "1257:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1520,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 152,
                          "src": "1257:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 1525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1257:34:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1241:50:8"
                    },
                    {
                      "assignments": [
                        1528
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1528,
                          "mutability": "mutable",
                          "name": "share",
                          "nameLocation": "1309:5:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1556,
                          "src": "1301:13:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1527,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1301:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1537,
                      "initialValue": {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1529,
                            "name": "total",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1518,
                            "src": "1317:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1326:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1317:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "arguments": [
                            {
                              "id": 1534,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1512,
                              "src": "1354:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1533,
                            "name": "amountToShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1510,
                            "src": "1340:13:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view returns (uint256)"
                            }
                          },
                          "id": 1535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1340:22:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1536,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "1317:45:8",
                        "trueExpression": {
                          "id": 1532,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1512,
                          "src": "1330:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1301:61:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1539,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1378:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1540,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1378:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1541,
                            "name": "share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1528,
                            "src": "1390:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1538,
                          "name": "_mint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 457,
                          "src": "1372:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1542,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1372:24:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1543,
                      "nodeType": "ExpressionStatement",
                      "src": "1372:24:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1547,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1433:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1433:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 1551,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1453:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              ],
                              "id": 1550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1445:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1549,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1445:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1552,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1445:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1553,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1512,
                            "src": "1460:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1544,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "1406:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "safeTransferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 837,
                          "src": "1406:26:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$718_$",
                            "typeString": "function (contract IERC20,address,address,uint256)"
                          }
                        },
                        "id": 1554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1406:62:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1555,
                      "nodeType": "ExpressionStatement",
                      "src": "1406:62:8"
                    }
                  ]
                },
                "functionSelector": "b6b55f25",
                "id": 1557,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1515,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1514,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "1218:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1218:12:8"
                  }
                ],
                "name": "deposit",
                "nameLocation": "1184:7:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1513,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1512,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nameLocation": "1200:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1557,
                      "src": "1192:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1511,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1192:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1191:17:8"
                },
                "returnParameters": {
                  "id": 1516,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1231:0:8"
                },
                "scope": 1812,
                "src": "1175:300:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1681,
                  "nodeType": "Block",
                  "src": "1662:841:8",
                  "statements": [
                    {
                      "assignments": [
                        1570
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1570,
                          "mutability": "mutable",
                          "name": "beforeTransfer",
                          "nameLocation": "1680:14:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1681,
                          "src": "1672:22:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1569,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1672:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1578,
                      "initialValue": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1575,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1725:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              ],
                              "id": 1574,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1717:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1573,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1717:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1717:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 1571,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "1697:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 152,
                          "src": "1697:19:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 1577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1697:34:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1672:59:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1582,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1768:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1583,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1768:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 1586,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1788:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              ],
                              "id": 1585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1780:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1584,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1780:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1780:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1588,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1559,
                            "src": "1795:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1579,
                            "name": "_srcToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1562,
                            "src": "1741:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1581,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "safeTransferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 837,
                          "src": "1741:26:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$718_$",
                            "typeString": "function (contract IERC20,address,address,uint256)"
                          }
                        },
                        "id": 1589,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1741:62:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1590,
                      "nodeType": "ExpressionStatement",
                      "src": "1741:62:8"
                    },
                    {
                      "assignments": [
                        1595
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1595,
                          "mutability": "mutable",
                          "name": "path",
                          "nameLocation": "1830:4:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1681,
                          "src": "1813:21:8",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[]"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 1593,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1813:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1594,
                            "nodeType": "ArrayTypeName",
                            "src": "1813:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                              "typeString": "address[]"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1601,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 1599,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1851:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "id": 1598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "NewExpression",
                          "src": "1837:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (address[] memory)"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 1596,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1841:7:8",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1597,
                            "nodeType": "ArrayTypeName",
                            "src": "1841:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                              "typeString": "address[]"
                            }
                          }
                        },
                        "id": 1600,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1837:16:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1813:40:8"
                    },
                    {
                      "expression": {
                        "id": 1609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1602,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1595,
                            "src": "1863:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 1604,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 1603,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1868:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1863:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 1607,
                              "name": "_srcToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1562,
                              "src": "1881:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            ],
                            "id": 1606,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1873:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1605,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1873:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1608,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1873:18:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1863:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1610,
                      "nodeType": "ExpressionStatement",
                      "src": "1863:28:8"
                    },
                    {
                      "expression": {
                        "id": 1618,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1611,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1595,
                            "src": "1901:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 1613,
                          "indexExpression": {
                            "hexValue": "31",
                            "id": 1612,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1906:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1901:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 1616,
                              "name": "baseToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1443,
                              "src": "1919:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            ],
                            "id": 1615,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1911:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1614,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1911:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1911:18:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1901:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1619,
                      "nodeType": "ExpressionStatement",
                      "src": "1901:28:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1625,
                                "name": "router",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "2003:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              ],
                              "id": 1624,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1995:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1623,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1995:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1626,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1995:15:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1627,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1559,
                            "src": "2012:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1620,
                            "name": "_srcToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1562,
                            "src": "1977:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 220,
                          "src": "1977:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1628,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1977:43:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1629,
                      "nodeType": "ExpressionStatement",
                      "src": "1977:43:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1633,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1559,
                            "src": "2162:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1634,
                            "name": "amountOutMin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1564,
                            "src": "2171:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1635,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1595,
                            "src": "2185:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 1638,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "2199:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Vault_$1812",
                                  "typeString": "contract Vault"
                                }
                              ],
                              "id": 1637,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2191:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1636,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2191:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1639,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2191:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 1640,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "2206:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1641,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "2206:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1630,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1446,
                            "src": "2130:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRouter_$1432",
                              "typeString": "contract IRouter"
                            }
                          },
                          "id": 1632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "swapExactTokensForTokens",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1431,
                          "src": "2130:31:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256,address[] memory,address,uint256) external"
                          }
                        },
                        "id": 1642,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2130:92:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1643,
                      "nodeType": "ExpressionStatement",
                      "src": "2130:92:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1649,
                                "name": "router",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "2290:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              ],
                              "id": 1648,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2282:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1647,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2282:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1650,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2282:15:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "hexValue": "30",
                            "id": 1651,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2299:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "id": 1644,
                            "name": "_srcToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1562,
                            "src": "2264:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1646,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 220,
                          "src": "2264:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2264:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1653,
                      "nodeType": "ExpressionStatement",
                      "src": "2264:37:8"
                    },
                    {
                      "assignments": [
                        1655
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1655,
                          "mutability": "mutable",
                          "name": "baseTokenAmount",
                          "nameLocation": "2319:15:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1681,
                          "src": "2311:23:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1654,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2311:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1665,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1660,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "2365:4:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_Vault_$1812",
                                    "typeString": "contract Vault"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_Vault_$1812",
                                    "typeString": "contract Vault"
                                  }
                                ],
                                "id": 1659,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2357:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1658,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2357:7:8",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2357:13:8",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1656,
                              "name": "baseToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1443,
                              "src": "2337:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 1657,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 152,
                            "src": "2337:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1662,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2337:34:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 1663,
                          "name": "beforeTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1570,
                          "src": "2374:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2337:51:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2311:77:8"
                    },
                    {
                      "assignments": [
                        1667
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1667,
                          "mutability": "mutable",
                          "name": "share",
                          "nameLocation": "2406:5:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1681,
                          "src": "2398:13:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1666,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2398:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1674,
                      "initialValue": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1673,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1671,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1668,
                            "name": "baseTokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1655,
                            "src": "2414:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1669,
                              "name": "totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 138,
                              "src": "2432:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 1670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2432:13:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2414:31:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "id": 1672,
                          "name": "beforeTransfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1570,
                          "src": "2448:14:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2414:48:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2398:64:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1676,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2478:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1677,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2478:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1678,
                            "name": "share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1667,
                            "src": "2490:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1675,
                          "name": "_mint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 457,
                          "src": "2472:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2472:24:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1680,
                      "nodeType": "ExpressionStatement",
                      "src": "2472:24:8"
                    }
                  ]
                },
                "functionSelector": "06a87a12",
                "id": 1682,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1567,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1566,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "1649:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1649:12:8"
                  }
                ],
                "name": "swapAndDeposit",
                "nameLocation": "1569:14:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1565,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1559,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nameLocation": "1592:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1682,
                      "src": "1584:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1558,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1584:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1562,
                      "mutability": "mutable",
                      "name": "_srcToken",
                      "nameLocation": "1607:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1682,
                      "src": "1601:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$640",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 1561,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1560,
                          "name": "ERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 640,
                          "src": "1601:5:8"
                        },
                        "referencedDeclaration": 640,
                        "src": "1601:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$640",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1564,
                      "mutability": "mutable",
                      "name": "amountOutMin",
                      "nameLocation": "1626:12:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1682,
                      "src": "1618:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1563,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1618:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1583:56:8"
                },
                "returnParameters": {
                  "id": 1568,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1662:0:8"
                },
                "scope": 1812,
                "src": "1560:943:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1709,
                  "nodeType": "Block",
                  "src": "2627:142:8",
                  "statements": [
                    {
                      "assignments": [
                        1690
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1690,
                          "mutability": "mutable",
                          "name": "amount",
                          "nameLocation": "2645:6:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1709,
                          "src": "2637:14:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1689,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2637:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1694,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1692,
                            "name": "_share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1684,
                            "src": "2668:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1691,
                          "name": "shareToAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1489,
                          "src": "2654:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 1693,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2654:21:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2637:38:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1696,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2691:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1697,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2691:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1698,
                            "name": "_share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1684,
                            "src": "2703:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1695,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 529,
                          "src": "2685:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1699,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2685:25:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1700,
                      "nodeType": "ExpressionStatement",
                      "src": "2685:25:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1704,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2743:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1705,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2743:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1706,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1690,
                            "src": "2755:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1701,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "2720:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1703,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "safeTransfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 811,
                          "src": "2720:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$718_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$718_$",
                            "typeString": "function (contract IERC20,address,uint256)"
                          }
                        },
                        "id": 1707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2720:42:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1708,
                      "nodeType": "ExpressionStatement",
                      "src": "2720:42:8"
                    }
                  ]
                },
                "functionSelector": "2e1a7d4d",
                "id": 1710,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1687,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1686,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "2614:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2614:12:8"
                  }
                ],
                "name": "withdraw",
                "nameLocation": "2580:8:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1685,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1684,
                      "mutability": "mutable",
                      "name": "_share",
                      "nameLocation": "2597:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1710,
                      "src": "2589:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1683,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2589:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2588:16:8"
                },
                "returnParameters": {
                  "id": 1688,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2627:0:8"
                },
                "scope": 1812,
                "src": "2571:198:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1798,
                  "nodeType": "Block",
                  "src": "2962:493:8",
                  "statements": [
                    {
                      "assignments": [
                        1723
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1723,
                          "mutability": "mutable",
                          "name": "amount",
                          "nameLocation": "2980:6:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1798,
                          "src": "2972:14:8",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1722,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2972:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1727,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 1725,
                            "name": "_share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1712,
                            "src": "3003:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1724,
                          "name": "shareToAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1489,
                          "src": "2989:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (uint256) view returns (uint256)"
                          }
                        },
                        "id": 1726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2989:21:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2972:38:8"
                    },
                    {
                      "assignments": [
                        1732
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1732,
                          "mutability": "mutable",
                          "name": "path",
                          "nameLocation": "3037:4:8",
                          "nodeType": "VariableDeclaration",
                          "scope": 1798,
                          "src": "3020:21:8",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[]"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 1730,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3020:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1731,
                            "nodeType": "ArrayTypeName",
                            "src": "3020:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                              "typeString": "address[]"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1738,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "32",
                            "id": 1736,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3058:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            }
                          ],
                          "id": 1735,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "NewExpression",
                          "src": "3044:13:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (address[] memory)"
                          },
                          "typeName": {
                            "baseType": {
                              "id": 1733,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3048:7:8",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 1734,
                            "nodeType": "ArrayTypeName",
                            "src": "3048:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                              "typeString": "address[]"
                            }
                          }
                        },
                        "id": 1737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3044:16:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3020:40:8"
                    },
                    {
                      "expression": {
                        "id": 1746,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1739,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1732,
                            "src": "3070:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 1741,
                          "indexExpression": {
                            "hexValue": "30",
                            "id": 1740,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3075:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "3070:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 1744,
                              "name": "baseToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1443,
                              "src": "3088:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            ],
                            "id": 1743,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3080:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1742,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3080:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3080:18:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3070:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1747,
                      "nodeType": "ExpressionStatement",
                      "src": "3070:28:8"
                    },
                    {
                      "expression": {
                        "id": 1755,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1748,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1732,
                            "src": "3108:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "id": 1750,
                          "indexExpression": {
                            "hexValue": "31",
                            "id": 1749,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3113:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "3108:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "arguments": [
                            {
                              "id": 1753,
                              "name": "_destToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1715,
                              "src": "3126:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$640",
                                "typeString": "contract ERC20"
                              }
                            ],
                            "id": 1752,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3118:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1751,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3118:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1754,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3118:19:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3108:29:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1756,
                      "nodeType": "ExpressionStatement",
                      "src": "3108:29:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1762,
                                "name": "router",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "3211:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              ],
                              "id": 1761,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3203:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1760,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3203:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1763,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3203:15:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1764,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1723,
                            "src": "3220:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1757,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "3185:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1759,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 220,
                          "src": "3185:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3185:42:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1766,
                      "nodeType": "ExpressionStatement",
                      "src": "3185:42:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1770,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1723,
                            "src": "3269:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1771,
                            "name": "amountOutMin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1717,
                            "src": "3277:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1772,
                            "name": "path",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1732,
                            "src": "3291:4:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1775,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "3305:3:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1776,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3305:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1774,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3297:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1773,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3297:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1777,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3297:19:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "expression": {
                              "id": 1778,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "3318:5:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1779,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "3318:15:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1767,
                            "name": "router",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1446,
                            "src": "3237:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IRouter_$1432",
                              "typeString": "contract IRouter"
                            }
                          },
                          "id": 1769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "swapExactTokensForTokens",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1431,
                          "src": "3237:31:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256,address[] memory,address,uint256) external"
                          }
                        },
                        "id": 1780,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3237:97:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1781,
                      "nodeType": "ExpressionStatement",
                      "src": "3237:97:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 1787,
                                "name": "router",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "3402:6:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IRouter_$1432",
                                  "typeString": "contract IRouter"
                                }
                              ],
                              "id": 1786,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3394:7:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1785,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3394:7:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1788,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3394:15:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "hexValue": "30",
                            "id": 1789,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3411:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "id": 1782,
                            "name": "baseToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1443,
                            "src": "3376:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$640",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 220,
                          "src": "3376:17:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1790,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3376:37:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1791,
                      "nodeType": "ExpressionStatement",
                      "src": "3376:37:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1793,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3429:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3429:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1795,
                            "name": "_share",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1712,
                            "src": "3441:6:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1792,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 529,
                          "src": "3423:5:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1796,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3423:25:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1797,
                      "nodeType": "ExpressionStatement",
                      "src": "3423:25:8"
                    }
                  ]
                },
                "functionSelector": "7b14c628",
                "id": 1799,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1720,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1719,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "2949:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2949:12:8"
                  }
                ],
                "name": "withdrawAndSwap",
                "nameLocation": "2868:15:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1718,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1712,
                      "mutability": "mutable",
                      "name": "_share",
                      "nameLocation": "2892:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1799,
                      "src": "2884:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1711,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2884:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1715,
                      "mutability": "mutable",
                      "name": "_destToken",
                      "nameLocation": "2906:10:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1799,
                      "src": "2900:16:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$640",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 1714,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1713,
                          "name": "ERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 640,
                          "src": "2900:5:8"
                        },
                        "referencedDeclaration": 640,
                        "src": "2900:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$640",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1717,
                      "mutability": "mutable",
                      "name": "amountOutMin",
                      "nameLocation": "2926:12:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1799,
                      "src": "2918:20:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1716,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2918:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2883:56:8"
                },
                "returnParameters": {
                  "id": 1721,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2962:0:8"
                },
                "scope": 1812,
                "src": "2859:596:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1804,
                  "nodeType": "Block",
                  "src": "3542:2:8",
                  "statements": []
                },
                "functionSelector": "322e9f04",
                "id": 1805,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1802,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1801,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "3529:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "3529:12:8"
                  }
                ],
                "name": "work",
                "nameLocation": "3513:4:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1800,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3517:2:8"
                },
                "returnParameters": {
                  "id": 1803,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3542:0:8"
                },
                "scope": 1812,
                "src": "3504:40:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1810,
                  "nodeType": "Block",
                  "src": "3635:2:8",
                  "statements": []
                },
                "functionSelector": "4641257d",
                "id": 1811,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1808,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1807,
                      "name": "nonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 29,
                      "src": "3622:12:8"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "3622:12:8"
                  }
                ],
                "name": "harvest",
                "nameLocation": "3603:7:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1806,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3610:2:8"
                },
                "returnParameters": {
                  "id": 1809,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3635:0:8"
                },
                "scope": 1812,
                "src": "3594:43:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 1813,
            "src": "520:3119:8",
            "usedErrors": []
          }
        ],
        "src": "31:3609:8"
      }
    }
  },
  "errors": [],
  "version": "0.8.13",
  "long_version": "0.8.13+commit.abaa5c0e.Darwin.appleclang",
  "zk_version": "1.4.1"
}