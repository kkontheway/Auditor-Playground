{
  "contracts": {
    "src/Proxy/UUPS/UUPS2.sol": {
      "UUPS2": {
        "abi": [
          {
            "inputs": [],
            "name": "admin",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "foo",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newImplementation",
                "type": "address"
              }
            ],
            "name": "upgrade",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "words",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"words\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Proxy/UUPS/UUPS2.sol\":\"UUPS2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/Proxy/UUPS/UUPS2.sol\":{\"keccak256\":\"0xaf72ed512329118a5078a63c85a93d0fc10992673f64f2453a8fb3fd2afb535b\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://4feb7616317917a641f4c1e0f2cbd3f968a564e6a457e480a41d0054acaa5e4d\",\"dweb:/ipfs/QmRdVxCRMxvG66epBodBGQQcyu8awBzNCKZqAB6wmFN6S1\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"UUPS2.sol:UUPS2\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.eq\t@.BB0_19\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.eq\t@.BB0_27\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n\tjump\t@.BB0_18\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_6[0], r2, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n.BB0_18:\n\tand\t@CPI0_8[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r4\n\tand\t127, r4, r2\n\tadd.ne\tr4, r0, r2\n\tsub.s!\t31, r2, r4\n\tadd\t0, r0, r4\n\tadd.gt\t1, r0, r4\n\tsub!\tr3, r4, r3\n\tjump.ne\t@.BB0_21\n\tsub.s!\t32, r2, r3\n\tjump.lt\t@.BB0_25\n\tadd\t@CPI0_10[0], r0, r3\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\t@CPI0_10[0], r2, r2\n.BB0_26:\n\tsstore\tr3, r0\n\tadd\t1, r3, r3\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_26\n.BB0_25:\n\tadd\t@CPI0_15[0], r0, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_16[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_27:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_29\n.BB0_21:\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_11:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tadd\t1, r0, r2\n\tsload\tr2, r2\n\tand\t@CPI0_8[0], r2, r2\n\tcontext.caller\tr3\n\tsub!\tr3, r2, r2\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r2\n\tand\t@CPI0_17[0], r2, r2\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_16[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_32\n\tst.1\t0, r3\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_35\n\tadd\t160, r0, r1\n\tjump\t@.BB0_38\n.BB0_32:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tadd\t192, r0, r1\n\tjump\t@.BB0_38\n.BB0_35:\n\tadd\t@CPI0_10[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_36:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_36\n\tadd\t@CPI0_11[0], r3, r1\n\tsub.s!\t@CPI0_12[0], r1, r1\n\tjump.ge\t@.BB0_31\n\tadd\t@CPI0_13[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_14[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_31:\n\tadd\t95, r3, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t128, r1, r1\n.BB0_38:\n\tst.1\t64, r1\n\tadd\t32, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tld.1\t128, r2\n\tst.1\tr3, r2\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_43\n\tadd\t64, r1, r3\n\tadd\tr0, r0, r4\n.BB0_40:\n\tadd\tr4, r3, r5\n\tadd\t160, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB0_40\n\tsub!\tr4, r2, r4\n\tjump.le\t@.BB0_43\n\tadd\tr2, r3, r3\n\tst.1\tr3, r0\n.BB0_43:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\t64, r2, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3264763255\nCPI0_3:\n\t.cell 3264763256\nCPI0_4:\n\t.cell 4072872921\nCPI0_5:\n\t.cell 4166100032\nCPI0_6:\n\t.cell 151056400\nCPI0_7:\n\t.cell 1549851163\nCPI0_8:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_9:\n\t.cell 2535301202817642044428229017600\nCPI0_10:\n\t.cell 29102676481673041902632991033461445430619272659676223336789171408008386403022\nCPI0_11:\n\t.cell -18446744073709551393\nCPI0_12:\n\t.cell -18446744073709551488\nCPI0_13:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_14:\n\t.cell 2852213850513516153367582212096\nCPI0_15:\n\t.cell 49933686205517187615444275404443231141829364091569555651474777195113359605766\nCPI0_16:\n\t.cell 2361183241434822606848\nCPI0_17:\n\t.cell -1461501637330902918203684832716283019655932542976\n",
          "bytecode": {
            "object": "0000008003000039000000400030043f0000000003010019000000600330027000000030033001970000000102200190000000190000c13d000000040230008c000000730000413d000000000201043b000000e002200270000000320420009c000000210000a13d000000330120009c0000002d0000613d000000340120009c000000490000613d000000350120009c000000730000c13d0000000001000416000000000101004b000000730000c13d0000000101000039000000000101041a000000290000013d0000000001000416000000000101004b000000730000c13d0000002001000039000001000010044300000120000004430000003101000041000000bb0001042e000000360420009c0000005e0000613d000000370120009c000000730000c13d0000000001000416000000000101004b000000730000c13d000000000100041a0000003801100197000000800010043f0000003901000041000000bb0001042e0000000001000416000000000101004b000000730000c13d0000000201000039000000000201041a000000010320019000000001042002700000007f0240018f000000000204c0190000001f0420008c00000000040000190000000104002039000000000343004b000000580000c13d000000200320008c000000450000413d0000003a030000410000001f0220003900000005022002700000003a02200041000000000003041b0000000103300039000000000423004b000000410000413d0000003f02000041000000000021041b0000004001000041000000bb0001042e0000000001000416000000000101004b000000730000c13d0000000203000039000000000203041a000000010420019000000001052002700000007f0150018f000000000105c0190000001f0510008c00000000050000190000000105002039000000000552013f0000000105500190000000750000613d0000003d0100004100000000001004350000002201000039000000040010043f0000003e01000041000000bc000104300000000002000416000000240330008c000000730000413d000000000202004b000000730000c13d0000000401100370000000000101043b000000380210009c000000730000213d0000000102000039000000000202041a00000038022001970000000003000411000000000223004b000000730000c13d000000000200041a0000004102200197000000000112019f000000000010041b0000004001000041000000bb0001042e0000000001000019000000bc00010430000000800010043f000000000404004b0000007d0000613d0000000000300435000000000201004b000000820000c13d000000a001000039000000990000013d000001000100008a000000000112016f000000a00010043f000000c001000039000000990000013d0000003a0200004100000000040000190000000003040019000000000402041a000000a005300039000000000045043500000001022000390000002004300039000000000514004b000000840000413d0000003b013000410000003c0110009c000000950000813d0000003d0100004100000000001004350000004101000039000000040010043f0000003e01000041000000bc000104300000005f01300039000000200200008a000000000121016f0000008001100039000000400010043f00000020020000390000000003210436000000800200043d0000000000230435000000000302004b000000ad0000613d000000400310003900000000040000190000000005340019000000a006400039000000000606043300000000006504350000002004400039000000000524004b000000a20000413d000000000424004b000000ad0000a13d000000000332001900000000000304350000001f02200039000000200300008a000000000232016f00000040022000390000003003000041000000300420009c0000000002038019000000300410009c000000000103801900000040011002100000006002200210000000000112019f000000bb0001042e000000ba00000432000000bb0001042e000000bc0001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000c298557700000000000000000000000000000000000000000000000000000000c298557800000000000000000000000000000000000000000000000000000000f2c31bd900000000000000000000000000000000000000000000000000000000f851a440000000000000000000000000000000000000000000000000000000000900f010000000000000000000000000000000000000000000000000000000005c60da1b000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000020000000800000000000000000405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5aceffffffffffffffffffffffffffffffffffffffffffffffff00000000000000dfffffffffffffffffffffffffffffffffffffffffffffffff00000000000000804e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000006e657700000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000800000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000c746448ff94e8bca9c1a0175132eb15696ef87df210079be6b4a095dba1251c"
          },
          "methodIdentifiers": {
            "admin()": "f851a440",
            "foo()": "c2985578",
            "implementation()": "5c60da1b",
            "upgrade(address)": "0900f010",
            "words()": "f2c31bd9"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/Proxy/UUPS/UUPS2.sol\"\nobject \"UUPS2_33\" {\n    code {\n        {\n            /// @src 0:76:747  \"contract UUPS2 {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"UUPS2_33_deployed\")\n            codecopy(_1, dataoffset(\"UUPS2_33_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/Proxy/UUPS/UUPS2.sol\"\n    object \"UUPS2_33_deployed\" {\n        code {\n            {\n                /// @src 0:76:747  \"contract UUPS2 {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x0900f010 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value := calldataload(4)\n                        let _3 := sub(shl(160, 1), 1)\n                        let _4 := and(value, _3)\n                        if iszero(eq(value, _4)) { revert(_2, _2) }\n                        if iszero(/** @src 0:674:693  \"msg.sender == admin\" */ eq(/** @src 0:674:684  \"msg.sender\" */ caller(), /** @src 0:76:747  \"contract UUPS2 {...\" */ and(sload(/** @src 0:688:693  \"admin\" */ 0x01), /** @src 0:76:747  \"contract UUPS2 {...\" */ _3))) { revert(_2, _2) }\n                        sstore(_2, or(and(sload(_2), shl(160, 0xffffffffffffffffffffffff)), _4))\n                        return(_1, _2)\n                    }\n                    case 0x5c60da1b { external_fun_implementation() }\n                    case 0xc2985578 { external_fun_foo() }\n                    case 0xf2c31bd9 { external_fun_words() }\n                    case 0xf851a440 { external_fun_admin() }\n                }\n                revert(0, 0)\n            }\n            function external_fun_implementation()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(0), sub(shl(160, 1), 1))\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_foo()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := extract_byte_array_length(sload(/** @src 0:392:405  \"words = \\\"new\\\"\" */ 0x02))\n                /// @src 0:76:747  \"contract UUPS2 {...\"\n                if gt(_2, 31)\n                {\n                    let _3 := 29102676481673041902632991033461445430619272659676223336789171408008386403022\n                    let _4 := add(_3, shr(5, add(_2, 31)))\n                    let start := _3\n                    for { } lt(start, _4) { start := add(start, 1) }\n                    { sstore(start, _1) }\n                }\n                sstore(/** @src 0:392:405  \"words = \\\"new\\\"\" */ 0x02, /** @src 0:76:747  \"contract UUPS2 {...\" */ add(\"new\", 6))\n                return(mload(64), _1)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, _1)\n                let length := mload(value0)\n                mstore(add(headStart, _1), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                if gt(i, length)\n                {\n                    mstore(add(add(headStart, length), 64), 0)\n                }\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function external_fun_words()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let memPtr := mload(64)\n                let ret := _1\n                let slotValue := sload(/** @src 0:219:238  \"string public words\" */ 2)\n                /// @src 0:76:747  \"contract UUPS2 {...\"\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                let _2 := 0x20\n                let _3 := 1\n                switch and(slotValue, _3)\n                case 0 {\n                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                    ret := add(memPtr, 64)\n                }\n                case 1 {\n                    mstore(_1, /** @src 0:219:238  \"string public words\" */ 2)\n                    /// @src 0:76:747  \"contract UUPS2 {...\"\n                    let dataPos := 29102676481673041902632991033461445430619272659676223336789171408008386403022\n                    let i := _1\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                        dataPos := add(dataPos, _3)\n                    }\n                    ret := add(add(memPtr, i), _2)\n                }\n                let newFreePtr := add(memPtr, and(add(sub(ret, memPtr), 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(_1, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(_1, 0x24)\n                }\n                mstore(64, newFreePtr)\n                return(newFreePtr, sub(abi_encode_string(newFreePtr, memPtr), newFreePtr))\n            }\n            function external_fun_admin()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 0:193:213  \"address public admin\" */ 1), /** @src 0:76:747  \"contract UUPS2 {...\" */ sub(shl(160, 1), 1))\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f805c6df777ac3850d24ce64eb70b0a45128db6b6b9f9523e7f94066ec6bf72c64736f6c634300080d0033\"\n    }\n}\n",
        "hash": "01000043f22c549abfb86f8281935cec130d0ad03fdea57dbe7b7fbcb265ba4e",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/Proxy/UUPS/UUPS2.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/Proxy/UUPS/UUPS2.sol",
        "exportedSymbols": {
          "UUPS2": [
            33
          ]
        },
        "id": 34,
        "license": "SEE LICENSE IN LICENSE",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "0.8",
              ".13"
            ],
            "nodeType": "PragmaDirective",
            "src": "51:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "UUPS2",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 33,
            "linearizedBaseContracts": [
              33
            ],
            "name": "UUPS2",
            "nameLocation": "85:5:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "5c60da1b",
                "id": 3,
                "mutability": "mutable",
                "name": "implementation",
                "nameLocation": "173:14:0",
                "nodeType": "VariableDeclaration",
                "scope": 33,
                "src": "158:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 2,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "158:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "f851a440",
                "id": 5,
                "mutability": "mutable",
                "name": "admin",
                "nameLocation": "208:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 33,
                "src": "193:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 4,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "193:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "f2c31bd9",
                "id": 7,
                "mutability": "mutable",
                "name": "words",
                "nameLocation": "233:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 33,
                "src": "219:19:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 6,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "219:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 14,
                  "nodeType": "Block",
                  "src": "382:30:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 12,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 10,
                          "name": "words",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "392:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "6e6577",
                          "id": 11,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "400:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_41e691fcbdc41a0c9c62caec68dbbdb99b245cbb72f06df6f40fa1bd1b4d97d9",
                            "typeString": "literal_string \"new\""
                          },
                          "value": "new"
                        },
                        "src": "392:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 13,
                      "nodeType": "ExpressionStatement",
                      "src": "392:13:0"
                    }
                  ]
                },
                "functionSelector": "c2985578",
                "id": 15,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "foo",
                "nameLocation": "369:3:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 8,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "372:2:0"
                },
                "returnParameters": {
                  "id": 9,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "382:0:0"
                },
                "scope": 33,
                "src": "360:52:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 31,
                  "nodeType": "Block",
                  "src": "656:89:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 24,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 21,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "674:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 22,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "674:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 23,
                              "name": "admin",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5,
                              "src": "688:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "674:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 20,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "666:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 25,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "666:28:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 26,
                      "nodeType": "ExpressionStatement",
                      "src": "666:28:0"
                    },
                    {
                      "expression": {
                        "id": 29,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 27,
                          "name": "implementation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "704:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 28,
                          "name": "newImplementation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17,
                          "src": "721:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "704:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 30,
                      "nodeType": "ExpressionStatement",
                      "src": "704:34:0"
                    }
                  ]
                },
                "functionSelector": "0900f010",
                "id": 32,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "upgrade",
                "nameLocation": "612:7:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 17,
                      "mutability": "mutable",
                      "name": "newImplementation",
                      "nameLocation": "628:17:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 32,
                      "src": "620:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 16,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "620:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "619:27:0"
                },
                "returnParameters": {
                  "id": 19,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "656:0:0"
                },
                "scope": 33,
                "src": "603:142:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 34,
            "src": "76:671:0",
            "usedErrors": []
          }
        ],
        "src": "51:697:0"
      }
    }
  },
  "errors": [],
  "version": "0.8.13",
  "long_version": "0.8.13+commit.abaa5c0e.Darwin.appleclang",
  "zk_version": "1.4.1"
}