{
  "contracts": {
    "src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol": {
      "PrivateBank": {
        "abi": [
          {
            "inputs": [],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "name": "userBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "withdrawAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol\":\"PrivateBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol\":{\"keccak256\":\"0x10735c3e70d7bd61033a91ef70656db96911b4cc06af19bc333723e786fa22fb\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://6b13f2fddef79a836fe7a3bd56e4922d0402050cfb37f3d7e0ddf16af9455182\",\"dweb:/ipfs/QmTZEDvqmLEvnyDrhTv4Z5qva8rd91AtyQwXFWZLk2dkZT\"]}},\"version\":1}",
          "solc_version": "0.8.13",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"PrivateBank.sol:PrivateBank\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.eq\t@.BB0_34\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.eq\t@.BB0_12\n\tsub.s!\t@CPI0_4[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand!\t255, r1, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t256, r0, stack-[1]\n\tand\tstack-[1], r1, r1\n\tor\t1, r1, r1\n\tsstore\tr0, r1\n\tcontext.caller\tr1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub!\tr3, r0, r1\n\tjump.eq\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tsub!\tr2, r3, r4\n\tjump.lt\t@.BB0_17\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r2\n\tcontext.gas_left\tr1\n\tadd\tstack-[3], r0, r4\n\tsub.s!\t4, r4, r5\n\tjump.ne\t@.BB0_22\n\tadd\tstack[@returndatasize], r0, r1\n\tadd\tstack-[2], r0, r2\n\tjump\t@.BB0_21\n.BB0_34:\n\tsload\tr0, r1\n\tand!\t255, r1, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t256, r0, stack-[3]\n\tand\tstack-[3], r1, r1\n\tor\t1, r1, r1\n\tsstore\tr0, r1\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t1, r0, r3\n\tcontext.get_context_u128\tr2\n\txor\tr2, r3, r3\n\tld\tr1, r1\n\tsload\tr1, r4\n\tsub!\tr4, r3, r5\n\tjump.gt\t@.BB0_17\n\tadd\tr4, r2, r4\n\tsstore\tr1, r4\n\tadd\t2, r0, r1\n\tsload\tr1, r4\n\tsub!\tr4, r3, r3\n\tjump.le\t@.BB0_38\n.BB0_17:\n\tadd\t@CPI0_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_38:\n\tadd\tr4, r2, r2\n\tsstore\tr1, r2\n\tsload\tr0, r1\n\tand\tstack-[3], r1, r1\n\tsstore\tr0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_22:\n\tadd\t@CPI0_0[0], r0, r6\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr6, r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr6, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_6[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_21:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_26\n.BB0_23:\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r1\n\tand\t@CPI0_11[0], r1, r1\n\tst.1\t0, r1\n\tadd\tstack-[2], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsstore\tr1, r0\n\tsload\tr0, r1\n\tand\tstack-[1], r1, r1\n\tsstore\tr0, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_26:\n\tsub.s!\t@CPI0_7[0], r1, r3\n\tjump.ge\t@.BB0_27\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t63, r3, r3\n\tand\tr3, r4, r3\n\tld.1\t64, r4\n\tadd\tr4, r3, r3\n\tsub!\tr3, r4, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_8[0], r3, r6\n\tjump.gt\t@.BB0_27\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_27\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr4, r1, r4\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_39\n\tadd\tr0, r0, r6\n.BB0_32:\n\tshl.s\t5, r6, r7\n\tadd\tr4, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_32\n.BB0_39:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_23\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr4, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r4\n\tshl\tr4, r3, r4\n\tshr\tr4, r3, r4\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r4, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_23\n.BB0_27:\n\tadd\t@CPI0_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI1_0[0], r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI1_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t64, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI1_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB1_2\n\tld\tr1, r1\n\tret\n.BB1_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 3504541104\nCPI0_3:\n\t.cell 2235050166\nCPI0_4:\n\t.cell 17025323\nCPI0_5:\nCPI1_1:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_6:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_7:\n\t.cell 18446744073709551616\nCPI0_8:\n\t.cell 18446744073709551615\nCPI0_9:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_10:\n\t.cell 2852213850513516153367582212096\nCPI0_11:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_12:\n\t.cell 2535301202817642044428229017600\n",
          "bytecode": {
            "object": "0002000000000002000300000000000200000000030100190000006003300270000000450330019700010000003103550000008004000039000000400040043f0000000102200190000000260000c13d000000040230008c000000bb0000413d000000000201043b000000e002200270000000470420009c0000005a0000613d000000480420009c0000002e0000613d000000490220009c000000bb0000c13d0000000002000416000000240330008c000000bb0000413d000000000202004b000000bb0000c13d0000000401100370000000000101043b000000500210009c000000bb0000213d00000000001004350000000101000039000000200010043f0000000001000019010e00f20000040f000000000101041a000000800010043f00000051010000410000010f0001042e0000000001000416000000000101004b000000bb0000c13d00000020010000390000010000100443000001200000044300000046010000410000010f0001042e0000000001000416000000000101004b000000bb0000c13d000000000100041a000000ff02100190000000bb0000c13d0001010000000092000000010110017f00000001011001bf000000000010041b0000000001000411000300000001001d00000000001004350000000101000039000200000001001d000000200010043f00000045010000410000000002000414000000450320009c0000000002018019000000c0012002100000004a011001c70000801002000039010e01090000040f0000000102200190000000bb0000613d000000000101043b000000000301041a000000000103004b000000bb0000613d0000000201000039000000000201041a000000000432004b0000007c0000413d0000000002320049000000000021041b000000400200043d00000000010004140000000304000029000000040540008c0000008d0000c13d000000000100003100000002020000290000009e0000013d000000000100041a000000ff02100190000000bb0000c13d0003010000000092000000030110017f00000001011001bf000000000010041b000000000100041100000000001004350000000101000039000000200010043f00000045010000410000000002000414000000450320009c0000000002018019000000c0012002100000004a011001c70000801002000039010e01090000040f0000000102200190000000bb0000613d000000010300008a0000000002000416000000000332013f000000000101043b000000000401041a000000000534004b0000007c0000213d0000000004240019000000000041041b0000000201000039000000000401041a000000000334004b000000820000a13d0000004e0100004100000000001004350000001101000039000000040010043f0000004f0100004100000110000104300000000002240019000000000021041b000000000100041a000000030110017f000000000010041b0000004501000041000000400200043d000000450320009c000000000201801900000040012002100000010f0001042e0000004506000041000000450510009c0000000001068019000000450520009c00000000020680190000004002200210000000c001100210000000000121019f0000004b011001c700008009020000390000000005000019010e01040000040f000000010220018f00010000000103550000006001100270000000450010019d0000004501100197000000000301004b000000bd0000c13d000000000102004b000000bb0000613d0000000301000029000000500110019700000000001004350000000201000029000000200010043f00000045030000410000000001000414000000450210009c0000000001038019000000c0011002100000004a011001c70000801002000039010e01090000040f0000000102200190000000bb0000613d000000000101043b000000000001041b000000000100041a000000010110017f000000000010041b000000400100043d000000450210009c000000450100804100000040011002100000010f0001042e000000000100001900000110000104300000004c0310009c000000ec0000813d0000001f03100039000000200400008a000000000343016f0000003f03300039000000000343016f000000400400043d0000000003340019000000000543004b000000000500001900000001050040390000004d0630009c000000ec0000213d0000000105500190000000ec0000c13d000000400030043f0000001f0310018f000000000414043600000001050003670000000501100272000000dc0000613d000000000600001900000005076002100000000008740019000000000775034f000000000707043b00000000007804350000000106600039000000000716004b000000d40000413d000000000603004b000000a00000613d0000000501100210000000000515034f00000000011400190000000303300210000000000401043300000000043401cf000000000434022f000000000505043b0000010003300089000000000535022f00000000033501cf000000000343019f0000000000310435000000a00000013d0000004e0100004100000000001004350000004101000039000000040010043f0000004f0100004100000110000104300000004502000041000000450310009c00000000010280190000000003000414000000450430009c0000000003028019000000c0023002100000004001100210000000000121019f0000004a011001c70000801002000039010e01090000040f0000000102200190000001020000613d000000000101043b000000000001042d0000000001000019000001100001043000000107002104210000000102000039000000000001042d0000000002000019000000000001042d0000010c002104230000000102000039000000000001042d0000000002000019000000000001042d0000010e000004320000010f0001042e000001100001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000d0e30db000000000000000000000000000000000000000000000000000000000853828b6000000000000000000000000000000000000000000000000000000000103c92b020000000000000000000000000000000000004000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff4e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000002000000080000000000000000090880af91a29b628dbd3bafe57f8df0a66e39dd733f5ddc03fd58467da356355"
          },
          "methodIdentifiers": {
            "deposit()": "d0e30db0",
            "userBalance(address)": "0103c92b",
            "withdrawAll()": "853828b6"
          }
        },
        "irOptimized": "/// @use-src 0:\"src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol\"\nobject \"PrivateBank_90\" {\n    code {\n        {\n            /// @src 0:76:748  \"contract PrivateBank {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"PrivateBank_90_deployed\")\n            codecopy(_1, dataoffset(\"PrivateBank_90_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol\"\n    object \"PrivateBank_90_deployed\" {\n        code {\n            {\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x0103c92b {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                        let value := calldataload(4)\n                        let _3 := and(value, sub(shl(160, 1), 1))\n                        if iszero(eq(value, _3)) { revert(_2, _2) }\n                        mstore(_2, _3)\n                        mstore(32, /** @src 0:126:172  \"mapping(address => uint256) public userBalance\" */ 1)\n                        /// @src 0:76:748  \"contract PrivateBank {...\"\n                        mstore(_1, sload(keccak256(_2, 64)))\n                        return(_1, 32)\n                    }\n                    case 0x853828b6 { external_fun_withdrawAll() }\n                    case 0xd0e30db0 { external_fun_deposit() }\n                }\n                revert(0, 0)\n            }\n            function mapping_index_access_mapping_address_uint256_of_address(key) -> dataSlot\n            {\n                mstore(0, and(key, sub(shl(160, 1), 1)))\n                mstore(0x20, /** @src 0:271:275  \"true\" */ 0x01)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                dataSlot := keccak256(0, 0x40)\n            }\n            function external_fun_withdrawAll()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := sload(_1)\n                if iszero(/** @src 0:248:253  \"!lock\" */ iszero(/** @src 0:76:748  \"contract PrivateBank {...\" */ and(_2, 0xff))) { revert(_1, _1) }\n                sstore(_1, or(and(_2, not(255)), /** @src 0:271:275  \"true\" */ 0x01))\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                mstore(_1, /** @src 0:545:555  \"msg.sender\" */ caller())\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                mstore(0x20, /** @src 0:271:275  \"true\" */ 0x01)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                let _3 := sload(keccak256(_1, 0x40))\n                if /** @src 0:574:585  \"balance > 0\" */ iszero(_3)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                { revert(_1, _1) }\n                let _4 := sload(/** @src 0:596:619  \"totalBalance -= balance\" */ 0x02)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                if lt(_4, _3) { panic_error_0x11() }\n                sstore(/** @src 0:596:619  \"totalBalance -= balance\" */ 0x02, /** @src 0:76:748  \"contract PrivateBank {...\" */ sub(_4, _3))\n                /// @src 0:644:679  \"msg.sender.call{value: balance}(\\\"\\\")\"\n                let expr_component := call(gas(), /** @src 0:545:555  \"msg.sender\" */ caller(), /** @src 0:644:679  \"msg.sender.call{value: balance}(\\\"\\\")\" */ _3, /** @src 0:76:748  \"contract PrivateBank {...\" */ mload(0x40), _1, _1, _1)\n                switch returndatasize()\n                case 0 { }\n                default {\n                    let _5 := returndatasize()\n                    let _6 := 0xffffffffffffffff\n                    if gt(_5, _6) { panic_error_0x41() }\n                    let _7 := not(31)\n                    let memPtr := mload(0x40)\n                    let newFreePtr := add(memPtr, and(add(and(add(_5, 31), _7), 63), _7))\n                    if or(gt(newFreePtr, _6), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                    mstore(0x40, newFreePtr)\n                    mstore(memPtr, _5)\n                    returndatacopy(add(memPtr, 0x20), _1, returndatasize())\n                }\n                /// @src 0:689:702  \"require(done)\"\n                require_helper(expr_component)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                sstore(/** @src 0:712:735  \"userBalance[msg.sender]\" */ mapping_index_access_mapping_address_uint256_of_address(/** @src 0:545:555  \"msg.sender\" */ caller()), /** @src 0:76:748  \"contract PrivateBank {...\" */ _1)\n                /// @src 0:296:308  \"lock = false\"\n                update_storage_value_offsett_bool_to_bool()\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                return(mload(0x40), _1)\n            }\n            function external_fun_deposit()\n            {\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := sload(_1)\n                if iszero(/** @src 0:248:253  \"!lock\" */ iszero(/** @src 0:76:748  \"contract PrivateBank {...\" */ and(_2, 0xff))) { revert(_1, _1) }\n                let _3 := not(255)\n                sstore(_1, or(and(_2, _3), /** @src 0:271:275  \"true\" */ 0x01))\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                mstore(_1, /** @src 0:390:400  \"msg.sender\" */ caller())\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                mstore(0x20, /** @src 0:271:275  \"true\" */ 0x01)\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                let dataSlot := keccak256(_1, 0x40)\n                sstore(dataSlot, /** @src 0:378:414  \"userBalance[msg.sender] += msg.value\" */ checked_add_uint256(/** @src 0:76:748  \"contract PrivateBank {...\" */ sload(/** @src 0:378:414  \"userBalance[msg.sender] += msg.value\" */ dataSlot), /** @src 0:405:414  \"msg.value\" */ callvalue()))\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                sstore(/** @src 0:424:449  \"totalBalance += msg.value\" */ 0x02, checked_add_uint256(/** @src 0:76:748  \"contract PrivateBank {...\" */ sload(/** @src 0:424:449  \"totalBalance += msg.value\" */ 0x02), /** @src 0:405:414  \"msg.value\" */ callvalue()))\n                /// @src 0:76:748  \"contract PrivateBank {...\"\n                sstore(_1, and(sload(_1), _3))\n                return(mload(0x40), _1)\n            }\n            function require_helper(condition)\n            {\n                if iszero(condition) { revert(0, 0) }\n            }\n            function update_storage_value_offsett_bool_to_bool()\n            {\n                sstore(0, and(sload(0), not(255)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                if gt(x, not(y)) { panic_error_0x11() }\n                sum := add(x, y)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212208b177f164b2e506126a216b2ad3cfb14adb42bc57fecbd7e02bf7d2d3031f83264736f6c634300080d0033\"\n    }\n}\n",
        "hash": "01000053be0228670f31b30b10d771b879ba5f04a0a323d69caf4e8ff9b418d7",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "src/Reentrancy/ReadonlyReentrancy/PrivateBank.sol",
        "exportedSymbols": {
          "PrivateBank": [
            90
          ]
        },
        "id": 91,
        "license": "SEE LICENSE IN LICENSE",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "0.8",
              ".13"
            ],
            "nodeType": "PragmaDirective",
            "src": "51:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "PrivateBank",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 90,
            "linearizedBaseContracts": [
              90
            ],
            "name": "PrivateBank",
            "nameLocation": "85:11:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "lock",
                "nameLocation": "116:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 90,
                "src": "103:17:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "103:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "functionSelector": "0103c92b",
                "id": 7,
                "mutability": "mutable",
                "name": "userBalance",
                "nameLocation": "161:11:0",
                "nodeType": "VariableDeclaration",
                "scope": 90,
                "src": "126:46:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 6,
                  "keyType": {
                    "id": 4,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "134:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "126:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 5,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "145:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 9,
                "mutability": "mutable",
                "name": "totalBalance",
                "nameLocation": "187:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 90,
                "src": "179:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 8,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "179:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 25,
                  "nodeType": "Block",
                  "src": "230:85:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 13,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "248:5:0",
                            "subExpression": {
                              "id": 12,
                              "name": "lock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3,
                              "src": "249:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 11,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "240:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 14,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "240:14:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 15,
                      "nodeType": "ExpressionStatement",
                      "src": "240:14:0"
                    },
                    {
                      "expression": {
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 16,
                          "name": "lock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "264:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "74727565",
                          "id": 17,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "271:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "264:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 19,
                      "nodeType": "ExpressionStatement",
                      "src": "264:11:0"
                    },
                    {
                      "id": 20,
                      "nodeType": "PlaceholderStatement",
                      "src": "285:1:0"
                    },
                    {
                      "expression": {
                        "id": 23,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 21,
                          "name": "lock",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "296:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "66616c7365",
                          "id": 22,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "303:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "296:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 24,
                      "nodeType": "ExpressionStatement",
                      "src": "296:12:0"
                    }
                  ]
                },
                "id": 26,
                "name": "NonReentrant",
                "nameLocation": "215:12:0",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 10,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "227:2:0"
                },
                "src": "206:109:0",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 44,
                  "nodeType": "Block",
                  "src": "368:88:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 31,
                            "name": "userBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7,
                            "src": "378:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 34,
                          "indexExpression": {
                            "expression": {
                              "id": 32,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "390:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 33,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "390:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "378:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 35,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "405:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "405:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "378:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 38,
                      "nodeType": "ExpressionStatement",
                      "src": "378:36:0"
                    },
                    {
                      "expression": {
                        "id": 42,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 39,
                          "name": "totalBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9,
                          "src": "424:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "expression": {
                            "id": 40,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "440:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 41,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "440:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "424:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 43,
                      "nodeType": "ExpressionStatement",
                      "src": "424:25:0"
                    }
                  ]
                },
                "functionSelector": "d0e30db0",
                "id": 45,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 29,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 28,
                      "name": "NonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 26,
                      "src": "355:12:0"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "355:12:0"
                  }
                ],
                "name": "deposit",
                "nameLocation": "330:7:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 27,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "337:2:0"
                },
                "returnParameters": {
                  "id": 30,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "368:0:0"
                },
                "scope": 90,
                "src": "321:135:0",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 88,
                  "nodeType": "Block",
                  "src": "505:241:0",
                  "statements": [
                    {
                      "assignments": [
                        51
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 51,
                          "mutability": "mutable",
                          "name": "balance",
                          "nameLocation": "523:7:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 88,
                          "src": "515:15:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 50,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "515:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 56,
                      "initialValue": {
                        "baseExpression": {
                          "id": 52,
                          "name": "userBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "533:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 55,
                        "indexExpression": {
                          "expression": {
                            "id": 53,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "545:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "545:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "533:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "515:41:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 60,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 58,
                              "name": "balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 51,
                              "src": "574:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 59,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "584:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "574:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 57,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "566:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "566:20:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 62,
                      "nodeType": "ExpressionStatement",
                      "src": "566:20:0"
                    },
                    {
                      "expression": {
                        "id": 65,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 63,
                          "name": "totalBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9,
                          "src": "596:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "-=",
                        "rightHandSide": {
                          "id": 64,
                          "name": "balance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51,
                          "src": "612:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "596:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 66,
                      "nodeType": "ExpressionStatement",
                      "src": "596:23:0"
                    },
                    {
                      "assignments": [
                        68,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 68,
                          "mutability": "mutable",
                          "name": "done",
                          "nameLocation": "635:4:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 88,
                          "src": "630:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 67,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "630:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 76,
                      "initialValue": {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 74,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "676:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 69,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "644:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 70,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "644:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 71,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "644:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 73,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "id": 72,
                              "name": "balance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 51,
                              "src": "667:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "644:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 75,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "644:35:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "629:50:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 78,
                            "name": "done",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 68,
                            "src": "697:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 77,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "689:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "689:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 80,
                      "nodeType": "ExpressionStatement",
                      "src": "689:13:0"
                    },
                    {
                      "expression": {
                        "id": 86,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 81,
                            "name": "userBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7,
                            "src": "712:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 84,
                          "indexExpression": {
                            "expression": {
                              "id": 82,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "724:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 83,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "724:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "712:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 85,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "738:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "712:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 87,
                      "nodeType": "ExpressionStatement",
                      "src": "712:27:0"
                    }
                  ]
                },
                "functionSelector": "853828b6",
                "id": 89,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 48,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 47,
                      "name": "NonReentrant",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 26,
                      "src": "492:12:0"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "492:12:0"
                  }
                ],
                "name": "withdrawAll",
                "nameLocation": "471:11:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 46,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "482:2:0"
                },
                "returnParameters": {
                  "id": 49,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "505:0:0"
                },
                "scope": 90,
                "src": "462:284:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 91,
            "src": "76:672:0",
            "usedErrors": []
          }
        ],
        "src": "51:698:0"
      }
    }
  },
  "errors": [],
  "version": "0.8.13",
  "long_version": "0.8.13+commit.abaa5c0e.Darwin.appleclang",
  "zk_version": "1.4.1"
}